
/* based on something from Chris Coyier at http://www.css-tricks.com */
@mixin triangle($size, $color) {
  width: 0;
  height: 0;
  border-top: $size solid transparent;
  border-bottom: $size solid transparent;
  border-right: $size solid;
  border-right-color: $color;
}

@mixin debug($color: #ff8888) {
  background-color: $color;
}

@mixin min-width-query($size) {
   @media screen and (min-width: $size) { @content; }
}

/**
 * Media query shorthand.  Usage:
 *
 * @include mq([condition1], [condition2], [condition3], [...]) {
 *   // the stuff that should happen under the given conditions.
 * }
 *
 * Each condition should be one of:
 * - `sm`, `md`, `lg`: translates to `@media screen and (min-width: size) { ... }`, where
 *   `size` is the Bootstrap-like variable, e.g. `$screen-sm-min`.  Useful
 *   when you're being "mobile-first".
 *
 * - `print`: translates to `@media print`
 *
 * - `too-sm`: translates to `@media screen and (max-width: $screen-sm-min - 1) { ... }`.
 *   Useful when you're being *not* "mobile-first".
 *
 * - an arbitrary media query: just does `@media (condition) { ... }`
 *
 */

@mixin mq($conditions...) {
  @each $condition in $conditions {
    @if $condition == sm {
      @include min-width-query($screen-sm-min) { @content; }
    }
    @else if $condition == md {
      @include min-width-query($screen-md-min) { @content; }
    }
    @else if $condition == lg {
      @include min-width-query($screen-lg-min) { @content; }
    }
    @else if $condition == too-sm {
      @media screen and (max-width: ($screen-sm-min - 1)) { @content; }
    }
    @else if $condition == print {
      @media print { @content; }
    }
    @else {
      @media ($condition) { @content; }
    }
  }
}

/**
 * Box sizing:
 * http://www.paulirish.com/2012/box-sizing-border-box-ftw/
 */
html {
  box-sizing: border-box;
}
*, *:before, *:after {
  box-sizing: inherit;
}

/**
 * Basic styling
 */

// This is in a mixin so we can also use it from the @page rule.
@mixin base-style {
  font-size: $font-size-base;
  font-family: $font-family-text;
  line-height: $base-line-height;
  font-weight: 300;
  color: $text-color;
  background-color: $background-color;
  -webkit-text-size-adjust: 100%;
}

body {
  @include base-style();
  @include mq(sm) { font-size: $font-size-sm; }
  @include mq(print) {
    font-size: $font-size-print;
    background-color: #fff;
    color: #000;
  }
}


/**
 * Vertical rhythm
 */

@function lines($lines) {
  @return (1em * $base-line-height * $lines);
}

* {
  margin-top: 0;
  margin-bottom: 0;
}

* + * {
    margin-top: lines(1);
    margin-bottom: 0;
}



/**
 * Images & Figures
 */
figure,
img {
    max-width: 100%;
    vertical-align: middle;
}

figure {
  margin-left: 0;
  margin-right: 0;
}

figure > img {
    display: block;
    width: 100%;
}

figcaption {
    font-size: $small-font-size;
}


/**
 * Lists
 */
ul, ol {
  margin-left: $gutter-sm;
  padding: 0;
  @include mq(print) { margin-left: $gutter-print; }
}

ul {
  list-style-type: none;
}

li {
  margin-top: 0;
  > ul,
  > ol {
       margin-bottom: 0;
  }
}

dl {
}
dd,dt {
  margin: 0;
}



/**
 * Headings
 */
h1, h2, h3, h4, h5, h6 {
    font-weight: 300;
    line-height: 1;
    font-family: $font-family-display;
}

h1 {
  color: $grey-color-light;
  font-weight: 700;
  text-transform: uppercase;
}

h2 {
  color: $grey-color;
  font-weight: 400;
}

h3 {
  color: $grey-color;
  font-weight: 700;
}



/**
 * Links
 */
a {
    color: $brand-color;
    text-decoration: none;

    &:visited {
        color: darken($brand-color, 15%);
    }

    &:hover {
        color: $text-color;
        text-decoration: underline;
    }
}



/**
 * Blockquotes
 */
blockquote {
    font-size: 18px;
    letter-spacing: -1px;
    font-style: italic;

    margin: 0;
    padding-left: $gutter-sm;
    @include mq(print) { padding-left: $gutter-print; }
}

cite {
  @include mq(print) {
    a[href^=http] {
      &:after {
        content: "(" attr(href) ")";
      }
    }
  }

}

/**
 * Simple table with basic borders
 */
table {
  font-size: $small-font-size;
  margin-bottom: lines(1);
  border: 1px solid #666;
  > thead,
  > tbody,
  > tfoot {
    > tr {
      > th,
      > td {
        border: 1px solid #666;
        padding: 0 .5em;
      }
    }
  }
  > thead > tr {
    > th,
    > td {
      border-bottom-width: 2px;
    }
  }
}

/**
 * Code formatting
 */
pre,
code {
    font-size: 15px;
    border: 1px solid $grey-color-light;
    border-radius: 3px;
    background-color: #eef;
}

code {
    padding: 1px 5px;
}

pre {
    padding: 8px 12px;
    overflow-x: scroll;

    > code {
        border: 0;
        padding-right: 0;
        padding-left: 0;
    }
}


/**
 * Clearfix
 */
%clearfix {

    &:after {
        content: "";
        display: table;
        clear: both;
    }
}



/**
 * Icons
 */
.icon {

    > svg {
        display: inline-block;
        width: 16px;
        height: 16px;
        vertical-align: middle;

        path {
            fill: $grey-color;
        }
    }
}


/**
 * Grid
 */

/*
THE FOLLOWING THREE MIXINS TAKEN FROM TWITTER BOOTSTRAP SASS

The MIT License (MIT)

Copyright (c) 2013 Twitter, Inc

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 */

// Generate the small columns
@mixin make-column($condition, $columns) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter-sm / 2);
  padding-right: ($gutter-sm / 2);
  @include mq(print) {
    padding-left:  ($gutter-print / 2);
    padding-right: ($gutter-print / 2);
  }

  @include mq($condition) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}

@mixin make-column-offset($condition, $columns) {
  @include mq($condition) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
// Creates a wrapper for a series of columns
@mixin make-row {
  margin-left:  ($gutter-sm / -2);
  margin-right: ($gutter-sm / -2);
  @extend %clearfix;

  @include mq(print) {
    margin-left:  ($gutter-print / -2);
    margin-right: ($gutter-print / -2);
  }
}

.container {
  margin: 0 auto;
  padding: 0 ($gutter-sm / 2);
  @extend %clearfix;

  @include mq(sm) { width: $container-sm; }
  @include mq(md) { width: $container-md; }
  @include mq(lg) { width: $container-lg; }
  @include mq(print) { width: 100%; padding: 0 ($gutter-print / 2 - 1px); }
}
