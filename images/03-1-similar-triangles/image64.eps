%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: image64.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Nicole Clark
%%CreationDate: 1/10/11
%%BoundingBox: 0 0 235 138
%%HiResBoundingBox: 0 0 234.7461 137.9961
%%CropBox: 0 0 234.7461 137.9961
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 76 8%%BeginData: 4992 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD3DFFA8527DFD7EFF52527DA8FD79FFA8FFFFFF7DFF7D7D7DFD76%FF52277DFFFFA87DFFA8A87D7DA8FD73FFA87DFD04FF7DA8FFFFFFA8A87D%A8FD71FF7D7DFD04FFA87DFD06FF7D7D7DFD6FFFA87DFD05FF7DA8FD06FF%A87D7DA8A8FD74FF7DFD07FFA8FFA87D7DA8FD72FFA87DFD06FFA8A8FFFF%FF7D7DA8FD2FFFA8A8FD40FF7DA8FD05FF7DFD05FFA8A87D7DA8FD09FFA8%FFA8FD1FFF7D5252A8FD3FFFA87DFD04FFA8A8FD08FFA87D7DA8FD06FF7D%7D7DA8FD1FFF27FFA852FD40FF7DA8FFFFA87DA8FD0AFFA87D7D7DFD04FF%A852527DFD1FFF527D7D7DFD41FF52FD04A8FD0EFFA87DA8A8FFFFA87DFD%20FFA852277DFD41FF7D7DFD13FFA87D7DA8FD68FF7DFD16FF7D7DA8FD20%FF7DFD45FF7D7DFD16FFA8A852A8A8FD1DFF5227A8FD44FF7DFD19FFA87D%7DFD1CFFA8FD047DFD42FFA87DFD1AFFA87D7DA8FD1AFFA8A8FFA87DA8A8%FD40FF7DA8FD1BFFA8A87DA8A8FD0FFF7D7DFD07FF52FFFFFFA87D7DA8FD%0CFFA8FD31FFA87DFD1EFF7D7D7DA8FD0CFF525252FD08FF7DFD05FF7D7D%A8FD09FFA87D7D7D52FD2FFF7DA8FD20FF7D7DA8FD0AFFA87D7DA8FD07FF%7DA8FD05FF7DA87D7DA8FD07FF5252A8527DFD2FFF52FD21FFA8A87DA8A8%FD07FF7D7D27A8FD07FFA87DFD05FFA8FFFFA87D7DA8FD04FFA87D527D52%FD30FFA87DFD23FFA87D7DFD07FF7DA8FD09FF7DA8FD04FF7DFD04FFA87D%7D7DFFFFA8527D2752A8FD30FF7DA8FD24FFA87D7D7DFD10FF7DFFFFFF7D%A8FD07FFA87DA8FD36FFA87DFD26FFA8A87DA87DFD0DFFA852A87DA8FD0A%FFA87D7DA8FD34FF7DA8FD28FF7D27A8FD0DFF7DA8FD0FFF7D7D7DFD33FF%7DFD28FFA87DFD0EFFA87DFD10FFA8A852A8A8FD30FFA87DFD27FF7DFD10%FF7DA8FD12FFA87D7DFD30FF7DFD26FFA8A8FD11FF7DFD14FFA87D7DA8FD%0DFFA8A8A8FD1DFFA87DFD25FF7DA8FD11FFA87DFD15FFA8A87DA8A8FD0A%FF7D527D7DFD1DFF7DFD25FF7DFD13FF7DA8FD17FF7D7D7DA8FD08FF5252%27A8FD1EFF52FD23FF7DA8FD13FFA87DFD1AFF7D7DA8FD06FF7D5252A8FD%1EFFA8A8FD22FF7DFD15FF7DA8FD1AFFA87D7DA8A8FFFFFF7DFFA87DFD1E%FFA87DFD21FFA87DFD16FF7DFD1DFFA87D7DFD25FFA8A8FD20FF7DFD17FF%7D7DFD1EFFA87D7D52FD1CFF7D7DA852A8FFFF52FD1FFF7DA8FD18FF7DFD%20FF7D52FD1CFF277D52A852FFFFFF7DFD1EFFA8A8FD18FFA87DFD1FFF7D%A8FD1BFFA8A87D27A87DA8FFFF7DA8FD1CFFA87DFD1AFF7DFD1EFFA87DFD%1DFF527D7D527DFFFFFFA87DFD1CFF7DA8FD1AFFA87DFD1DFF7DFD1FFFA8%FFA8FD05FF7DA8FD1AFFA87DFD1CFF7DA8FD1BFFA8A8FD28FF7DFD1AFFA8%A8FD1CFFA87DFD1BFF7DA8FD28FFA87DFD19FF7DFD1EFF7DA8FD1AFF7DFD%2AFF7DA8FD17FFA8A8FD1BFFA8FFFFFF52FD19FF7DA8FD2AFFA87DFD17FF%7DA8FD1AFF7D52A8FFFFA87DFD18FF7DFD2CFF7DA8FD16FF7DFD1BFFA87D%FD04FF7DA8FD16FFA87DFD2DFF7DFD15FF7DA8A87DA87D7DFD16FFA8A8FD%04FFA87DFD16FF7DFD2EFFA87DFD14FF7DFFA852527D7DA8FD1CFF7DA8FD%14FFA87DFD2FFF7DA8FD12FFA87DFFFF7DF8A87DA8FD1DFF7DFD14FFA8A8%FD2FFFA87DFD12FF7DFFFF7D5252527DFD1EFFA87DFD13FF7DFD31FF7DA8%FD10FFA87DFFFFA8A8FFA8A8FD1FFF7DA8FD11FFA8A8FD32FF7DFD10FF7D%A8FD26FFA87DFD11FF7DA8FFA8FD30FFA87DFD0FFF7DFD28FF7DFD11FF7D%FF527DFF52A8FD2EFF7DFD0EFF7DA8FD29FF52FD0FFF7DA8A8A8527D27FD%2FFF7D7DFD0DFF7DFD2AFFA87DFD0EFF7DFFFF527D52527DFD2FFF7DFD0C%FFA87DFD2BFF7DA8FD0CFFA87DFF7D2752FF7DA8FD2FFFA87DFD05FFA8FD%05FF7DFD2CFFA8A8FD0CFF7DFD38FF7DA8FFA87D27522752A8FFA8A8FD2D%FF7DFD0BFFA8A8FD38FFA87DA82752A8A8FF52277DA8A8FD2EFF7DFD0AFF%7DA8FD39FFA8277DFD05FF7D2752FD2FFF7D7DFFFFFFA8FD05FF7DFD3AFF%A8F8FD07FF277DFD30FF7DFFFF525227527DFF7DA8FD3BFF7D7DFD06FF7D%FD31FF7DA85252A8FF7D277D7DFD3DFF7DA8FD04FFA87DFD32FF5252FD04%FF7D277DFD3DFFA87DFD04FF7DFD33FF5252FD05FF52FD3FFF7DA8FFFFA8%7DFD34FF7DA8FFFFFFA8A8FD40FF7DFFFFA8A8FD34FFA87DFFFFFF7DA8FD%40FFA87DFF7DFD36FF7DA8FFFF7DFD42FF7D7DA8FD32FFA852A8FFFF52FF%7DA8FD42FF7D27A8FD32FF52A827FFFFA87DA8FD44FF7DFD33FF52527DFF%FFFF5252FD3EFFA8A8A87DFD36FF52FD05FF7DA8FD3EFF7DA8A87DFD35FF%A8A8FD45FF7D7DA852FD7CFFA87D52A8FD7DFFA8FDFCFFFD22FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2011-01-10T11:10:51-05:00</xap:CreateDate>
         <xap:ModifyDate>2011-01-10T11:10:51-05:00</xap:ModifyDate>
         <xap:MetadataDate>2011-01-10T11:10:51-05:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>152</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAmAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FUh8z+d/L/lg236YN2i3bpFA9tYXt4hlkcRxxl7WGZVeR2CorEFj0rirHvPvl&#xA;ufzBZ6Z5s0a61C11HRwLu0to0eCaSIlWljFvdIOEzRghVkQcj8Ljj0VTSw17zLBYwXs1vF5h0m4i&#xA;Sa31PSh6U7ROOSu9nMxDDjQ8opST2jGKp1pHmPRNY9QafdpLNBQXFswaO4hJ6CaCQJLET4OoxVMc&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirHPPOgX2&#xA;uadp1vZFBJa6vpeoS+oSo9GyvoriWlAfi4RniPHFWR4qxjR66D5gm0Jhx0zUjLfaM37KSE87u1Hh&#xA;Rm9aMeDOBsmKpprHlrRNXaOS/tVe5h/3nvIy0NzFXc+lcRFJY/8AYsMVSC6k856BqdnbWk8evaZe&#xA;eokUV+wgu0ljQyCNbmJPTcGNHK+pHWq/FJvXFU1sfOWkzXMdjfCXR9UlJSOw1BRC8jCu0MgLQz7C&#xA;v7mRvfFU9xV2KuxV2KuxV2KuxV2KuxV2KuxV2KvOrT809VnittcbQ408lXuorplvqou63dZbo2UV&#xA;09oYQggkuOKikxYKQ3HwVei4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlXmbRZNW0sxW8gg1&#xA;G2dbrTLpgSIrqLeNmA3KHdJFH2kLL3xVU8v6zHrGlQ3yxmCUlorq1f7cNxExjmhb3SRStRseo2OK&#xA;oW9mW+8xafaW/wAf6Lke7vpBusZe3kgihY/zv65enZV3+0tVU0vbGxv7WS0vreK6tZRSW3nRZI2H&#xA;gyMCpxVIh5V1HTDy8t6pJaxL00u+5XlmemycmW4h6UXhLwX+Q9MVaPnCXTRx8z6fJpKqPi1GMm60&#xA;/wBybhFV4VHdp4419zirIbe4t7mBLi2lSaCUBo5Y2DoynoVYVBGKsL/MD8xX8qXFzF6UDLF5f1XW&#xA;oGnfh6lxpxtxFbjx9T6wa0322xVmVnObizgnI4mWNHKjoCyg0xVWxV2KuxV2KuxV2KuxV5lH+U+j&#xA;X1zFcaL5pvxo1jqP12LQop4LjTEuku1u5Y3jC82AnTkEaSqNWm3w4q9NxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KsK1rRNO07zbHqsySJpuvNHa6g8Ms0AjvQBHbSuYnSqzrSBuVfiEY7nFWX&#xA;WNhZWFuLeygS3gUkiONQoqdyTTqT3PfFVfFXYq7FUgufJemieS70iWbQ76Q85J9PKpHI1akzWzq9&#xA;vKT3Zo+XgwxVLdRj1RDGPNGg2vmKztyTDqNlAsksQYAMzWM/qONtj6EkjN/IMVZDo2u6Jq0LHS7q&#xA;OYQEJNAvwSQsP2JYWCyRMP5XUHFUwxV2KuxV2KuxV2KuxV5lY+R7fyl5rkt9Cv7jR7XXqy2FCJ7U&#xA;XUKlntJYJarwaP8AeRlCj/C4504jFWU/4g8waWeGvaW01uP+lrpKvcR/OS0+K5jJ8EEoHdhiqc6X&#xA;q+l6rai70y7ivLYkr6sDq6hh1U8Tsw7g7jFUXirsVdirsVdirsVdirsVdirsVdirsVdirsVQuraX&#xA;Z6rptzp14nO2uo2ilANGAYfaVhurKd1Ybg74qlvlPVLu4tZ9N1Nw+taRILW/enH1duUNyq9OM8ZD&#xA;7bK3Jf2TiqeYq7FXYq7FXYqleseWNE1eSOe8t6XkIIgv4HeC6iB6iO4iKSqD3Aah74ql/wBW856T&#xA;/vNcR+YbIf7pu+FtfKP8meNRBL4Krxp7ucVROm+cNHvLpLC49XTNVf7Om6gnoTtTr6VSY5wK7tC7&#xA;r74qneKuxV2KsR0z8ytM1LzDNo9rpuoPDBezaZJq4iiazF3bqxkifhK08e6FQ8kSoTsG3FVWXYql&#xA;vmHRk1jSZrL1Tbz1WW0ulFWguImDwzKNq8HUGncbHY4qs8s60+raWs1xGLfUbd2ttTtASfRuotpU&#xA;BNCVP2kb9pCrdDiqS+Y/LGlXXmrSryISWeq3CzwzXtlI1vOYY0Eiu7IR6ixyKqhZAy/FuMVRRk86&#xA;6QPjRPMtko+1H6dpqIA8UYpazMfEGEf5OKo/SvNWiancNaQTmHUUHKXTbpHt7pR/MYZQjlfB1BU9&#xA;icVeb/nPJFFrulXNo9yut2kunzQRKLlRLbLfAzpZSRk26TFR+/MqMPSpWg3xVb+Rup6Lqer6ze6N&#xA;ezLp5ggt4NNu5Zpryb0HkD6neGX4UmuS9OKfsgct6Kqr2DFXYq7FXYq7FXYq7FXYq7FXYq7FWM+a&#xA;VfSb2381wA+nZp9X1tBX49PZuRloOrWjn1R1+AyAbtirJVZWUMpDKwqCNwQcVbxV2KuxV2KuxV2K&#xA;obUdM07UrR7PUbWK8tJPtwTosiH5qwIxVJD5a1jTfi8u6q8cQ6aXqRe8tqeEcrN9Zir0H7xkXsmK&#xA;t/4yFgeHmWxk0Ug0N6T9Y08+/wBbQD0197hIvbFWQwzQzRJNC6yxSANHIhDKyncEEbEHFXnUf5X6&#xA;ufPUHmGW9sAltey3g1CC0aDVZoJA4SxuLiORYpYY/UC1aMkqo7/Fir0fFXYqw/zNFqei67b63ptx&#xA;Fa2WpvFY6368LzxrITwtLrgkkNDyb0ZG5dChOyYqn2naO1vdSX95cNe6jKnpGZlCJHHXl6cMYrwU&#xA;ndqksdqk0FFUyxVA6toekaxbi31O0iu4lPKP1FBZHHR42+0jDsykEYqlP6F8zaUK6Lqf1+2Xppur&#xA;s0hAH7Md8oadfnMsx+WKrofOtjDIlvr1vLoF27BE+u8fq0jHoIrtC1uxb9lS6v8A5AxVkQIIqNwc&#xA;VdirsVdirsVdirsVdirsVdirsVadFdSjgMjAhlIqCD1BGKsa8rM2k3tx5UnJ9OzT6xojtX49PZuI&#xA;iBPVrRz6R/yDGTu2KsmxV2KuxV2KuxV2KuxV2KuIBFDuDirzrzv5RRH0/T/KV1N5e1XV7smY2Ekk&#xA;MHoRq0txNJbxssdahRzVQzMVUniTir0KFHjhjSSQzOihWlYKGcgULEKFWp67CmKr8VdiqhfWNpf2&#xA;VxY3kYmtLqN4biFujxyKVZTTxBxVJvKV9drHc6DqUpl1XRisbzt9q4tXB+q3R95FUq//ABYj02pi&#xA;rIMVdirsVWyxRTRPFKiyROCrxuAysDsQQdiMVY7/AIMWwPPyzfSaKa1+ogfWNPPU0+qOQI13r/o7&#xA;xe+KuHmXWNMPDzFpTpCOuqaaHu7bam8kSr9Zir1P7tkUdXxVO9O1PTtStEvNOuory0k+xPA6yIfk&#xA;ykjFUTirEvzH89/4OsdKufSs3/SeoLp/rale/o60h5W88/qS3Ho3NB/o/EDh1bFVf8v/ADk3mzR7&#xA;jUGtorf6vdy2gktbj65aTiIKfWtbn04fViblQNwG4I7YqybFXYq7FXYq7FXYqkfmzTLy4tYNS0xe&#xA;Ws6RIbqxSvETCnGa2Zj+zPGSu+ytxf8AZGKplpWp2eqadbajZP6lrdRiSJiKGh7Mp3VlOzKdwdji&#xA;qKxV2KuxV2KuxV2KuxV2Ksa0HjqvmPVNeNGgtS2j6Y1P2YHreSKf8u5X02/4wjFWS4q7FXYq7FWN&#xA;+bYJrGS280WaM9zpIYX0MYq0+nyEG4jAH2nj4iaPvVeI+2cVZDBPDcQRzwSLLBMokilQhlZGFVZS&#xA;NiCMVX4q7FXYq7FXYqkmo+T9Hu7ttQt/V0zVn+1qVg/oTNTp6ooYpwOyzI6+2KoZrrznpH+9Nsnm&#xA;GyX/AHfacLa+Uf5UEjCCXxLJIn+ShxVLdR1PyP5r1jQrCbUPT1TTL06lb6VPG0E7yR20sBSaC4RX&#xA;UcLouBQFqVFQDiqdeVPKdl5Yt7yy06aT9G3F1Jd2ti/H07T1vikht6AcYvU5OF/ZLGm2Kp5irsVd&#xA;irsVdiqH1HUrDTLGe/1C4jtbK2QyXFxKwREQdWZjsBiqSp+YvkR3sUXXrEvqUhhsF9ZAZnDBOKAn&#xA;f42C/M064qpWn+4DzQ2nk8dJ195Liw/livwDJcwDwE6gzqP5hL4jFWT4q7FXYq7FXYq7FXYqlHmz&#xA;VbnTNDnmsgG1Kcpa6ajCoN1csIoeQ/lV3DP4KCcVRejaVb6TpNpplsWaG0iWJXc1d+IoXc92Y/Ex&#xA;7nFUZirsVdirsVdirGPLv+4PWJ/K7/DZOr3ugHan1csPXtR/zDyOCo/326gfZOKsnxV2KuxV2Kux&#xA;V2KuxViOh6Vp2seatQ82z26SSWznS9HmYAkRWpZbiYf5T3DyR1/kQU+0cVZdirsVdirsVdirsVY7&#xA;+Yej3Os+T9Q062tnvZZvSItIrgWkkixzJI6pOQQjFVNK7E7EjqFXl0XkP8yGfWIrixmubbzFFZWW&#xA;n3F3fRT3mk2tnfz3IF1M7SvMeFxyBjaU8lCkkfFir2LzDoyaxpM1iZDBMeMtpdKKtBcRMJIZlHcx&#xA;yKGp0PQ7HFVPyzrMmraWstxGsGo27ta6naqSRFdRbSKK7lD9uMn7SFW74qmuKuxV2KuxV2KuxVjb&#xA;/wC5bzsibNZeW4vVbuDqN4hVB7NDasxPtMvhirJMVdirsVdirsVdiqTeatHudR09JbAqmsadILzS&#xA;pW2UTxgj02O9EmRmikp+yxpviqL0PV7fWNKt9Rt1ZEnU84X2eKRCUlicDo8cisjDxBxVHYq7FXYq&#xA;7FXYqk3m7VbnT9FkNkVGqXjpZaYG3H1m5YRxsR3WOvqP/kqcVR2kaXa6VpVnplqCLayhSCLkeTFY&#xA;1CgsT1Y0qT3OKovFXYq7FXYq7FXYq7FXYq7FWMav/uB8ww66vw6ZqZisdaHQJKTwtLs/Jm9GQ+DI&#xA;TsmKsnxV2KuxV2KuxVC6rqVrpemXWpXZK21nE88xAqeEaljQdztsMVS/yhpt3Y6KjX4pql8732pb&#xA;g0uLg82jBHVYRSJf8lRiqdYq7FXYq7FXYqgdfs5r3QtRs4ADPc2s0MQJoOckbKtT8ziqC8leWrHy&#xA;15W03RrO1js47WBFlhh+z6xUGVq/tFnqS3friqDP+4DzWD9nSPMb0NOkOpqmx8At1En/ACMXu0mK&#xA;snxV2KuxV2KuxVjY/wBy3nYnrZeW4qf5J1C8jqfcNBaN90/tirJMVdirsVdirsVdirsVdirsVdiq&#xA;hfWNpf2VxY3kYmtLqN4biFujxyKVZTTxBxVJvKV9dKlzoOpSmbVNGKRtO/27i1kr9VujsKmRVKyb&#xA;f3iPTamKsgxV2KuxV2Ksa8yU1TWtK8uijQlxqmpiv/HvZuphjNP9+3PA77MqOMVYRq35o+eNN86f&#xA;4RuLTT4r/U3RdIneG7EEIkuOI5O7J9e425DuYfTVHpGxqa4qz/yTrl/rfl6O81GKOHUIri8sbxIO&#xA;XpGawu5bORo+RLcHeAsoJqAcVT3FXYq7FXYq7FXYqgdc0e11jSrjTbkssdwo4yoaSRyKQ8csbfsv&#xA;HIquh7MAcVQnlXV7rUNPeHUAqazp0htNUjQFV9ZACJEB6RzRssqbmitTqDiqc4q7FXYqhNY1S10n&#xA;SrvU7skW9lC88oXdiEUtxUd2NKAdziqC8paXdafokS3wH6Tume81MqeQ+tXLGWVVY7lIy3BP8lRi&#xA;qcYq7FXYq7FXYq7FXYq7FXYq7FXYqxzzbBcWUlt5mskaS50kML2CMcmn0+Qg3EYUfaePiJY+9V4j&#xA;7ZxVkFvcQXEEdxBIssEyLJFKhqrIwqrAjqCDiq/FXYq7FWN+TD+kFvvMz1P6akBsSe2n29UtOP8A&#xA;kygvcD/jLTFUBP8AlF5KmmkmeG6E3J3s5VvLoNZNLOt1IbIiT/R+U6Bzw/1fs/DirJNC0PTdC0qD&#xA;S9NjMVnb8iis7SOWkcySO7uWd3d3ZmZjUk1xVH4q7FXYq7FXYq7FXYqxjzH/ALhNVg80xjjZlVs9&#xA;fA6fVSxMN03/ADCyMeR7Ru5P2RirJ8VdirsVY35hrqev6ToK728TDVtUp09O1cG1jPgZLri48Vic&#xA;Yq8o1/Urmf8AMrUR5MtrhPM9nLcRevdCUNqE81v6TIjShLYWlhHWVFeRfUlUBepZlXoP5LQ6lbeR&#xA;zZX9td20tpqerQxm/kSa4kjGpTsru6MwY/FxJ/aI5D4SpKrOsVdirsVdirsVdirsVdirsVdirsVY&#xA;x5d/3B6xP5Yf4bKRXvtAOwAtyw9e1H/MPI4K/wDFbqo+ycVZMzKilmIVRuWOwAxVZBc286loJUlU&#xA;GhZGDCv0YqkXnaeaTTodEtnKXmvTCwV1JVkgZS91KpG4KW6PxP8APxHfFU+ghighjghQRwxKEjjU&#xA;UCqooAB4AYqvxV2KuxV2KuxV2KuxV2KuxVZPDDPDJBMiywyqUljcAqysKMpB6gjFWPeUppbCS58r&#xA;Xblp9KVW0+ZzyafTnJEDkndni4mGQ9SVDH7YxVkUksUa8pHVFJoCxAFfpxVcSAKnYDFWN+S/9Ohv&#xA;PMr7trsolsz1pYRDhZgezpWenZpGxVkmKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpD51sjLokmoQS&#xA;LBqGjE6jYXD7KskCMWVyASI5Yi8UlN+LGm+KvNvLGhah+bUR80+Zbu4t/LUsrppOgwPwUrE5RmmI&#xA;6kOCpP2qg7gUGKprrH5H6dYQnUPI93caLrtsOVuRO7RSkb8JOZY/F8+PiDiqYflfrOr+bWfzLrFq&#xA;1pPp8TaRDAyMgM6uHvZ05fsuyRR0/ZaNhir0LFXYq7FXYq7FXYq7FXYq7FXYq7FWJ/mPNJpOinzZ&#xA;aAHUPL4adENQJ7d6LPasQDtKACvhIqHtirCfKX5ZweeNIt/NvnW9uNRu9XjFxaW0cpjggglFYggX&#xA;pVaNTp41NTiqHuPLXmryp5gt/Jmk3Nxf+VPNStboZW5SWMa0N2Vf9n/R+QQinxMO43Ve0RRxxRpF&#xA;GoSOMBURRQBQKAAe2KrsVdirsVdirsVdirsVdirsVdirsVdirsVaZVdSjgMrCjKdwQeoIxVi0MEH&#xA;ljzKkUEawaFr78VjjULHb6kibUA2VLmJPl6ifzSYqm3mfV30jQ7m9hQS3YCw2MDGglup2EVvET2D&#xA;yuqk9uuKqnl/R49G0W001JDMbdKTXDfalmYl5Zm/ypZGZ29ziqYYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yqll35m8tWd+um3mrWVvqEnEJZTXESTNz2WkbMGPLttviqVaSBoHmKXQz8Ol6q0t7ox/ZjnrzvLU&#xA;eAJPrxj3kAoqDFVTR6ar5p1LWT8VtpobSNOPUFlZZL6Rf9aVUiPvEcVZJirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdiqB1zSLbWNKuNNuSyRzqOMqUEkUiEPFLGTWjxSKroezAHFWF+XfMX+KvMlrp&#xA;d48ZvvKYll1mJNkk1EM9pE8QqaxBBLLSp4F4waOuKvQsVdirsVdirsVdirsVdirsVdirsVdirynX&#xA;fyz1XzR5182Je3TWHlvVLXT7ebjbQyy3IRJBIIZ5eXolK0JCV3qCCK4qzfzxo2pap5cnh0h0i1m3&#xA;aO50ueQ09O4hcMpB33ZeS77EGjVUnFVbybpV7pXlfTdPvzG1/BAou3iJKvMfikck9WdyWY9yTiqc&#xA;4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUq826jdaZ5V1nUrSgu7Kxubm3LDkPUihZ0qO/xLiqQ&#xA;6T5q1W682eXtMkZDbaj5dn1W8UKA31lJrNEIP7KkXEm39MVZPZ6NpNleXd7aWkUF3fsr3k6KFeVl&#xA;FAXI64qjMVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVWyxRSxPFKiyRSKVkjYBlZWFCCDsQRiqReW/IflPy3PJPounrazSxrAZDJLKVhQ1WKMyu/pxg&#xA;/sJRfbFU/wAVdirsVdirsVdirsVf/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:E29EFD783C1EE011A1FA945D255D64F0</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:E39EFD783C1EE011A1FA945D255D64F0</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>92.000000</stDim:w>
            <stDim:h>36.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -137.996 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 137.996 li
234.746 137.996 li
234.746 0 li
cp
clp
[1 0 0 1 0 0 ]ct
2.24994 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
192.016 108.323 mo
190.723 105.467 187.855 103.497 184.498 103.497 cv
180.74 103.497 177.598 105.962 176.588 109.375 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0.703842 cmyk
@
0.749982 lw
127.67 22.7988 mo
128.434 23.0908 129.26 23.249 130.123 23.249 cv
134.082 23.249 137.248 19.916 137.248 15.7495 cv
137.248 13.8228 136.57 12.0742 135.451 10.751 cv
@
2.24994 lw
63.1987 114.983 mo
62.2085 112.626 59.9839 110.997 57.374 110.997 cv
54.3101 110.997 51.7759 113.243 51.1484 116.277 cv
@
0.749982 lw
11.3901 46.8726 mo
12.0454 47.1162 12.7559 47.2485 13.4995 47.2485 cv
16.833 47.2485 19.4995 44.582 19.4995 41.249 cv
19.4995 39.7793 18.981 38.439 18.1157 37.3999 cv
@
1.5 29.999 mo
84.7485 65.998 li
0 0 0 0.944778 cmyk
@
84.7485 65.998 mo
58.499 128.247 li
@
1.5 29.999 mo
58.499 128.247 li
@
114.748 1.5 mo
218.996 46.499 li
@
218.996 46.499 mo
185.998 124.497 li
@
114.748 1.5 mo
185.998 124.497 li
@
gsave
171.748 13.4995 mo
185.248 13.4995 li
185.248 26.999 li
171.748 26.999 li
171.748 13.4995 li
171.748 13.4995 li
cp
eclp
175.391 22.5498 mo
175.391 21.8643 li
175.027 22.3916 174.535 22.6553 173.91 22.6553 cv
173.635 22.6553 173.379 22.6025 173.139 22.4971 cv
172.9 22.3916 172.723 22.2593 172.607 22.0996 cv
172.492 21.9399 172.41 21.7441 172.363 21.5127 cv
172.332 21.3574 172.314 21.1113 172.314 20.7744 cv
172.314 17.8828 li
173.105 17.8828 li
173.105 20.4712 li
173.105 20.8843 173.123 21.1626 173.154 21.3062 cv
173.205 21.5142 173.311 21.6777 173.471 21.7964 cv
173.633 21.915 173.832 21.9741 174.068 21.9741 cv
174.307 21.9741 174.529 21.9136 174.736 21.792 cv
174.945 21.6704 175.092 21.5049 175.178 21.2954 cv
175.266 21.0859 175.309 20.7817 175.309 20.3833 cv
175.309 17.8828 li
176.1 17.8828 li
176.1 22.5498 li
175.391 22.5498 li
cp
0 0 0 1 cmyk
f
grestore
gsave
205.496 80.998 mo
223.496 80.998 li
223.496 94.498 li
205.496 94.498 li
205.496 80.998 li
205.496 80.998 li
cp
eclp
205.867 88.3496 mo
206.658 88.2441 li
206.75 88.6914 206.904 89.0156 207.123 89.2129 cv
207.34 89.4102 207.605 89.5098 207.92 89.5098 cv
208.291 89.5098 208.605 89.3809 208.863 89.123 cv
209.119 88.8652 209.246 88.5449 209.246 88.1641 cv
209.246 87.8008 209.129 87.502 208.891 87.2656 cv
208.654 87.0303 208.352 86.9121 207.986 86.9121 cv
207.836 86.9121 207.65 86.9414 207.428 87 cv
207.516 86.3057 li
207.568 86.3115 207.611 86.3145 207.643 86.3145 cv
207.98 86.3145 208.283 86.2266 208.553 86.0508 cv
208.822 85.875 208.957 85.6035 208.957 85.2383 cv
208.957 84.9473 208.859 84.707 208.662 84.5176 cv
208.467 84.3262 208.213 84.2314 207.902 84.2314 cv
207.594 84.2314 207.338 84.3281 207.133 84.5215 cv
206.928 84.7148 206.797 85.0049 206.738 85.3916 cv
205.947 85.251 li
206.043 84.7207 206.264 84.3105 206.605 84.0186 cv
206.949 83.7266 207.375 83.5811 207.885 83.5811 cv
208.236 83.5811 208.561 83.6563 208.855 83.8076 cv
209.152 83.959 209.379 84.1641 209.535 84.4248 cv
209.691 84.6855 209.77 84.9629 209.77 85.2559 cv
209.77 85.5332 209.695 85.7871 209.545 86.0156 cv
209.396 86.2441 209.176 86.4258 208.883 86.5605 cv
209.264 86.6484 209.559 86.8311 209.77 87.1074 cv
209.98 87.3848 210.086 87.7305 210.086 88.1465 cv
210.086 88.709 209.881 89.1865 209.471 89.5781 cv
209.061 89.9688 208.543 90.1641 207.916 90.1641 cv
207.35 90.1641 206.881 89.9961 206.508 89.6582 cv
206.133 89.3223 205.92 88.8848 205.867 88.3496 cv
cp
0 0 0 1 cmyk
f
211.178 86.873 mo
211.178 87.9297 211.301 88.6348 211.549 88.9844 cv
211.797 89.334 212.102 89.5098 212.465 89.5098 cv
212.828 89.5098 213.133 89.334 213.381 88.9824 cv
213.629 88.6309 213.752 87.9277 213.752 86.873 cv
213.752 85.8125 213.629 85.1074 213.381 84.7588 cv
213.133 84.4102 212.824 84.2363 212.455 84.2363 cv
212.092 84.2363 211.803 84.3896 211.586 84.6973 cv
211.313 85.0898 211.178 85.8145 211.178 86.873 cv
cp
210.363 86.873 mo
210.363 86.1113 210.443 85.498 210.6 85.0332 cv
210.756 84.5693 210.988 84.2109 211.299 83.959 cv
211.607 83.707 211.996 83.5811 212.465 83.5811 cv
212.811 83.5811 213.113 83.6504 213.375 83.79 cv
213.635 83.9297 213.85 84.1299 214.02 84.3926 cv
214.189 84.6543 214.324 84.9736 214.42 85.3496 cv
214.518 85.7266 214.564 86.2344 214.564 86.873 cv
214.564 87.6289 214.488 88.2383 214.332 88.7031 cv
214.178 89.168 213.945 89.5264 213.637 89.7793 cv
213.326 90.0332 212.936 90.1602 212.465 90.1602 cv
211.844 90.1602 211.355 89.9375 211.002 89.4922 cv
210.576 88.9551 210.363 88.082 210.363 86.873 cv
cp
f
grestore
gsave
137.248 62.248 mo
155.248 62.248 li
155.248 75.748 li
137.248 75.748 li
137.248 62.248 li
137.248 62.248 li
cp
eclp
137.617 69.6123 mo
138.447 69.542 li
138.51 69.9463 138.652 70.25 138.877 70.4541 cv
139.1 70.6582 139.371 70.7598 139.688 70.7598 cv
140.068 70.7598 140.391 70.6152 140.654 70.3281 cv
140.918 70.041 141.049 69.6602 141.049 69.1855 cv
141.049 68.7349 140.922 68.3789 140.67 68.1182 cv
140.416 67.8574 140.084 67.7271 139.674 67.7271 cv
139.418 67.7271 139.189 67.7852 138.984 67.9009 cv
138.779 68.0166 138.617 68.1665 138.5 68.3511 cv
137.758 68.2544 li
138.381 64.9453 li
141.586 64.9453 li
141.586 65.7012 li
139.014 65.7012 li
138.668 67.4326 li
139.055 67.1631 139.459 67.0283 139.885 67.0283 cv
140.447 67.0283 140.922 67.2231 141.309 67.6128 cv
141.695 68.0024 141.889 68.5034 141.889 69.1152 cv
141.889 69.6992 141.719 70.2031 141.379 70.627 cv
140.965 71.1484 140.402 71.4102 139.688 71.4102 cv
139.102 71.4102 138.623 71.2461 138.252 70.918 cv
137.881 70.5898 137.67 70.1543 137.617 69.6123 cv
cp
0 0 0 1 cmyk
f
142.932 68.1226 mo
142.932 69.1797 143.055 69.8848 143.303 70.2344 cv
143.551 70.584 143.855 70.7598 144.219 70.7598 cv
144.582 70.7598 144.887 70.584 145.135 70.2324 cv
145.383 69.8809 145.506 69.1777 145.506 68.1226 cv
145.506 67.062 145.383 66.3574 145.135 66.0088 cv
144.887 65.6602 144.578 65.4858 144.209 65.4858 cv
143.846 65.4858 143.557 65.6396 143.34 65.9473 cv
143.066 66.3398 142.932 67.0649 142.932 68.1226 cv
cp
142.117 68.1226 mo
142.117 67.3608 142.197 66.748 142.354 66.2837 cv
142.51 65.8193 142.742 65.4609 143.053 65.209 cv
143.361 64.957 143.75 64.8311 144.219 64.8311 cv
144.564 64.8311 144.867 64.9009 145.129 65.04 cv
145.389 65.1792 145.604 65.3799 145.773 65.6421 cv
145.943 65.9043 146.078 66.2236 146.174 66.6001 cv
146.271 66.9766 146.318 67.4839 146.318 68.1226 cv
146.318 68.8784 146.242 69.4883 146.086 69.9531 cv
145.932 70.418 145.699 70.7764 145.391 71.0293 cv
145.08 71.2832 144.689 71.4102 144.219 71.4102 cv
143.598 71.4102 143.109 71.1875 142.756 70.7422 cv
142.33 70.2051 142.117 69.332 142.117 68.1226 cv
cp
f
grestore
gsave
20.9995 76.498 mo
32.2495 76.498 li
32.2495 89.998 li
20.9995 89.998 li
20.9995 76.498 li
20.9995 76.498 li
cp
eclp
21.5781 85.5498 mo
21.5781 80.8828 li
22.29 80.8828 li
22.29 81.5898 li
22.4717 81.2598 22.6392 81.041 22.793 80.9355 cv
22.9468 80.8301 23.1162 80.7773 23.3008 80.7773 cv
23.5674 80.7773 23.8384 80.8623 24.1138 81.0322 cv
23.8413 81.7656 li
23.6479 81.6523 23.4546 81.5947 23.2612 81.5947 cv
23.0884 81.5947 22.9331 81.6465 22.7954 81.751 cv
22.6577 81.8555 22.5596 81.999 22.501 82.1836 cv
22.4131 82.4648 22.3691 82.7725 22.3691 83.1064 cv
22.3691 85.5498 li
21.5781 85.5498 li
cp
0 0 0 1 cmyk
f
grestore
gsave
74.2485 92.998 mo
92.2485 92.998 li
92.2485 106.497 li
74.2485 106.497 li
74.2485 92.998 li
74.2485 92.998 li
cp
eclp
78.7744 101.29 mo
78.7744 102.05 li
74.5161 102.05 li
74.5103 101.859 74.541 101.677 74.6084 101.501 cv
74.7168 101.211 74.8901 100.925 75.1289 100.644 cv
75.3677 100.362 75.7129 100.037 76.1641 99.668 cv
76.8643 99.0938 77.3374 98.6387 77.5835 98.3037 cv
77.8296 97.9688 77.9526 97.6504 77.9526 97.3516 cv
77.9526 97.0391 77.8403 96.7744 77.6162 96.5586 cv
77.3921 96.3438 77.1001 96.2363 76.7397 96.2363 cv
76.3589 96.2363 76.0542 96.3496 75.8257 96.5781 cv
75.5972 96.8066 75.4814 97.123 75.4785 97.5273 cv
74.6655 97.4443 li
74.7212 96.8379 74.9307 96.376 75.2939 96.0586 cv
75.6572 95.7402 76.145 95.5811 76.7573 95.5811 cv
77.3755 95.5811 77.8647 95.752 78.2251 96.0957 cv
78.5854 96.4375 78.7656 96.8633 78.7656 97.3691 cv
78.7656 97.627 78.7129 97.8809 78.6074 98.1299 cv
78.502 98.3789 78.3267 98.6406 78.082 98.916 cv
77.8374 99.1914 77.4312 99.5703 76.8628 100.051 cv
76.3882 100.449 76.0835 100.719 75.9487 100.861 cv
75.814 101.003 75.7026 101.146 75.6147 101.29 cv
78.7744 101.29 li
cp
0 0 0 1 cmyk
f
81.6543 99.7822 mo
81.6543 96.877 li
79.6372 99.7822 li
81.6543 99.7822 li
cp
81.6543 102.05 mo
81.6543 100.508 li
78.8594 100.508 li
78.8594 99.7822 li
81.7993 95.6074 li
82.4453 95.6074 li
82.4453 99.7822 li
83.3154 99.7822 li
83.3154 100.508 li
82.4453 100.508 li
82.4453 102.05 li
81.6543 102.05 li
cp
f
grestore
gsave
38.9995 34.499 mo
56.999 34.499 li
56.999 47.9985 li
38.9995 47.9985 li
38.9995 34.499 li
38.9995 34.499 li
cp
eclp
39.3677 41.8569 mo
40.1587 41.7515 li
40.2495 42.1997 40.4038 42.5229 40.6221 42.7207 cv
40.8403 42.9185 41.1064 43.0171 41.4199 43.0171 cv
41.792 43.0171 42.106 42.8882 42.3623 42.6304 cv
42.6187 42.3726 42.7471 42.0532 42.7471 41.6724 cv
42.7471 41.3091 42.6284 41.0098 42.3911 40.7739 cv
42.1538 40.5381 41.8521 40.4199 41.4858 40.4199 cv
41.3364 40.4199 41.1504 40.4492 40.9277 40.5078 cv
41.0156 39.8135 li
41.0684 39.8193 41.1108 39.8223 41.1431 39.8223 cv
41.48 39.8223 41.7832 39.7344 42.0527 39.5586 cv
42.3223 39.3828 42.457 39.1118 42.457 38.7456 cv
42.457 38.4556 42.3589 38.2153 42.1626 38.0249 cv
41.9663 37.8345 41.7129 37.7393 41.4023 37.7393 cv
41.0947 37.7393 40.8384 37.8359 40.6333 38.0293 cv
40.4282 38.2227 40.2964 38.5127 40.2378 38.8994 cv
39.4468 38.7588 li
39.5435 38.2285 39.7632 37.8179 40.106 37.5264 cv
40.4487 37.2349 40.875 37.0889 41.3848 37.0889 cv
41.7363 37.0889 42.0601 37.1646 42.356 37.3154 cv
42.6519 37.4663 42.8779 37.6719 43.0347 37.9326 cv
43.1914 38.1934 43.27 38.4702 43.27 38.7632 cv
43.27 39.0415 43.1953 39.2949 43.0459 39.5234 cv
42.8965 39.752 42.6753 39.9336 42.3823 40.0684 cv
42.7632 40.1563 43.0591 40.3389 43.27 40.6157 cv
43.481 40.8926 43.5864 41.2388 43.5864 41.6548 cv
43.5864 42.2173 43.3813 42.6943 42.9712 43.0854 cv
42.561 43.4766 42.0425 43.6719 41.4155 43.6719 cv
40.8501 43.6719 40.3804 43.5034 40.0068 43.1665 cv
39.6333 42.8296 39.4204 42.3931 39.3677 41.8569 cv
cp
0 0 0 1 cmyk
f
48.022 42.7974 mo
48.022 43.5576 li
43.7637 43.5576 li
43.7578 43.3672 43.7886 43.1841 43.856 43.0083 cv
43.9644 42.7183 44.1377 42.4326 44.3765 42.1514 cv
44.6152 41.8701 44.9604 41.5449 45.4116 41.1758 cv
46.1118 40.6016 46.585 40.147 46.8311 39.8115 cv
47.0771 39.4761 47.2002 39.1587 47.2002 38.8599 cv
47.2002 38.5464 47.0879 38.2822 46.8638 38.0669 cv
46.6396 37.8516 46.3477 37.7437 45.9873 37.7437 cv
45.6064 37.7437 45.3018 37.8579 45.0732 38.0864 cv
44.8447 38.3149 44.729 38.6313 44.7261 39.0356 cv
43.9131 38.9521 li
43.9688 38.3457 44.1782 37.8838 44.5415 37.5659 cv
44.9048 37.248 45.3926 37.0889 46.0049 37.0889 cv
46.623 37.0889 47.1123 37.2603 47.4727 37.603 cv
47.833 37.9458 48.0132 38.3706 48.0132 38.8774 cv
48.0132 39.1353 47.9604 39.3887 47.855 39.6377 cv
47.7495 39.8867 47.5742 40.1489 47.3296 40.4243 cv
47.085 40.6997 46.6787 41.0776 46.1104 41.5581 cv
45.6357 41.9565 45.3311 42.2271 45.1963 42.3691 cv
45.0615 42.5112 44.9502 42.6538 44.8623 42.7974 cv
48.022 42.7974 li
cp
f
grestore
gsave
174.748 124.497 mo
189.748 124.497 li
189.748 137.996 li
174.748 137.996 li
174.748 124.497 li
174.748 124.497 li
cp
eclp
179.666 127.1 mo
180.518 127.1 li
180.518 130.822 li
180.518 131.47 180.445 131.983 180.299 132.364 cv
180.152 132.745 179.887 133.055 179.506 133.294 cv
179.123 133.532 178.621 133.651 178 133.651 cv
177.396 133.651 176.902 133.548 176.52 133.34 cv
176.135 133.132 175.861 132.831 175.697 132.437 cv
175.533 132.043 175.451 131.505 175.451 130.822 cv
175.451 127.1 li
176.303 127.1 li
176.303 130.817 li
176.303 131.377 176.355 131.789 176.459 132.055 cv
176.564 132.319 176.742 132.524 176.996 132.668 cv
177.25 132.812 177.559 132.883 177.926 132.883 cv
178.553 132.883 178.998 132.741 179.266 132.457 cv
179.531 132.173 179.666 131.626 179.666 130.817 cv
179.666 127.1 li
cp
0 0 0 1 cmyk
f
grestore
gsave
105.749 3 mo
119.248 3 li
119.248 16.4995 li
105.749 16.4995 li
105.749 3 li
105.749 3 li
cp
eclp
108.077 12.0498 mo
108.077 6.36768 li
105.955 6.36768 li
105.955 5.60742 li
111.061 5.60742 li
111.061 6.36768 li
108.93 6.36768 li
108.93 12.0498 li
108.077 12.0498 li
cp
0 0 0 1 cmyk
f
grestore
gsave
220.496 31.499 mo
234.746 31.499 li
234.746 44.999 li
220.496 44.999 li
220.496 31.499 li
220.496 31.499 li
cp
eclp
220.895 38.48 mo
221.697 38.4097 li
221.736 38.7319 221.824 38.9966 221.965 39.2031 cv
222.104 39.4097 222.318 39.5767 222.611 39.7041 cv
222.904 39.8315 223.234 39.895 223.602 39.895 cv
223.926 39.895 224.213 39.8467 224.463 39.75 cv
224.711 39.6533 224.896 39.521 225.018 39.3525 cv
225.141 39.1841 225.201 39 225.201 38.8008 cv
225.201 38.5986 225.143 38.4224 225.025 38.2715 cv
224.908 38.1206 224.715 37.9937 224.445 37.8911 cv
224.271 37.8237 223.889 37.7192 223.297 37.5771 cv
222.705 37.4351 222.291 37.3008 222.055 37.1748 cv
221.746 37.0137 221.518 36.814 221.367 36.5752 cv
221.215 36.3364 221.141 36.0688 221.141 35.7729 cv
221.141 35.4478 221.232 35.144 221.416 34.8613 cv
221.602 34.5786 221.871 34.3638 222.225 34.2173 cv
222.58 34.0708 222.975 33.9976 223.408 33.9976 cv
223.885 33.9976 224.307 34.0747 224.672 34.2285 cv
225.035 34.3823 225.316 34.6084 225.512 34.9072 cv
225.709 35.2061 225.814 35.5444 225.828 35.9224 cv
225.012 35.9839 li
224.967 35.5767 224.818 35.269 224.566 35.061 cv
224.313 34.853 223.938 34.749 223.443 34.749 cv
222.928 34.749 222.551 34.8438 222.316 35.0327 cv
222.08 35.2217 221.961 35.4492 221.961 35.7158 cv
221.961 35.9473 222.045 36.1377 222.213 36.2871 cv
222.377 36.4365 222.805 36.5898 223.498 36.7466 cv
224.191 36.9033 224.666 37.04 224.924 37.1572 cv
225.299 37.3301 225.576 37.5493 225.754 37.8145 cv
225.934 38.0796 226.021 38.3848 226.021 38.7305 cv
226.021 39.0732 225.924 39.3965 225.729 39.6997 cv
225.531 40.0029 225.25 40.2388 224.883 40.4072 cv
224.514 40.5752 224.1 40.6597 223.641 40.6597 cv
223.057 40.6597 222.568 40.5747 222.176 40.4048 cv
221.781 40.2349 221.473 39.9795 221.248 39.6382 cv
221.023 39.2969 220.906 38.9106 220.895 38.48 cv
cp
0 0 0 1 cmyk
f
grestore
gsave
84.7485 52.4985 mo
99.7485 52.4985 li
99.7485 65.998 li
84.7485 65.998 li
84.7485 52.4985 li
84.7485 52.4985 li
cp
eclp
86.3037 57.9507 mo
88.1362 57.9507 li
88.5259 57.9507 88.8306 57.9106 89.0503 57.8301 cv
89.27 57.7495 89.437 57.6206 89.5513 57.4434 cv
89.6655 57.2661 89.7227 57.0732 89.7227 56.8652 cv
89.7227 56.5605 89.6118 56.3101 89.3906 56.1138 cv
89.1694 55.9175 88.8203 55.8193 88.3428 55.8193 cv
86.3037 55.8193 li
86.3037 57.9507 li
cp
85.4512 61.5498 mo
85.4512 55.1074 li
88.3076 55.1074 li
88.8818 55.1074 89.3184 55.1655 89.6172 55.2813 cv
89.916 55.397 90.1548 55.6011 90.3335 55.894 cv
90.5122 56.187 90.6016 56.5107 90.6016 56.8652 cv
90.6016 57.3223 90.4536 57.7075 90.1577 58.021 cv
89.8618 58.3345 89.4048 58.5337 88.7866 58.6187 cv
89.0122 58.7271 89.1836 58.834 89.3008 58.9395 cv
89.5498 59.168 89.7856 59.4536 90.0083 59.7964 cv
91.1289 61.5498 li
90.0566 61.5498 li
89.2041 60.2095 li
88.9551 59.8228 88.75 59.5269 88.5889 59.3218 cv
88.4277 59.1167 88.2832 58.9731 88.1558 58.8911 cv
88.0283 58.8091 87.8989 58.752 87.7671 58.7197 cv
87.6704 58.6992 87.5122 58.689 87.2925 58.689 cv
86.3037 58.689 li
86.3037 61.5498 li
85.4512 61.5498 li
cp
0 0 0 1 cmyk
f
grestore
gsave
0 15.7495 mo
14.9995 15.7495 li
14.9995 29.249 li
0 29.249 li
0 15.7495 li
0 15.7495 li
cp
eclp
3.69775 23.0278 mo
4.18994 23.1655 4.5957 23.3706 4.91504 23.6431 cv
5.41602 23.186 5.6665 22.499 5.6665 21.582 cv
5.6665 21.0605 5.57764 20.605 5.40039 20.2153 cv
5.22314 19.8257 4.96387 19.5234 4.62256 19.3081 cv
4.28125 19.0928 3.89844 18.9849 3.47363 18.9849 cv
2.83789 18.9849 2.31055 19.2026 1.8916 19.6377 cv
1.47266 20.0728 1.26318 20.7222 1.26318 21.5864 cv
1.26318 22.4243 1.47021 23.0674 1.88477 23.5156 cv
2.29932 23.9639 2.8291 24.188 3.47363 24.188 cv
3.77832 24.188 4.06543 24.1309 4.33496 24.0166 cv
4.06836 23.8438 3.78711 23.7207 3.49121 23.6475 cv
3.69775 23.0278 li
cp
5.57422 24.1177 mo
5.96973 24.3901 6.33447 24.5894 6.66846 24.7153 cv
6.41797 25.3086 li
5.95508 25.1416 5.49365 24.8779 5.03369 24.5176 cv
4.55615 24.7842 4.02881 24.9175 3.45166 24.9175 cv
2.86865 24.9175 2.33984 24.7769 1.86523 24.4956 cv
1.39063 24.2144 1.0249 23.8188 0.768555 23.3091 cv
0.512207 22.7993 0.384277 22.2251 0.384277 21.5864 cv
0.384277 20.9507 0.513184 20.3721 0.770996 19.8506 cv
1.02881 19.3291 1.39551 18.9321 1.87158 18.6597 cv
2.34766 18.3872 2.88037 18.251 3.46924 18.251 cv
4.06396 18.251 4.6001 18.3926 5.07764 18.6753 cv
5.55518 18.958 5.91895 19.3535 6.16943 19.8618 cv
6.41992 20.3701 6.54541 20.9434 6.54541 21.582 cv
6.54541 22.1123 6.46484 22.5894 6.30371 23.0127 cv
6.14258 23.436 5.89941 23.8042 5.57422 24.1177 cv
cp
0 0 0 1 cmyk
f
grestore
gsave
45.7495 121.497 mo
59.999 121.497 li
59.999 134.997 li
45.7495 134.997 li
45.7495 121.497 li
45.7495 121.497 li
cp
eclp
47.2905 127.171 mo
48.9561 127.171 li
49.5068 127.171 49.8979 127.068 50.1294 126.863 cv
50.3608 126.658 50.4766 126.369 50.4766 125.997 cv
50.4766 125.728 50.4082 125.497 50.272 125.305 cv
50.1357 125.113 49.9565 124.986 49.7339 124.925 cv
49.5903 124.887 49.3252 124.868 48.9385 124.868 cv
47.2905 124.868 li
47.2905 127.171 li
cp
46.438 130.55 mo
46.438 124.107 li
48.8682 124.107 li
49.2959 124.107 49.6226 124.128 49.8481 124.169 cv
50.1646 124.222 50.4297 124.322 50.6436 124.47 cv
50.8574 124.618 51.0293 124.825 51.1597 125.092 cv
51.29 125.358 51.3555 125.651 51.3555 125.971 cv
51.3555 126.519 51.1812 126.982 50.8325 127.361 cv
50.4839 127.741 49.854 127.931 48.9429 127.931 cv
47.2905 127.931 li
47.2905 130.55 li
46.438 130.55 li
cp
0 0 0 1 cmyk
f
grestore
184.498 124.497 mo
184.498 123.663 185.164 122.997 185.998 122.997 cv
186.83 122.997 187.498 123.663 187.498 124.497 cv
187.498 125.33 186.83 125.997 185.998 125.997 cv
185.164 125.997 184.498 125.33 184.498 124.497 cv
184.498 124.497 li
cp
0 0 0 0.699997 cmyk
ef
0 lw
184.498 124.497 mo
184.498 123.663 185.164 122.997 185.998 122.997 cv
186.83 122.997 187.498 123.663 187.498 124.497 cv
187.498 125.33 186.83 125.997 185.998 125.997 cv
185.164 125.997 184.498 125.33 184.498 124.497 cv
184.498 124.497 li
cp
0 0 0 1 cmyk
@
113.248 1.5 mo
113.248 0.666504 113.915 0 114.748 0 cv
115.582 0 116.248 0.666504 116.248 1.5 cv
116.248 2.33301 115.582 3 114.748 3 cv
113.915 3 113.248 2.33301 113.248 1.5 cv
113.248 1.5 li
cp
0 0 0 0.699997 cmyk
ef
113.248 1.5 mo
113.248 0.666504 113.915 0 114.748 0 cv
115.582 0 116.248 0.666504 116.248 1.5 cv
116.248 2.33301 115.582 3 114.748 3 cv
113.915 3 113.248 2.33301 113.248 1.5 cv
113.248 1.5 li
cp
0 0 0 1 cmyk
@
217.496 46.499 mo
217.496 45.6655 218.164 44.999 218.996 44.999 cv
219.83 44.999 220.496 45.6655 220.496 46.499 cv
220.496 47.332 219.83 47.9985 218.996 47.9985 cv
218.164 47.9985 217.496 47.332 217.496 46.499 cv
217.496 46.499 li
cp
0 0 0 0.699997 cmyk
ef
217.496 46.499 mo
217.496 45.6655 218.164 44.999 218.996 44.999 cv
219.83 44.999 220.496 45.6655 220.496 46.499 cv
220.496 47.332 219.83 47.9985 218.996 47.9985 cv
218.164 47.9985 217.496 47.332 217.496 46.499 cv
217.496 46.499 li
cp
0 0 0 1 cmyk
@
56.999 128.247 mo
56.999 127.413 57.6655 126.747 58.499 126.747 cv
59.3325 126.747 59.999 127.413 59.999 128.247 cv
59.999 129.08 59.3325 129.747 58.499 129.747 cv
57.6655 129.747 56.999 129.08 56.999 128.247 cv
56.999 128.247 li
cp
0 0 0 0.699997 cmyk
ef
56.999 128.247 mo
56.999 127.413 57.6655 126.747 58.499 126.747 cv
59.3325 126.747 59.999 127.413 59.999 128.247 cv
59.999 129.08 59.3325 129.747 58.499 129.747 cv
57.6655 129.747 56.999 129.08 56.999 128.247 cv
56.999 128.247 li
cp
0 0 0 1 cmyk
@
83.2485 65.998 mo
83.2485 65.165 83.9155 64.498 84.7485 64.498 cv
85.582 64.498 86.2485 65.165 86.2485 65.998 cv
86.2485 66.8315 85.582 67.498 84.7485 67.498 cv
83.9155 67.498 83.2485 66.8315 83.2485 65.998 cv
83.2485 65.998 li
cp
0 0 0 0.699997 cmyk
ef
83.2485 65.998 mo
83.2485 65.165 83.9155 64.498 84.7485 64.498 cv
85.582 64.498 86.2485 65.165 86.2485 65.998 cv
86.2485 66.8315 85.582 67.498 84.7485 67.498 cv
83.9155 67.498 83.2485 66.8315 83.2485 65.998 cv
83.2485 65.998 li
cp
0 0 0 1 cmyk
@
0 29.999 mo
0 29.166 0.666504 28.499 1.5 28.499 cv
2.3335 28.499 3 29.166 3 29.999 cv
3 30.8325 2.3335 31.499 1.5 31.499 cv
0.666504 31.499 0 30.8325 0 29.999 cv
0 29.999 li
cp
0 0 0 0.699997 cmyk
ef
0 29.999 mo
0 29.166 0.666504 28.499 1.5 28.499 cv
2.3335 28.499 3 29.166 3 29.999 cv
3 30.8325 2.3335 31.499 1.5 31.499 cv
0.666504 31.499 0 30.8325 0 29.999 cv
0 29.999 li
cp
0 0 0 1 cmyk
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (Nicole Clark) ()%%Title: (image64.eps)%%CreationDate: 1/10/11 11:10 AM%AI9_DataStream%Gb!U'H!fT(c7&U>JUE6WKUp'Y!mMVh>M,FITplN8%;A-q-fN:>kE#MnDb6t7bDtsLbM5,(Hfd7DaL/#nQ)'SCEk1SgBCi[jI+`E9%HR5_nY)u^Ac-#=+k%7WL1,?DqIf6"lM(Y,r']"J[:>Rl[<RfZ8<BoAVc0e`H<NUC)`E&bam]9s.)jT\m-F\,*5*kJn>,g&$YB7*g%?3-Fn4`5c#)p]n(mn^@b9%M>u!:,\Jql3S?WNB_$G6/jCX,YHgg)4\4p3cAT5'Pq;rJ83qf",-F>1T[q``#"64-IXiP#^.Z>t&9'%>..r).fQ00Nl-<c("Hl:RCg54^!o."G,8D]28@I9[pNq>+,rn%7X39[/T3C<\0h)#n/!b&VF`'K`QGcLP1;/7af:Z-;#qb;[D2"7%J$!7B/(JsPgZlH"][,kC6J,>NHWg@jL'#QHN3$Vh"6SX_B;=%lC=^"5Wea03.NZ'jCCQdsY?bmB!$)FG:\B38JZk@49<HCg\^gJ.%l)nP;Kn!P>;Qfq'CNk#=mc3P%XnfAINT8P?<R7\Rc$j2'K439;9ErH/9dOSE]I+G@j26EPTXnggAnuM.<pd8"J#PA.po*Q"]lsA-%?V+JF3qNLZSp."1]AiiI68mM7\(9UbAu&Ehp=iH/r:)(UnF`&D>I.349PLSJ/*jF5CpS8&mSpb47YS"GAbU!?c>N[<"ThWTJ%?+S%/IR$=0)R79"]X+4?X8Gj\di(iS\CC^:n)3&(6l*Uprft9P\!-0b:8cFS$!-1>SkPmlp%H9\kpOlTbRD/5G;&]#c3DIW*([gQXUQL%PY1GQ<3e'R>q3\b;Mj\cLhXLY*pSm%6;?uUf/#G^$)M$)n.SF1SA\+c)pAS:65c.&r.K>'9Mf#^'E!Nu?q0W!=s?(+b:k19$1in$%!=En"4pd_.5EpbF_+uIX.KN5E%ud#t9NWPk_,%(&1T/XLfP,0O4,dFGOXNNq5q/0Cr.LAL"_lQ[NE-JeKi0ThZ,2//WXJENTC<Z@%Nn,;$d`;Fj5G8e8%t;qV&sX#7WIO,/ciB#0d#V9b)BWB.8eKn_?>/IXH5JZ%Mu'99`HkAfnK4!Hfa5fSfg0JD21:2S_+uIJoF:C:%S5<Md$"[LfR@Kpd_)m<1l@Gm<d'0/X6#A;rU(j=*_&$QT$1B]3_E.?_G_;-:'bPM^YsTtf41.iVkr\i6,:Cb^C8Nj9ge\A)r/^'n%kB<khaU)kX3D8;PVgY:W62*SA6#E6K"K2-t/?nKE",ocY&o.<r&7ZI8(&_%B<)Zd3r"&cQWMoCf1l]6Es3cCO6%Ae3dXR[TBbJAa%Qi==.qV2%:rc9(UgMoX=%f^H_Mn\uddXU$+oXFiRrKkXnlk%,8Qi>aqV8)tYks*/aO5r=&*W2^UV8'uVoIl]+AeY]\[%m)S8m@=T%ffQ#NHacs02>DUC@=PiWL!$a*m/QQ>#.IuO9MMho$>"$i"9.C>FUm5)%&bOWTe^GJK/+pa87d$[bO<D"Gu0^6J`!.Zon0ASqs958%A!P',afT#dS2^*@,r@f[dZ1#G4d`lF1H6T_E<3K+0,62CR"E*FOuur`;$i28k*=&F^S/AR'AfSBGro,<9@OdF_RsT"W':,K?O[bL%Jl5]l=1$tr=CQ\o$MB1TL39H'WllWp*1FWW8U+,=CTNide`&Ol%,d(fLa!D"HqdS,>)%=/^P[\+`P@ePePWg:rol)@P40FV>?W+k%>HA4QF311$)mN3PF/JMe)gK-/lLhY;W!llY'$VX**Imb@4&N$;qJ-,.[#u8cVYF7k!qUri^q>)a$@X5RU".Xb[!nGncOK"G-(u+5%Q"\sNcJVA"(I=Of#.8SBPh3Q*(2\qSq/p7D,YFp,TfpZ_PjYZ+B#sVD.O60.;K/_j4uMYl2\O<+,PK3TO&,Mg@q&KMiUr"B__JFV%NP+=F%+:->(WXGCY.*[gOCBO&fUQ8.SKj\>5/q9ern,n*Q.I]V[)V4#i!A2R-biWQ#0d]"Dc,E1ePt;,93fWoYQND@&1oX97a.gC%S<j*DSh(*&$;)Qe_(n#n=3OCfG`Vj&--DPJ"2R]@`<6AAo#&M"Qj`A8@oVPp,.Ne._Y?E#:ldS&c694.Gq.uVP&#LeOD`!>hDf`W%\Z$WUW"Ps'1'MVF,Vebc(rW"1:;kkHOMf/]T'R'LQa,_WWEPJZ&u>iZJ_Jj"c@f`bU=u<gD9I=D@BMh(^B]e,/X`1iG..AJ*qAL:%#L+?Y,hJtPYs/(I+/S,G5Z#>+O=cVr_"SGBYnNop+X?((#'nDue!T:h\038aG"R5n"c'*aD-r/.?K^t?#[-5j(Z3bOjI/;39uoHV%,JGu2A'q9aY#7J\>?1Tm`%L6='>B,bq'>`3nL7K0Ybe?dB*cX8L"!\)/Lo9t3ea3Yc7YIX*bB";f-*`fqa0iu[J7A8O@pW`:`C^`%OU+'_HlPaUOq&Om.Y;P2['t:T#j?Y`]hP,n\?%6%bW7otW#`TJ$'*[NHAgd&OmZp!<-HFsROkWe0XKli\W6POktNuQ*:o2G(!cQf%p8Dnl^/j7j+P#!W+&b!sgY9d@D%FNh=7dqs953aZmn!HWkKu*4$eJhrRQ']cPLO'.LOG>P1hkK_6%<,p@At<m?0G_rhn%dqZd3-9%iib!%rOtrOc-P/#26m%"RH*7r9$s5"1P6F(2.Rpg)s@gp/`rr!MS3,N6Hkhk^$EiZp6S?$L+SnohS\]9U<ot!)bHCE:'n!ugaf()%DR]EMSiQYLfQmecBh.sbcJ#Bil\3&u^Z1[(>5.W@S<*I>j%5/oXuF0CQoVu9cJr'fPC;/#[m!"dR_N$o\ZP&G;_<>sl+Uc=)n"gL%B0OLIoOjJ)0PJ#r=,gV`9)W6`Z+[>XnF=5':S3*fWa/Yn"8q%/5O7-/s+W/,i8ncf\(dOGfBh*iX5T$kprOI%#9sr*s"jL2_[=Z;%-=OKp-XIqNdoO*XO6_LbNphOIr$Ss[X>CjgQZhKN[9ejX+QC#b'7CgmZVmRHY5.b\:[r?1ZMaUuWR[qkhL0.'+D6s_[pEq$0)t?]%C[_4+gSt-d[GN:;+`t3h=09mHO9Xr8.a@/C9r7fNe2/`*YBof.E<u-AO2fcJ#FqZ&04-4O2&pN.[=fhZ;il!od]Bg^#ksbjn\aRW%ag7X2,+-u\q8`]6/Gb[!P@^I]?f:FQqfegdaV9c(Xa`4uO6d2m;R=?R.\'JpCY>OXiNiI^_6D5".bW9EMK:[:Oh.Z*`3C$Rj)=Y3%+oC@["8s`cA<4(khj*OaKAKpB\_H:@J`aS5aVNP*Z%""<Q8OqWp@-R]p@,G=p@.^(p@+#jp@-:Up@,/5p@.Eup@+T%p@-jeo^Jr3%m&k?STU!hmpNuH2]eBul+-,>iJ5L6]*jlnBC/c4@Y2Ll@IC5-B8u'DuD]JZ-;u4mr_fTkO\,VZV$/[bDB$RiuEJX#e;1H`i3I(pW%VMPJ2dBcf+5*6Hcc2<&2bSgfh@iFN?'`ga6,X3'_hi'>KYBgqf;/-&)J);<6:Kl)PaH*CT\UV@QRdBW$1Q:&\VpB7?)8JmAFK=6#%r4crT%.-]aWiu*8F1^#!10V,*^bFesKcf-c5p_;iF#2(dj'S'pB9i#@-#9'>m"(m\<>qL(/AO>%jdM-(W>H^K-h,af;X?(t=\F=5%7]ZAdHVT22;0(p940PPC`]:%Jk/N5;ZIV1T8bAXI>^B)e59_H(6qjDFJ%bF&W21[8^8q+FM:#E(9$QWtoY4)I0YQaaVqZOtmn0nc%*$)2(.\HjZT#Xqa/NNgNq1=Uf+#K5^5B(?"f>%=$]CCB=%6BJpomaS)eoZO"#mqKV8gAefs/J;-?dl)10DOE>_5_D9?+9j8?>K5#%f/,8#/,<PDQ^7d%B4?@gRFC'nmHJ"^9:qXM4-`qDDpO)6g30N^0TDu2Qg"V6g93-j>bmcfDk2BnhN("lZLunRehBPW^V9NM/aC)6%K_JZZo#u3L;9.XU30'tNmX.Pm>uKXX#^4TI_3lC1B5T"FK$)t$S[T0hG<T3d:oR'^c3_r8h"1G@cP+CXOD:iDp;XI^OPTd"[^$^7%::JfWs%b5rimr[MrMY+ng=]7"rNh'HVVi(RM+YDWe>fmJZW0Q?ijcN`Y!(B$hm7dS'tEn=Re8-tN'PtFJZ<<F%h?T5A9ho'lgq2`%ldWLKhkF*KEN)S(QWLEFW.2%s5t1cs[U"5gSTT6j&ua4Slo+.R>.2ms\)(jK$[6CdjsX:G`LD@MBH%Por)^#SD7-]GPt%TQm5+MJ%Qt?/u>.4**Xo/8QYDD/9=[>4(3l>U,>K]2r1^6EL@-a[6kQdF7\CPru<Y^rq>):,ZhjU\4)k1j@KaqLaW2UZ''>*1*NT$C+XKD\\%EVeAe?qhpX`%k'CN,N!51DLn-8]A:.9!e+d@E`!TRglh*b\0reE8N!Lg,1#VqG,?)^2HlJftKiCE2EgTi_5HO=%7&[h<0*nnl0PW%]751.-KqUfF39d1b@fq5Q9B#3Lo"=0jf#WAcaDqBZ'-c0[(:h7nlW7M'+_"2p+PGC,uEm-cQW9IWC.qMn"*f3\&!uU)X0$qJZFC;%D\ml3T(6\$J:k^:5$[H,Tp!gU9.`,lE3[\mrSrb)q:g:+VsPBAI&@1DPN=I#31MQ?[[nTK+q%?7TaNg6D#*WF>Ap7CCN\oO(,=fL%P-_Y*.:k#q/V6eNEhRe&$WYpi/M?R;iL6S![Oh(Q!eEt1@?i"%#D,X2b/4i8+O$e4?G#c5#?$=L,i(ePqP/Rs-m]A%E'+bZb=8dp%N%6BDJ?7\AWHeH"#>n1&qVuf+hYHq[kK2$ccOj"9REgl'*+\BU7i*d*RBEt;>=u=,kB^-aE,f7J;PI?rL,t>J,ki73%4m1%:o^dO%$j_fo\%tNqs3>@,%BTMuDm`sCM1au&rfU6GkYdsdV,7nCoe#o>_T9"/8#,p)4CM'SC9s+W;HB[<2ERV^6k\J%qcgc:LQR#-0`@sD%go!iRh>2pLnulXas4dl28S"77kED9u*n=1:hdF=9Oh`fEr)4Uq0k%S_I'`O`'WAd0k1sHm>I04m<s`FV.dS4ADNFPuQ0Z(`fOe.T%"^Y^gct&WR:0?ApV>gFU&$*QEAO)69+#kdtqP^k!'^-f9*=FuZ%Uu)aW[BTAqmjtun_("@&dVUNdVK7H/m8k';Z28doj&1MF'&1\%I.jH2`:bd[jZI/tjt:RIcQ;5TIqd"L@a0;->JKH_OL?/Z__dHY?'qmJJ;pA5REegM%4AC9p9``A2T5TG\rKUQqB-HOnacYtV5a(V%%%(fe;\/0R3HaAhCgN*72Ii4I*A2GB1?)@o<Pbi"=UA:_Q#-=Z=Mb88A]abuGNWf@qUMPkNKa(]:pEQNppntT^GIGAM_q^^0'j6q%Ie>9@&TD3i9'<21IBOne*%4Ejg:aq9jS$io02p<2i1!:T.[9Riq'W[..!\I%[6Xi[K.&/CM[@b^<r7BV[2MsNm0:,'(`e3fYYk5[%YA<WJ$2O\j[C%?Oe"u(Gg74:Rr7+J>LFlZ<hY#GaYF1MP%n.@'K=W,R"f$h_Q=-7$B75ZFV0K(jM?c*ASgs,&'$#?&%-+5!iZV.N%'+l\9[KC8^^XBETY[WO*=5%S`i2BQgp'"\#ZI5[MPR\#/(esIorN"IB@U.EdhE`'%P*_R#::4t91")=(Q)#E9/nbDXQ$c.JL-UeD%.Fda)UdUOo+(ub(-G[<WWZZ"?gplcoid4-PK:H2spV2o&T3nhQI>rE>Cl./7j(,RLSFn*bKCOT@'#bT;OY"4X$36D9?m9Mp((Ulp%F/K3T#[1M=2h0P>)qRjhV6G3WYdj5We_rI3pi=*CHQUPHhseO`^@AVC^%9G'HeY1(=KCfd;XW,LYM/!iL%RJ]YOAYh//MnO1:`7\%osZRfo-`GNM5Afbqt0J]IU_hgj`4hppi^:Z=ZP&t_V3fcG&L+ikKf-Jei@>pgNbS5:4KG4gQ(](hlQQj?^?2->5!rY4SrKNrPr(r%PA@YZf:KF:5#)SHO5/$lZiB,6?YY!FY'8V2his[MV7Wq-[B6j:]!,a)Gq]$dq-n>hiI^`([c4/W'?]WPGFDsAVbjqQDQe5tZ;-\q%P_*mHe*olYED#&&m76JZ7X:S&Z0,'#g%KWdo7aU>HnMSj:!DP6EF!bEnqE+1B/kBAJ$VB6)Q`Yg:9`3&p@mU&oB8sDllYB4_2itS%Va%%Sb*cM5>JF+;I^GH"me"]@>e?cng<lI_W=R"E[^+h8R`YB]G%R)$QX`'6?froFGIu7n)L&Y_8Qe$5lu]Q*Ch7Y9p;Qr$e6J9e%f:/=u:9CMNg#^dc>c0fO]r>pOI]%!7;R_"rS$N>qq:eFC5Q%Zd][O4?farK&eSaCb4(YeoZl<9!4%@?L[DN[AG.r0#oCp8YEH.+`%C:&:Xl,T,gCo:n*FL(4Vl;KH\>A=,)a^)r/>,kcN=\FhB['TF2O6^n[@B=U$f8?0cQcZe`X?G$mlEpNc;pES5D;9W%l;T4C]BapD%XI%kF:1%>:=/.i7m_13Jn,!o`1S$(><c`25lcZ5%1HB#bl1604Y1D*=m:GlGAu65qG3@n%)EM0f619)5@Dgrl3+e`8+.6AYY%;tW%Nd#fY4;[;4\h(U%;l@5<Dl(6C^MPI^qcu"XdnHo#\c8R;^J18'fPS.Ij+VY>[aWL1a5U,nVt]f*j[uY-SH=e)&:Ck_E:dC>l:,rC%q7*[JgZchtro&$"V]bepqkA*oHg='DGd9I)H27%'lpQ#C>uk17SR1[up);R4g^;Ldf-BDR6f3jeFCY=Ha3Dr4aA-Y3See%]AMP.7%I=0i8hS^Q3_,.k<I[uPfo]5Z+p[-7mKud$(GOt"M.I8_$F+$8WS@OXF[%ogUs7m;`l07>XqgPSE%!B^=_/=IH03^.:G4m;$:6[MV%>++aF"drttrHWI&5c9N'9QN8&3re73rK2*]o?:B"4P-25(Xp%G2g6FPe''5\-RO#:c*#C[#<U2>4"l@fd-7jn.I2ZqLiRt(@EL()%:,b6tU@=l<;PtIT]1X=>:2H1jB;sAKh3GkXHKVII=81;V=YHl26E_fM;O?eAb\u'Hkqh+/]=p#G4'akm#A:Vt[@Nf_Jt;0G=622\%$GFekVsZY/e,:/+Wq7G/`1<=/m@GE(::2/-gtm?l?7k=30@=.9*@@!=Y0%91Ol&AR'46uVLW+/Tf@b;SdQ*eSqT;j3Zo!p"T&,%%%;%dL@WG1%^BbeAVONlkcl\F-8U:rP?p?D="1\B4%rV^Wc;:iS9dBsKs-8nY<G0a[4G#s_7%];A8?]UH?R9Y#WdJSt!DEXS-Y(+a:%Hp.=K[UNSs7t,SU^8YQheWqC5<`Z*2[9W.uC<^!`mW[8m^4)K^/q1@a%"7e&<o./mR;UWc@qtHc4Vk0'&(+aF[n=Eek4SQ6Y9t-&%8,h=igg,m7If'"JmhE-rYO?sEbAT6cqWlu31[Cd@9Q_R6p3koVU[I!mO+4<d4H0&=\^f7XQg@Ti`bMt1V=*DY/\:X/jnnB1mt8a'%YIU.okNf[8PDuNEmIo8oGp]G-T$PZtpO)FRD>W8`I/=qup'@Acf&M*iiqr(;jO__M.ru*/0,$S?CCeG;pU0gNc'sEE?[M`]rl^(0%nU7'l>'K_=J"uX6p4&YK4k%W81<j@Q@Ue;0<Lm7G\[\&0])KP4b/`\K'6Ep>TCCSQfUp->jeG>C$f/PM<,I&cou9IB\V^:\4Vs-L%jt&;YDa2Y%5qD3O(U)Sm6@J68SnWG5]?K%Z"Qa6B;O^rR>NWrNFA(JBf;E^%s+g&Rlo\!L]ZL&bgoW=2&Du__l,Rg\Vb1[X3fWCR%RUT;q;dXtF]+&k.pEQB\]a6L/e%NHgS_'hNg4e%YZTn-'qKrjFmPTS%r[rD0>Y`K+4l<o63dmTfRIWFN]rX,p:Aeus#R5&@M!id&%]8Q-"ZLjjo\2)\gg(#j.12E'+%Sq)8<an,oD1#,^M4H/3,dEnl5&qBnhBfp8dOp,m4dZPXWk-,j%I>-cisTktq4+J?ku97Qq_9BE%:Y-pkP\Yb4^?$VS!H[t1jj1i(&F6XU966$GXj.5M5PqPgqVM;t7UXg-pq>,aL?%;?raS<Xgc+F=!kZl_\rcaPCkdeeg%us8GNE;'%%<SGSr\=0F2=*20h/=*9CHFQO1$*P^&9;i3D\!f5rJnInrOW2dFDAZ/HgC"03U$d4N5!$N*Ec;!Z^F%P#bS9_]3n!,%aA5gIfM2+%$k5D+;f;k%MsF18^4\`XmsA,Km*?R%\NUh65NJ1+6$5MH$4Wt2T3>C7+,!G\f3g*mWNa7`(0fE@J+cAnrj\&,nqd*YW(5sJq.4U;%%.QjLFsh#.rUnVuY.l%P>JI"E:+ouc!KHctOH"F++W4GIf5L,`alY>iZ4\(fN[ONo/d8f_aARK3rjb`r=[$,:(m?DLV,jI+pBSQ_%*8V&e-'+#\VbT#(1J,XpM4V>UAm"]l4qp6B%_UI"78G8^G;Xj9Wk7.MHX7A31]mE3B"1_Sad'IKVqo;]TPRte+8<(i[0Lof?pPl'%M=#PjS<'505.u8A*b]<)?&VVY0\%8q1W2Y#"&Wfua")X?15uHL2*Z`"MADt29-:ueU<eL%,g>\o:-Ke/4>mVp\PbN4cNJB5H(!7X%*r[9c4Fcp@M#"G6pFU9L550kF8YY:bKZ8oFq\5#Y2oW9Zi.G<bdTU(nX%\iZUu8jqY!YgaPe9=;CUpga6pLHMWQf+^Gg[t7Q4l*O%i.AfV/d9XZ*C1X0a^[2o2@?Xi`O4(&OHN]E`/ICeUMYL%&#1M_Zoo5!KnYj=E0dm1k'ViJK[meO-d(/MU1Y#/Z*W+]bf8..B+3/H%o3P7n9&!5j2rOPH3M1q>:XQi$#6-NBN%C?'U$n)uab7@U+&<6/NqN--'fVp_cMM<W0NP%16MBqj2GrWJXC+8X0)bXS]ramCPWVQJ%ca/nmjDeaOBcHANG9i.uE$gU)`R4VAPOu8o0jlO\Bh-*D:neDX1%*`SKViVDhCSsAf6q%lh8-L/J#qksL[fK<qa_2gToG@J0Di$>%FXG_8?q9MiqdE-F"Km.*f=l`P*t;U+dqN^g8p3.65&RkV4ud`6Rsb](>ds(9cJI6$=uSdl>h2!N:l+.u'[)_Oie7S'RSr3CqFQ5p%!t":Z6fFg_gP^Ug)jtD<o9!8,p?eV0Qq^=GR\#F!&4?#0"V8^.ACpP1:3WoP@[n>AFMbXKJG=q/&8$Yk`XXG])e`&8$36.,,aS=U%0I?h9ju5)p]cT>NNKs+qA<^_),(6BTlO'Wh)$*H<p@W.W40RpoLl*qJS`F[]r?^.K)/#055#?^-PBSJ>1XggWGIhKk4P&lX<Y?Ou%*!'1aZH2gOedX>na>*AW1POB8hn*tIB(.bj8Wk`Xl,hDrUP[OYHTWSMoEmPbqAI7$>dB.!r[oUEE&S)=@P4d0"!iBg-?RnH/J$gs%GX#/BS[Y(^0#f9$G!^tV.=?6*5$g9ugAPNW78,79Ya<E(+?klHIgs:jSA-CAacbEfGT)161k[2+5umb0X@`_[T?3p+VYM.3S50TN%4/%__GiI&FqJ!eIgjL.G[m</jM[d$*Y+1Q(?]N!Mi"1"EE^#%]l+D%=Dm[5uQ.&Z*.$I?h8"iXq-irgW`-MaWGJbRNfia^,h<JHk%=hp%\fKSB\ZD<Nb\%;CG`F/TJS(6n;1>aC!?'(5;&0CXp!hA`&TfMk;MPg&J6">U*r'E6+lu.TtPYl"4&`q[-kD6L&X-U!O8S<GL%gBed]",t5a'?>8ck!3bE+mcP%AF^l1%(Patp3oD>_%X\:2UT>9+R[=;c*0bGY]63fi&Pgk_\q1u!b73OoSGfmMc1g;^SXDqUjcor%;>.OJd2!oOg=>*o/^?`#G[h-pXn*;lX\Q(97l2!2kTffDPUB#KQo;OQ<+I>mjlEAQIha9WL>`$2_'N9LmfM5]?(tVakNir<H&OmI%gJhqDWreG[-J#MG)Ha4D-.[YX*$%N7.%Y=uLGI$]i:Ve#:flAdLD2IE\(@m>FS[5-[[^2]f(6Zf->$CjK*YW@rE(e$pG$pb6^X9k%c2KFQ\WIU@#WZ!\-Xlk['3=/u)@`0oBP6B;#](eb'C7l-n(UT"kJXC]Of&N<fRR;CUqL`(q_!K4iQWeII=Oj1rnq*BR`,LI<hBiF%P@OQ86e5?Xo.bDA$s4:HZ&sGe7CGOjl-X^[S&&B6Oh98j./J@b'ttKE[#<a.l1\&WA9*+Q8[TKamtF*F<$m[6;0Kk(?3h_59E&8=%Hg-B8)(HU4Aq(c-(]&KT*'E><@DqF4Cg926c-ZM@OXlVY(18]cd3qq,\j@aM`_nO%$;HjEAbP^F,g+g``gXHF.nS/Eefq\"alc6n%Vi2A+5Lt+lM37B-_s,$*MIob\j:pqqg6hFCgX9Bo[M8%'Nnp(o3XJ8Z9]TBi]mgiYV2muT$Kbf`q"F)ZZ>GgajK6Llq@h^hUidR=%oEH6"VC(<:(e`mbN]S*aXs?ha+T+.&Yo"4NQnK]fh_L(>#ZXV5KbT/3EXO6KQa\2\+-<Z[:f)C)J+DDHEu3=!`7!u?9?<&B:FnTN%O&6d:RG<%-k`RacH8:50bb7\TTHicFoGkI'%(`6N_*N,*Ou)<Rfn.-)cm<>OATHhQThE\($Y9\USO8a66'o]Q-\j<7K+=Y<`fNQS%>Rn*4`fNQSS3\NLiC:q_9?s3jqH3b;\mRdDI"p<EPd[,""!=-A[/"@-+iS_QcXto0!k6dQk#1858Qt#-OgSgXI3M#,H[6R$c3B+O%O$DYdRuNIc)[K6Q=Z3sUAd^&O_%os/;1`G.$&pNr4?q>'qe+3NT3o;S^SF>FkV/q7OQ&&<qmaHTL=D\J#N!i/PNL<8R_'l&XTPgk%K-a>'&.1b:*u>@V@s:%JEtg\SR7oHie.Pc*0C#EQZ<K!qE\PP,fO%,@(lMq6k[U*dQ..bGD5^9mTX86c8N>=e:"-gg#W1XS1XNj#%?t7"a/7u6V/I#!e8g0Zd,4dOcbc4@n-AOQO7W0VmLLJM\Q=?%O#>-`4H$j=))#N(]V5U_:8KS>PcMBU4(OOs`c[/Lq7)PQt]fGV>%rD?^*(on4;#Bo!!<[S*nj%I+t+Ea41o3Q6dYoIiH40@L@e(2,MLG;.g:o0pLn8(qk1%=&JV-6*-\mGmD!-rt:jLYVn#0>ijRhHH2%%"TC)hUlC\4I"s"I)KZp%+86s<uDT[%t1OFJM7jh'Jf/'\O7AP@mS/=h<kSklE5=tqUgl6`63Ve"@g]%Z$slLI(?JgLhjdB33em4%?WHsMLV(/;dj^6C9H%EEa0hCEm)@`lTl&[]cA^0SUgZ\q/[G'7YB11JjA`Z5=/bk(,i7[?:N>^Hqu+nSJ&E0JqcIB"pF>f&8!<#?%T7#aWGM>\M4];16H--BbaFeqEZ'6u-R-PtPI@>eu/UC):Td_97a@/Xjpl)/M'c9Ob@meD8F^'+e==g&TF(s;b3R)G"dq;KknJ"1+%$'Kh[YY.CdrA*DBLD7m$L30kT4>I41dKeOGOtuCPH"?b?Vl*(C9,LS%mZ%bLYS6TKkgSri+.FmB7qP+ORN+I_m4a5a`]N5H@lCtA%NoH0-^,;Q)c&Ouq#`jodh2sl1D/bP07(/ccB@m2mH*)BJ;MWHA)oNs7j6$ZcoS^(PR@M06A#5p\FAW[?T08%n/*@TEj2TOrb9'77%a@Y0s;Ni=0dMNn`Kf^36;[939'fd5gOjg,"Xj%@t,T#0A5)rNp0(_j[$\^4OAIJ4TWuEUU0eu)g-uHV'EaG<Oa!G=)pC@hOjLY+Z%Wan^s(TPN%Ssg+BXY\U7E^U[[FIBl;H]B<mNoFLD\A^t`LE#CTZ,-%jU8+C%SI[YWKPKe"\3:M)A'0QoR6350p</5L]FctY5&f/%%\8X9h3;sk85$Z%>UX7Y\oANU&&ho&f3,)[ZOM3I4_aW3e0ul?58K%5P/sJ"i8g^4\0p/.[L?!F"1bk+U;%ge:rmg5socSoc7RHfc%-Rgf1oa*:Y'/H-a)3(PT@6:7HfMa<6G&qa6I"-urQ08bea#eA!:LqA!UHD(U92<D30VS7;:NWJc=>HUG]:%%]HI:Af4QjZ(Yuip>%ICL4?SM[.%1OP77%IZL#EZ6^@PJi4?XB04N"?)KK@8&Z?>rU8.r-<V\D-F2Qf$IOgMOAq&Tug%%gsu`e>R^G4!7k5::,8cEN7=>:%A>DEe).Q,cCM\A9W=OKuOHHP<RcDI[X\9ch-+B$i,F,YmP2);m`DYMAdW[O1k0ot@WTgU;Q;-B&\3=GbKM,5K%5NMSF]RXjHJ!1J%Y0TG1o5!kq\6(aLel4WUa8/9t"=H2t.U:c?N&MJh,empU<4Kd2b$e6-6?`u([f7SOE04I\Z)>IXq8ZCeB5ITA,76d3-RU0'"Tp"S%]+I6.O55f_68_:n'COoA]*D7oOJ/r;7H>]W0Me7t-,Y?U/d/N.Mto]>,FjG6"j$9#n^5IlUe#A5%4NSl8D_aMm=BV7cKWlh89,KG%+$Pd#s185AmsHWk?Z$XjgZ@8bO1!$9Y<-Z;-<JtT*8^$UeIF6V2ARs\Y-i^2>3r`31KJP)=Lro/4_qCiP<5QRU:XLt-XT@h]:EcZ%\QFrtK-uL"fkp$NmS%e2"]E.e=,Q`rEQN+-Yut`/17t"s@>E0Da)l&j_5#`Aj-&6pACu=onX[P'g9I3cUY7A@\QJI>%(f?AgR5$4%SH`$.n>U-*dr;T34HS6PbHNeb'/Jo$99jm@Vb64;b?7N:n/br^38+*FQgFF5PjC;F`HSn;55!1h[-'TdghH_s'%cA:!d[Y&Y%'P)%EbosoWYA^gBtCN6r5N*Mqcm5RUai8YPu'L#QZ,OXkJGABMA@"0>2<J6lXY(N1W#$JD^EXtCoG=KR/=T@[p]`3U",YDSe:@c#]ND&%g9VR+<F_7`^QPc5mtnT4+&oL@4DAi+LM+;\m3T<AGN9t:<#OpH\H0B_4dV`LSIO8pjHMk&L^2u:&g*8%'A#1?8*".B(\@'!b#mK6%6gFR"5\d*m#c.sbV)J8KEU!:qeaL6MW,U@1&(("@oF@He2ln*5Y\^m!42CU-N@UJN.[MdaI[F!<l(WQW&c=Cn2I097h$BF0!utgk%7bSBD9c$,h34F3-flU(cot;MZi,#tQUH[Lo4@hA9e2`Mq=,n`!/h32?F>>V+Cq;#Z9CQ8tEFdNeq:^8_F^3UA$27\a0q0dFQS'+:%3f\$fW(e44J#q=F;*t]JCcm#%?.A^^EW`;=.C/34eh8csC8>[WhPU.`.6L!V?+b&8c>:(C0K+#2?#NY\QeJsUl%[10@+fX!(05&6%flU(#?uGX>Zg"2&aG`9O0']g>-O,%\Cq?QM]!1igH8]&.qH35tA/s9E;7Uf-rFPV;\gV(l?HX6[2I226XtaJ97HMrD]Z2tB!Oskn%dmaEnoY/sN*u-#3K%NHsmh'JZUe?)-/M0N*)#&B";+!t*/r"\U/lB5OLSqj>gBNJ`_brHir#g]&OcBQf\pf5tCt<\"TR)BX8ee(I%?#Cd2MAd*rG9!F"Vb`5KW'H4c$'Tn;>$C>'A9%i*U56/=pVYpT&.rNFi0fdPZ1s+B#09r*Ic`8-cW*#kI.1e:i[)fWMY#f6ceKgW%EhuF)96DV,EdTWlk\e<F*I]c&NLJXcigID8*lZ%5TDOK<-mh&uQR5e5R.SUnaF,!Q%QN#iUi0Ki:.<EQTR3h*NlIAtZ*A>@.f$K%%L_?32b1t(K4<I(m@PJ^JHEj6mM0+0;/*Kd$7m*Am%#K(S@t-;61(<2q37;E8!Fi.8"Ha_D])KR2SE>MWP``ZT6tbtn)dW*l:iYY]%OKOlki^&9;1t:X^U7j3[)%C_V1)d/g@.W&u>3>.7q)CV0;$aTCHQ@>X2cr/ZD0Z.4$/6>_"0n,Qm#K7'mN:,9NV-)K9mD4PS65)_%;(Q_4o?:D//tMuB5\R7O*D")+fD2*p/QH>k[!0K`nonpoKZY"t]d>->TWQIo,H)J2r('a.90>+eqJ%/'4lN6MZ+XNNHf`m82Qp>i%M%#%+Ici<56UUf.+'07J<@<[;[hK?q>)hnXQHpH?N`FC?`P]tNr(c7%&+P;i,WUuq^_:&$]bYo,).rp@btL^NL*OBNkN>o9^Mu1H%)tpp`2uL;<K=l/iTT.tNGN6blgfYWG96ks<-hU,XA'%B$HfK#%=[cZah341ik+TnJ?b#FnhWn(C&$,^<GA1tQLEMke,^/]sNHjbH%I:@&)o!(tCCaOR>D.W8edUeNW#Rt<.NZk\$iD3Erqk3[g;*0DVZ_HlD@-rmrYngLTJPO=q=T<R(mtHrmCSX$8A(-f_#0LkFi966[%WT_\(jTmcW*SIVB^&&RpYtRCl8<Lj_fFHS<_-O-\)H0F$=?<co>*i@/rH@70/;Ylq;n8mV,V_Hj6alm]FsSD[VG1OjhA#Am>R[CZ%nUc$/`K2iQo4c[@;CR@>r,P=_KO0Q35'ojn`UGK\0uUS[6$$;?DdR!mC5BO/So/5&bm<WF(8X1!+cM-4BH5HO$r'/O-\p)XHK$m[%*\J_P/NETJO&$eOnks$^pQoQ;M)S+^ZC[8#>^c$?$Dkf)W;]2R=fp=oDl>ZgdJLL`hdpgihb&*"GJ<IQ2n/L_YD:*aI'm)3/f[.o%kN.KOG]Jf%n@3ZkoFBX+8)lc_+"ib0jL"f;L[NGhc=Bf[jMNRP<_qb=nBBL<gm<k`/<b\m>Of7RS]T<$+gt=GoQC$nWmaY%hI2VS%`58)E9R>i=fp+T-Ar3oW.uPFiG7f;fcFA9SYK#Z&:!U_TVR8X<Wf]kt$tG+O0<=QiRrb8[][5tj_3s.-AcBAY!?Z,;pTO8_CM]n)%jkB$A>c5!.:;sh`cH5m!/:s/CPP`%\:7_@!j+ZGec`pD_8"N&uj9*3TGS9.2cg"#e>E(5TA$&2W&*6bB)Y7T@Nc1+m.miJ7N*H-p%oXt-ekU55Gg?k'?-5Yoi\^2j=1Te%S@nD%=rD)ie5tg/[M,-_>PBKK]!Kf(7JO3f)&t;.HN@D7"IO@%X.d2LZiCQ)"%>UUQ=LtGt%=mgJ<$a!#l!"7[H3IFk2^BdOT#FgUB=s;lF2R[72OH@_96OJug"M^a%HMT$AoHu#_!lk+o#NV5)33>mn:N(&c:gE*d4bqX59@A0T%d@"8(`79q)[)\L>5$5HVDCi9:mDA.L.3%NlmMJ]Ef[Ls3pQ,:**Q,RMCsA`8X9ZDiH:ZA&3-KCf*1,#=%Ue"<Z+a6H1_q10Q,Z$(%$6"3<>2cR9b%*MXc=nTKPP.!h)``U632JF@'H8huV[7(/Y6uK=3<$4a.$kr`/Ep:T]GVn)5d8l?eqL=l&o3=gmj2e1K-c[@h>V>i%UeW34&\dGD?ep9SXSOAa!H5%V;K)QXlrl"7Sq@a2\3-RY32I3b!JBr,16jY;cW,?Bi(3/MaKq7>]3ZNt0jNm/qu0-G'iKu@QsH3.%=Pq/K#JjO"pO1Ic;B%"'oPn?aLi'4@?+<rto_E'c/ASVQJDl=P+VM^kR%E;<NOU>3VB)SW!JJuF4ps'WIW7Au;M=<H=b+US*'NIo%6Y6@R80uj(m#?XW>G4o#e0Bn]RfsX2P(XgjSfFe5FH#dbSn'&VOTcRdUnFn:FC%Q!l'YOBHQ)ZV^4BU$)u<FGi+lKqWCQcY]F*\K%Pct+FCu]c)O)3n1n_bki;*I*6*:*jA+Wfa'o"pCd;81!COiR/D?eY6)7sL7Oi)P:nQ&UQd6(M>Y8e$f+eScFO6c$B`A'*dMgYG]$%^$?K)=u`d$LhPPaGQ!]<64l4Y6bVe%U<:i`I`("O'n4affddbPM%BBa?d&lI=8h.HL)T\i^JpF[o"0@mOWfnNC8?(P;Ijg-iE\[j%jGJ$AHMbmAn+n>+XnVe:iSO6#IarA8(I02$oh1lQFG/r;n+oI*;t@'Q6bM`O*,ua8(N^3MC"&,PPE-ukDkqUUOuGEajVbtJI`\ei%%<qtTm(7_gVJ]'AoYBql77BrHYPO7V*o@fThUB7*QeVqNrYXMb90Q17,.^9jf.T.(2BjAgW-A37%ogKJI\G@2L47aX2[iH1ePF+4%%@s*-ht9VXAsq$&2=.r(OlnQm$:._@kjS?o#@%Ki;MTbR09Es!o;Z0D4]b"bl^*PqnKQ_dn+n@$g(dHT38X=$4rk^&4h_MGnHckL%2gX=JoW*FnB6-JUl^)ue*$9#ZfXlUSRQT]EO8c:hnuI6"a\(k8T976Tk?Yj`oB(!+_6ED)-,8_(_L$Y4"DK-pa#ER#3o6od@sO-=%Y:Z=)p4hFJr<@P)0-jsqHe5GKfcopcT9h8hik'X\Gt#I42b[9+i+c"<N=GZc?]plLn;#]o@sQ[E*-nadht9X/pH%TOIU4NRhaS^U%?,+3bXs2`q)a5.rHdse=5-fR91iU`=d]7g'\"!p"Y$[,-j(^j*/iMe&I`[.94[,\cht;n#O#-W@/:Ggmb$7!1*;NmT_<f<Qht7?_%Y+A_n7Yr1Nht9X>LeLDgDngMpOqg@Q,]UbHrK7h'r>g0jGQ!\3oo%2;L3hH)8I6R]AfU:9V:B!DHe0p\P2TL@'!l?YGh4ToF6Jh,%RJL4(jNW6k8oRatn(Ac)7`(7$?g*LE#i.#-:V1NKg@loF/tQOlZ?('EI5#Lm,fbk?Mr<jE9RuNnhIW#i$>/`m&53`K.8Z&kljcMs%5t9MFh#706`,];[33S\)Bi1haBt(Lqf#5Euqn0/'>FElWNm00)>3rmC'O%,og&7B"/o9<=J")rfkfut?PqEE-G<`0ol-#QqS_RH@%Z92?<rE.A+XNU1,8,M\ar3H.loAoSCG3QRc&,UjZ0@c,Y?^ItZou>NgiV<$@EGp<onZfS`s81+>IJSE$\GGN$n_7ZbS\(D]D7B3&%M9/f#<QHW<YH.9Pb15fHGO]oqrQk+_)0eBtghF5V<mE$-^@*(<B\TGE`RUunWK`X,Ff"a'VPNQQ[8)t"e!&C,]=tQ*rd8"DmE@2R%4Mer`Gc'U!TA@IDkN!\MA-16:Phg-PZ/'[cS-#iUX[NRB^+Pd[]&)]>Hn0'!95@aI<W<@rH:Mptqp.\fZ5T`_q0FpCo]5^XdlNo,%3B:9%ROcYTo4NMu@4$2F2XRS([W?)JH\\pl0+ZVBGNRO]oTDSp1-OtVgZ=j\N%>`;S]T<rnjL+hSP_-fE*fcNjg6&hVkVC!5BDg7%D\^b.mVgqTVrmG31*/@?faK*qQ=fL?D#_'&/9D\O(1#t"Ye@+)D_fu8iT@>EY:!QOf$BOKf3I&Y\^MA@`UAR\q`%MkqegD?fG[Oc%f(X(Ei4$89SYb+SBl<t/5i)CDng0JMeggn=(8n]IIJ`%SL"j(Jm;`/O8L[X</AiMn%1s2q:n)<hCTTODj(^?1bmN,f22fJ9;D=)U%r0(Q*Zc2oK=i<Ppeu"?i%'YTUbd&""9DFu?rT25Kdc:9(On.hYk0)n%H(rR'I3]>F8SS1r4tObsMRb,'"%3VlT<?[Vmo*Qln?Vc2%qk-J%QDY7"`J9Y&S>j)$Sud1@74atN;=V=Aq5X1'=__U<@mpE#JStkWM#muVn*7Vef&0>`g4&m\o@cB8U`rSV.brHl^+AY)du7Dk%i-h!a4;Fl"7;1jh_/&)]lM`73ad]D]]3!BR;$qND`PV0,S'J`s?,Ef!]X?amj_J2pU<HCpMUo;]m4Ps@5;lT.lY2b4RE-Y)MABg-%ou\RFCU"H$?7%TtMi-#Y>+"T&=hIpT>O,A1ad2o(H&fCKrnHO&-HGBFmU"XoDj<Cg7lN@kIIbhK5G-iOe8LZN"k.Ygf0C"^+mRX%%^)a.?p,gf'PQ04DddT1baZH-h5EOR+h>,3'ccudmR?T56p5tQkhW)a\[R[3-F-5,31qp3O^)V#+3Zf<^q`CF8ZdVIR&&"FT.Icht%$kanSkA_D6Frel':MFQ@'Y=:]R!:%j9/=QeI-AAt_W("Vm6736J]BL7l5W!jM=4iX5OAX6pr_ZoJSg$6o7sLQj*1KG/SGdSfRA;*%-K;+tfj@9\rjl:DO*$44H18TU`;9QWe>:jM!c[V@^PH9!\m=gt*\D\*rlt^j^rElj7&_u_XQcbp0(7@%$B"Y$Zp@Sth7h`!rd<IH%AfB^M2D;AF1(T:aN"6scgc-dSnP-'2=*"jUhj;g==^%'D6)k:MP;bsah;_Q-3J6\sMkE,9a`^kNPLPU1ZR*?jMm1=_eg.;>d=oHh%JXgXn?s[_YWP0>@?/PonSDGC+#G5qck1i&Shk^oC3Oul/a45mOeq0u(1&>HCA1?\#T[Y=5Jo"L4o_.upbA3h9(I6ASK=31mA%N8P%bPKHJ]uh+1B*lL.l*:S)Wq:G*@,F&,p^SrEE+rB8G1^_o?(\fd&*TklmH$J"m'&S9h[olNi$<][$g,XYH4tVLj;'Xl(+S<IKJek&%a%c#^A"Y_i077+.cXk.>q4-s)V$Wo<59i!2HtD$&iii;5Xu<FXACU]fLI@)<cQ@E>b5V/5jR4VK9gGP+IH.EZqr4o+k)N9Be%,*g%eM-,-A0cQZT6a$6h0cKk,@TQFXZuXM?V;dqIXD&;:lo%Eb(*#P_SW[@KZ/r1T9^H"M=74$nqN]m$Tqf_+9S>k'$piV:3HI+NRNIP%WMZJD6:N0dgPJs>Q]TSN^:X-%0_[DPnIS%mo5bN[F'g8C7M/NFQe96(MC&rTTHe0`LLf$aA7A*j#L%RSCgq,.Be0M!Ei:>UBr?Lk%0Ri8'U+kjhPRpFVHUn>a.Wo^1%,D<#1d<70HOVMo21QN:h8JLiAn`]kM6s=gZlD.3jS^paaJW,LIIhi(N]0ef3";EZ09&S'91j4,%SG*\d:fF#BC!0`/Htd:hq<ZY"gcHti8er3?Ec?`X=m5i,YFJB2I,Es@`j`l#Lag9GDd"&0j@<IF6N$,k1mZdI1((W;N>70Z)Sn.A%a^a6cQGb9,YT3*hYUo1_6T1'=3KnYtXY:+&6NbKX4#5NYbV%SeCVSeEqhM:aQOdb%5?>MrLL!)S=3gf#>s>dp7n`kjQVYDpoH//M%i*=Qos2-H2m,`"HS]cd@mCNXmhL-A,fLdiM]3dY!h)ceC:+#]WEUSRN45PrX>1o4cHF-YnTsAi#7kTAKLFqSq"[N3V+1qkh.JDpF%pcXQrV9kdVUPUIZebrXpH=$URO&1@'gn2VELYsBSPPr",jZ,tN:425p;ac!-N#BF'?OdG9gMWVBYj+k3M^TJ8l.+TW3V1W_O4H7m%:QC)MLAuc7=56\X\*#mjg34lFCrYZ(CPuZC7mpLqE;:'KJKO#cXfumAV5:CWA]8_rW%u,(s09Xp_K]S,S)6>b0]/eVqEO9`_m/%!%bC4%2(S?[jqm9XYWAh.VRFOu>lTeIRRa8*6]2nf4qfd7^<W.<K27qP,CglY8G];T.41/hh\X(3M--W"\.PC5>,CZG`a.;n)_K0,>%429Ra\,E:a[E?cJj_e@]8OSJW?Jf+BF.eFbDIRVamE<HGaZ"EQl*\f#rVVqQ=SuF7S6.hdh3hAGN]!W$fTQkpgX.&-S+ZdJbOWtW%bJ)AhkJa*h&Cd<E[AU.'O-@K+,Ib#Im!lRfQWi:*leV9P2[-DH`$5t$]A>?YZ5\.t72&l"?M\2R=aL$p40`o+A![Z(k&t3O\M=K_%4+n]V'?aVV)4U<CO,<[Y@sqgsH2]M&=O"Hc;<Pg_;X83]BX`>AocrBiY=u\q&0oN(h/TmY^4!p?A!ot#cR6h;Cu9;Qma'joKFi#$%$K_6g&h&F[J5rh7X,hd?*[l1rmo>SlS?hU%h3ddo5^Arj>7hrX(*qImG16+Yer0Q"S)#KrMbg1^o\o]1O%o/<XS<l(Y"*".\`^ZN%77m.MOSdlb/c03m#eXV/]N6_)!OR'NJB)h1T6B,(m*@0k"dQB#l+4NYZf3/C=lR)CG-L<^]l;OtXE%@e@j0F>D28(8Tg6W/b'lIj%T=<<$j-OALeo-!u5;2`,"'eFK92T!VS_fq"GqV_[X0j&@^P]3ql#aPr9K<_WimP]c)Dr9?Yjmd+mk+rEm:C=U[s4`?>^<`c;V\jP%=oDKN[?!M[^2>fHOINWEqh6,NP%c/@hU]@b(>U4=TCVhBQ'],eX"Zsls3>!g-j5mpri^VDXYP0]aqLHG')h092:hI[I359X*K'jc%nTZa`L"0UI/(f:s"kt9N"7LSQc\0sk8@LsJ@qWUSq\)Wo)daiBIX7Ym1,IQH3TMfLLQC]oaWYk"FPWbM-\pJ'8[\!>-^2iJIG3?A%M+JCo%nc?M0+m%p^&,_>c4nPKc4lT+1PMiM'L%bKkg"=`#0oOETF6'S05p2q]uQ]n[+erRO*q\BpJA_qR`K>Amt_1J1SG$"78T)7%:eS9EWdc;7R1FIO0X_>]od`!)3GSYHX<W-#f_$<e]5&5JVp.Y;qh0W-7P"S:(M:otlkB@ua\a\j*eusP-h;GU&]hZAiW+RW]90%$%>lJ\/2l*pP!iULEi,C:Mots/5%iGOq#/a8&#8#d',_U(#IWI[U&iTF%^n':G"U^3?Nrg0CRrk.Bp?eE\UcKP')_5i$JV8_^d,cqX%M\>FJ=@`*hGG(_'0HFu2S9=d_T1j-Bi1hC8Q^Eaq3/MAmPNurBGAV5j-@-TGVsj`s#^8em-Kl>N?B.S=#PmkOk9,^;%>pbFD'6c^%M+up''8'%),"QX:Bj@bS@S[Y9*Mn>=7N(;Q&rac^f==bg)]V9;aUR//6t-gIG@@j5'Q]0VHnNo:b10=Tb)8nA`dk*32i9,.\_h.$%^7=s-kk>P:OW4(('1r!i2?Qa-BesJ&;E0HL9mdY?^8O`Zns60a<,A3`\[T?@91s%-SATiPP"`-Lk9Wd9<PMea38+*VQRbia#gD;B%a"^4+U.8]bLk-+kO_AS"`E;hJCoG>+qcHE711V:22mGT\=Vtikqo^9Sd+FFW%/X(.9fiRDO@pY6duW9t*<5Z)9$8[NaQ]1m:><se%mDs$bGqD5na&fBPQsEYYa;EuKWcQnfSU,f$K9"eKFn*_2LG/(E#TNQKkugU9;"a0`B"p4EiYCmP4!#@'fm_^32"S'52g#UI'lIeY%_.O>BAZdVAE7=4/H\bZPk!d6e_)!@u'*,HO4aKU#oC<-qlac;A(?H(g`N""[+Wge?6!EmF']]cH7K8`"AE&0Tl9mhpfXmUDJm(s%%6*3ftGUFIYH*e682&.mL)34emT;Z:CmVc@GTBC7L:G7WVflM%u10Rop(*A4`dlA$c0;+0n!^D%a2up=Vo4G&d=4f&dJF[7YSN?9<%9oci5Q44t*Y7b$Gq2NX!FJXSSoX0%Nh8m>^Cn4RUQ$85u-8$Oecse\#3HRp8[Pkm-qVjMJ_sO.W4E-5AjYbrOCNe%$CO=sR3A4U'%T@<JhDpN'8^@P@tW>?X<p)J@%5BK1t?Ocht@Dhe6N,FsW!Q96q`5>;8OSoW(qrp0Z>W8\P9AX%l6jm_q7`XE"F9b`tQF:1MKc(pg%7hq)SSDm=[$a_1NlNl_Y&,*e$<;=;dc#/5^Y/".)n)tb%<g_a(hG`=">0qGYmh_,64Dn=lb!B?dPce6ZUdmPZc<)`A8V2.*LO#OX%da'pLbn^&bk^E^4/KaPri_7nY+4'[@@,T"8@RBXl0`H]4@ug`jYg-tWXg-]LCmMqNIUMLSfsBKucf_dH\L7VsDS1/lc[(=C0,uo5%mP^^!UP;Gp`up_VmcOfh0H[c>0D/qfnoq4,;7#mZL&DO2g29sAS?-=kljjc&jep<BQHcH$flAm4HRs!@]0#\#\)(k#g4*a:!-EQm%^,jogY%4Nu,:gBpSR\El*a*4NBcbPY*n^f@1J2hKrVuRuR8<P&77PC7Y,.R^Ft]W[Og)$=B=."KqrN$&bA2ju)VKUO<@*!^^&P6G%T:u6Q7b8Y2YGe>;`b_)hbI3r-4$\e<X_B[YS\1rf>*d"S]OS6MWLB[E9gs+@b]`Q3lU[ZuX),,bL8"hZWd3($H%QH>$Xi>%KBP(M%]VV$tng0c`c,T$^fmg8m1c92S/h<V7C0jh<%0reFGsg18J1>hGEFEgTT%?XQ$,C?jRb*M2Wp)\ML8M6$=kch'SMb4k4_A^p7KDGP%2AHlUH9bENX0rICl>67(!ZdYChIZ;152Ek[WmH<r"4D0]*r7\(B%hO\FT;r,b7JSp0I+iLf^'SC/Sg7&0?ZV,hK<p.Nh0;`M;k9@%@O#BXb3Q(%"pu8\hR6.[%.e"fMD3S"TXJ:XieGj_.:un1Tda8Y_phdi0K=b`Lg_2%[IT?Q6XpO:S'V2O(a;\)fo-\O;hDjT<$h"s%HD$q2HNb:u<$qZTMouo0"r_cH[1<EuL)(W"B')f\-&ARi2LqmAV'mgcQXZDPVD4BE]s+g/]?XHEI>0a:]!Vu8\Ea.CZ40h^!fW&4%_(Z^"B37#/I^*]WUX96f"WFe">V1q8@3lAM"li]O[)o=Xa^-Yt]Bq?rYaFhk1W?a??1JMi&IT^.:>,YSf`)JMK_SX"a<%Z+Q4"(<%&UtZF9j!-*h!,<WAV)D#X]&A\=N(@#?togS*+T/qcF^)#_gm4ReC'2SjH<2eE:2:_gE`/d"+L<pP:2a9pfoP*I9TrE!K>,>Rp_Ok%o5[rcf/?l.U\Q=(U/FR8O-6aqO>=[p$YbmB%#<)mf*;&+5g.M*?;NLQJiSj$#@WS_)+T%=3RhMKb2c$[OJ+.9!`[L8RcF$,OjFE3%nSpT</eDP3*+la?8NG?>;la@s.&$_-X@7^qG1-b0fS[qYU$.fWAt$X-k4%JP">U[NYf8ZAEXW8/FdZ3,/1XtgEJ6%!ZT&-A%-aL!%7oXX@;\qfC&a,,N>a5i>E)Cd7(mDpdfX>8Y@Cpg013qKSC@ICF@k>>TWhY>XQ>5*I[X^tc_mV%KZ"?+_ZVMg/WQLW9R>%]c<<i3Z%kDY[sS'TsJ0\$35@*8\P6[O`j-lt0[!FS8!l8D8*L0QeI-<H3-^1M7<c-1IQjTFc[(-"M0br_4#qmjsN"B3-R_,(j>]>L>P)3bGB%Rfl)8,/dK31>.,nA@GtI9I0`EOR:[KmK(E*EX6D@lo0T#8GrNE>_Yn)\LPa)!Q3WMHsAO2:m3A5.f5)W#C.:sNbq^#i%1nP2G"HY%#h'3?_[P!n__=S.;O=)92I'=YP"Z1($"hO`=O0MR!4&!u'Z7@Q_@DcLQ>9DjVG^en[\TQ>dA.dUQXCeE3/g[*>U+igZj)I#2:T@Y%N1"W2XcF4&>W.*fLE\5ne,bTMk#>=s0N5bP')F<=VX#XBYU!Ef'GphVfrPM"[UpEdj)`gV5=ZreE#A"fA_49qU:XGCA6Z&cWcB5G%&^W;@B"A2_5irWT/PROQiFj;3%EibtC=tXT.Ag+T"Ci?)`ulTV?%NA>JufEH"@a+XWdIN?Pbcs@m;R_5cJYb?#3hKnEJr)_J7e#V%7!9!93ug,fqc/J'?,Pf$VSif7j1NB8Zt\C@3j<__MrhGq_$"D\TMHH^G[NNKjg$ppYs@D-$,fe#4rMBA6/o]`s.LR%9<shk'OI8#%=ht;Q751+oMIg2n@VWQa@W5p(m/Y.^</rZ\2ZRGF*D9A?R%,NPDRTnX/XOd[@HL&k"rK-q;;6jM/asNMNa&:_lJ"!PYFurr[?3;&%^eHOUeM\G"RC9qCOlL*pB'?D^M%76X2Xrp&"'ga<eT0I'aI*D'C6keM(lmiD.a\c/0d[]!RRO:E_jK(c#c-00<-('O*(StNeR9C#%_+6FK_5aK+bYr1d)-#!`c<sn?l/$`;W4!t5ORn3B"UceXc\eH<R&S_c5L@5Ai']%sM$\=WrJ;9aNaRI!Uh-;ZXX`_TCk'@El[0X:%98@[I)+\K_^^NRhL_<C8UY'[&r/='q?oU3h,!m's'jfR9*$I-Y_D*1fEI:C!asP_EOn4BG9l:?[r5A:AX-`Dp8Z57;8(jtC>o0$o%=p4G!=l]GfXW.QJ`[ntH^,ugX[Xs-D3h@h2#tKl\R@n^+<&[L?8ht1AF/Yg9#/L_^4H<MNKUSpcd3te"K3<re-;`\g0NGHmarJJZ%Cg6"R1cVp<g)Occ\gD+GEkQJI2CE4kST*#QE?^Z(NASh@A+=#AIWCZ-6W55pFh,"i>IRAe'I_[X!c')iI%_QJGCh-/WalGo7BpOl%1XZ+G<="tBPF-&gHo;>QU&`FnJl/']80I78;`/ctHSKSum!YPg&HShKMSg/hMaRq/GR]GGctC:0,W73nO-W45<u#1k?Pi=]+Y.Dg%F>YGA[Fm<f>Cpn+FF]s"b9L>rA&0"=]0HX;@Odff!(l83_172U1E1#P+V>[W(DLdf':&O@>j/.@&OH+KLif(@k`%cb:RUPd\KmpW%72&n4WYc`1NfYX"+pQ>)$H`t&*`_1b,1[9:A")),Ks&F_+:=kOePl&K/oc!lr%M)3"De3k(4$nG]^Vsl!r_C]^iY<e%_=(2FI1B7%B^]=XktHdU7>O5=PK[VC1_hho(f2pfblG(@a`-o8H5d^>5qKRN\T?5"f==ld:u$7+L/J4a)E9YfAiV89"Uo/cg`2VQ)VcOT(.!.2%(g$VQ%+RaPRtu[t>r8!m@!.6#"RVrqbQ3D&lhXEk/7=`hEFI0_(t3poN1?mJEu`n8!GWb'\r;!Xc(U=k'LA1IDHrR8NUf`X35uBW%#oDZL"2Im)Z:9-R_AJ0P--Mr>BW=$3f?k&A;LG1Sd*h_nR=$'1isM]cD;'BW[_X4%?[C#*0%^71\Z^+9T44H'mE9'9!@k*\!@Scr%I$UYKp-;Ih)FLI@U_(f,TJkK;@&l2:\BZX5!p?(orK@/;0f.4c3":sF!apuT26l"C8Hm&C[RDK>EBtFOZ4P6Q;=N:''P0GECt7M*%LJj]>-8ccVQi"^/O<i(V;!1hR/I#?K$q=]'Ae>O5jMLWrW?aj6W,.s79-=[t2!Z!Kp3aiiT'5J#^a#hol'YrteW:&.+_cG;c@%Z?%?8hViALLKTFZ`\)QqJr?j(K""K+<k`>I?F[/5P,Q&4UR`K/)Ip,8cm`17q8f.`-#<!c4L6d)H:D1it3;G]UD)T^-!Bd,K!]<qR0#%5Y8-T6?=dPlO&E#$VDr"AK)")!EMQ4&chl*k8nS8;g;S)h%?NR[OZ+)L4Ca+U>5f$')-I_NK"uC!tJ!qA?]dZ0%Dkq_GiN2);4MB%\gdgm,:YPVj%I@,qbU9[qL]PD[[E__Wa\)\]pUE-/:Z`lb/H*FY\;anbDAsBFGjNnC,<\;/%2CX3-a3[Pc@ms+l)(oc6m:T\Ra-t%`A*`Z&j3hjWrQ`uf*@HK=VEJ1drkkVl+3Srr\WDHJ8,OX:Jp3?Bn5\IbWSMn!bq]]k^l\A/g.Z$"b]L*$4O`0:2ZG`WAoJY/LniD%HtaDh0d?(Q:7f+SJV&nlfn&j%o#pQ`D2Ed#7gr6+\uCK3GK@HL_'C4fTJ1dhrLuS^3;]PTR??F-hQXs9*H,.o;rQ4:[Z)FWXgf""%,7N[5THGB)Z?V"f@W6GT6E$R0i3a<C1ADtDKaT33J7sk>fr1`BT`f])S;N1R1/Nbb#%7rIVE#./`J.>N$7=BlKr%]I1t<<8"]#Rl%Xcf?;m^_JJ8B@P20+t/0f"kc!CqL%m;eq&[pdZ09@/qJl"Z09'i('7F_$4WWcjOYU$jMGFg1Us%'$Va?2l6]dCYPXRKM";:_dQ4@%6'qbO]Yd6LOXS#.#&Y:g38P'rAcl"Jo/Z)jc.b'K_rC9"W\D7G9@Y:)Dc:YSGJ>C7Ofn6j@Gg+d0R5Z>j<g[j2FjQX(q^t)@_?J9%Rii870Sh&P/OS$!F5]r;n0&3W3eT6SQpI+VCc"2MP+[CX)Nht$Hj[c5<6!`B`#UomLeG'^JeG:"!2?fWpZGP;"A72hJEc:T##-!.%B+)-h3lq#'.\g!=eSrs6Ot@H(6GNZP=.(A'-((A=8CtWn![*EnIZ"]CX&Klo46dbj=TELs>X5V4=4k$!QD\@LQu;HuL*JD\M1\)G%U2't>aieRQ,6d*CCo/^b1`QT<2c,nC*=FGF#%SZ.OJRq3Fr[8K\eDqS#?;QJ1h0G-!:"5gK9jJ>PlPl"NPih!(5,fp3SB$]f2>j'%kno(CRne8AAeEe8;6$=9[@&"3$-IEahRBL5*(KWdbg=pH>CuBjlR&<'0$-"_9sb2<"<c.?9O:qJB[I*0D-g+_F^EL8cr&)#j+p^N%o*>I:2O@-'!g^s%C`g+irRdPgRY8!]KXn\241@''$eqNR\6XXn#%d?+.m"HF6d(J#X6"<@-)/7EKj2=q,&K,8;?aA1H%Q=0Vnm[u%gu>#;Pur^mGQpH.oWKFmi#+7E"h]3`(i020.r+rXY^Zqs.G*Qo#JdhSf.tH`._;KB-t.N+L`s[uPRD,'#fESd!%C+n3LmsS*eQt^%!&J_#!:[t>S0Ap\<>JseI[Z"uj%tq#.;)%1S3PY\iuf^OTYrp^0er0LY8&Du#Y;4#cE.F.JjsAY[%o1R!6V'OKT%DXAf!JeM35>J%H4N>bMUNtP48](3#&5i'dWPm'/kD>XN"3!PKJIj#QYm42D?42jbas!+W&t:!KkMm,>9e1.AYFt(hftb:Cf$2u2NC+&PDV7B)i38-%I/T)s$>reB(ZFFW+^cMp1i3h",hJ*38e"/ge*V57Cr>'1K#(DUnMj(1WVE@.U"F=PTX5M&XIu>=jeAFr!]26S0dT@:R&+LH_=2!B%9!q6T"&s7o3_a6&V#oqiXsnYJ_0q0VkQJeU@;VZ!/Q`Qhh\NVtWYjFo7N8os!6,]f;He0%Z(p!VX[C!f5P,cEI#P",#%/Q5Cp18X%[9SE0c/aC@0Gf0%fXInj3RBK4<Rb&D_@NDL9B@sO9T>Aq*RrVIedsXu_t^=$BjlZfWYff-0G6>.aJ)\qI)9Yt\1*/F3Yl'k;oB4j%'I3RL9iZ0m$kN1G#5$ikGah/u3Lf#m+EA%>O^Qc$Gla;A70A9$=ri6#7L1eD?I/^%.YCF'Go9po&'/.+$#.]iR-b_KV[6#&#j.$&%7Q*Zd_S@N.^71YbBO_(1AdL;U>Kqd,1qJD^/89(`JQal5g$9L'L4,!6Y^9ap/<&#c3R]Z>aWME)^Ca/K*J-#JKbGP4:,I;/)/q''%-7BNsVJ)/q$#F`f"u[Yqj!3P'@aRK2(m*_Gl.G42`p),&JJ\i;1.1N@%hicX$VZG@('XOXN,<mtg@1[OZ2&c\WZ:,tY4Dg,aq9En%E'D6KbVmlQ_A18V'EG.ub)tgO]Gn^E5nk6;3>."Qm>.3_(1#BDZb.lR;kgC]U/uF_,L+r.2eE;)%Zn72/g`,R<(?<Vc.=,]dE*%E%6jI'4S^&FY)q3omDcs(i%iS4pF>7IHiPecMA/<o'*/dH1)f3Y.9K,X><#/;Bp,csVJqF.>&X&-2ag'/k%O"kQJ"98lN+G6fh1`AY%L1V&l//&;(;hbT5D^oM+,l!'.0':8SY$ik7;78g3%\2AZ%l'bqUWs<2TIG7DQ=@DXW,52u3GTH9WU]ol1o^3LOH%*'aGAHY[bhHM%D*Bidb9WI-Z&15A'g3;qH/g%!<Gd;6`nPmND#T6'LHGtN6Vdj%FP@G?WSqgO3ttse'@Y=STn=.aiG2-GE=d;0W2`9?4:[)!i;ZeW%^5M2-`9m[8Ln88kr<rlQ>SWFXTa3(o>aSf2F!t79N,8gt.9s<V%jV.-*J3`Z!@Uml/1QKrE[7MIBqi<nSI7:HG49KU]$'1=7a<4e%]db:Nae/`SZ=E25$ulK#FNXrVe.pLG/SZ8<MQQJ)\uP1,gbB3i1G"<c$e?+930PPp!*L:)\A2RY<Lq1O/)Ume$PIFR,Z/J*'!NB"%T>>tFQt`L(mM`[1M?,GYM@Z7/I<:Nc<^?#'^KiSLOFRO/C-hZ3J9iJKB_rt^%8[\LXtA4ddK`&(K&oX!UC*5g)Hor<R&X#6PRKFj%=MtCIi>NE`8=c,QSt`C-HaXBGI=T-j#fCm>::Oa_(ns^8&*$NJEWq0_Um;'#Cn\X"I>AQ$Wd8JlE8)Ch7lP]b`B[o@d*3G]%Ep/9%dq)a<`?g^\Yl[L".VE4C.578t9neKIh%2+(G`!r-UhZ-alJjdT6X?:ZiJO-/a?"<4?$:L>K*5+)n-*8pZ;`n(.b0R[VMc>mlNnTt%3mT!pV]7!(I3bKI+B0^o1'D1^]T/m7&?eFoSutp3&&NR)(E>[)6jWkTToJ")2Y#,uJq*"V5Z]B'#\!WjK#)8WFEN+3Ubi/li;@./%NI2$<dm6OjA/pIkZ(<H)&u@pPLgc"W5hi1V/;ie'0K`%-;IDRNo?]c]iXm%f"mD&2c%DWFJd6gd7s3HOBYstO8PrR#R\td(9B8MB%]):c?!Rj2C?A?T1UPOQ#(at%VOGPVXktmd5F;tI>b,XG6N)&VGO9W82&KPt`$;3q1\DWOEK1-e+PUTF#+Y:2S*0l%qNE=(>N3_:g%Q4mY>>lY:s`I&NRon&p7P+'JTJVG2#LkKdf&E/?rBZ/E>atUe,c,rGX;*pZRiOGmWnOC8m"c%+(]G)Sa(=Y^eL("4$%0<"/\U#Mt%Xr[U;a6ea2<!Lfq1<E?dC*C>!`/Wd(80$-'*9e#sLKeUPd'!t.\_rs8L&):RLsbo.[qp#JTr)%Y*iA6#0[6?A&+=GSp/4,N>1$0H%)[<*)3&@@u2.Driih<;*PKO,_\I,/LW4nr0!D9#>",m<E:g$XL$</m.F9u,;,&1$[f8@lJ@r)fe'F00^Of!1:,qP^3jI0Clb!Nr#%gqqPF3!Ib?iH7sVaAQ!\#?<5.NAsrga2>b#A5^GZ4t^4]Y6r;s$AYm7f;<T&q.=$[L?_Z=,:Op4`_^65:2*7I61l:,Qj4#o$N3Q,%-bQ/aA_OANjc'R"KP<f\&9b+BgjHLe`uD@c#k%cBQ&R>eLX?&84G1KG;O/)3Ns^q;#0b^dIq3WK$*+bUKZ^M$mNFt^`f6^aWG13E%fp&]Fk.$*gY'=d+5o-<KW"tFg5kA=BGlU*:L;cep[LC#HN`d>!9a&m!49e'*7e':TebBR3<*eZ5`<+\"6#/cR"6YiIW9lqqnWZX$%l"^jS0mSBU;4$TogQ>VQ!G,:4B*$%"D%C_SMbfcjNP$5Lcl?QZKL7/O0YF2s@n@[TEm5_S)mlUH`^uZZdc?Qtl5mBIo!QIS7I&W.%4T\V3r=_Z"g,@?CY*.`G#(k"^$j1M]VRW'>C>6ZF&.,1Sl?4R];M.>@P?4Uu@8,OdH13J-$oJ?rl'=pSL'Qd<I8-rB_dru3)QEoq%/W57SB25rN>)S;KfRu%^[lI!s>T?!R7Qh'>&2)bgl'8T"9FS@A>+W+l]!WrP%V_=a+<-s?kX#=XglO`X#h'd2UNms(PFnL:K<-br%<.#l20!K/41@i/i$c"+^%7-"`E#;$r;7nPp%7Uk_^mFP=fkaN>BX96u&m>EW24_o"2J-mh8PqsC`kVnV&I`PIH!i+lQ7s)9A;SA`%;^$N](]IACUSTh;]pd)&+eB#SJ70o9e<ZccTZ6bTBT\A(T^Xo*>B>Hp#SnEKRoD!3WSu5AcA#PLj8_Q1__<8k#sETij*+cg`6iK.%0V1Q;G+t[LBk_Qi_I8s5("3MT[!9;+[:jRt,p-"AP%\sU\B2RE_T3Kf84B;%c/dR\>/I9e)DOR>p1&eYL`aUb^?s8o&^ggA_MqMj%EM,")$J%[h`W.&6A7-V^"LdJY^Nq/%WZD17)0"QjjoB+IhLVL6jd?1C2*uPHJf@DiM@nE'</8gAY-\1&a%.(<kOGR>f+1`!@#Hfh%VG@6>66Cd]g4mGudp5'AG9Bid'dH7ciD+\(Cf[q'+eM9dFnn3'2`3R4%h)/r?<KNFSmqpXFJ0k:D)8%+%E]4&<hd*#(pmf#PYI#Z%5aXk*,6fqToS,ZEQ%K2K8I[@A?<cCK2L-i6`^2[H08ZPaiXeJW8-LA0%A5$S.YT8D!6?L:-tLX@kSSNZbmT@p!#+&RN7W@9MRV5L%63V#6!0eqcOLrK)&;[<Q@^034pjdPPOq=.[8Itt_++Q%Lc6\ih;d_CN>gX;g6[*X4+\J?F8S[I"L>XQ1j:`>%(PZ"*1a>g!nN7?a%XBb&2jJN+hA6W_a!6A"sb*f)AUCTt-r?0>VQ9e#*(PH5-.-NVrl[l7@gHMh]"DWBN<\H9)BAl_tfXhu7^=01AFpeW!Z#"0"-6f,$%B"Gj9PGAdgP)3h`OH3q_*d)51+2$?^BN'#TgS-0%7pZq*13lk,M?0ZXl^Tg-,nuFCL:`9NPBfcT@KIt@H=@W1R!*b5r:U+u>df!;%g2%+$AhZ*fjHJ/.Jg09G_YuA^Jq[6^6Q;.Y:D#hLh2oJh)e:C(<e*KH6"iW?qNn9OhRjKOC)f'qi+@_*nC-YTCrJq@!6#@nQ(m%G%h$QN$NdDP5?=6GHA4Ki6LM77S?ij.uEkuF-:jgEu8Rcu7VODHpTON52cFZpskQ#%K/mon!>_VBKe)J9phuY9Z.2qJ@(hjI1Xh#(\%WS.snCKo_cZ\'PU*\iU*C-)(5C^J;G]pO\nq_eVK6$PV_-NI(%<#i_-m=6ga\csIh,7HpKYdV$Scln<A-1Rdm/nBNloDf;ODFr@#%:n=pH[7FAWkR\<ACQihX@.Mfd]n(5-)'D-Y2p3R9Q__E??um/@Te(d%2$sp`-TD;YMOHn'F6G"`mS0Eq1Q5NTgVH1'\`cT)0BUW@%6e!$GLuM=e[cgd;l9U:a:#;OPBN3>Yl1u>QqCRn%O7PA*=m)7VOrdn]"h5.tCXT=YJ4%ekJhSe&';f=`,gYC\%LlV$2BJLU\N#+D%[J9,J3$<5\)!Dm7EB>e4&Mj-<C3pfC9/uuW19TY=F1FsM&i4"f0W-eVJrh)D-3p>(4P9b&Ms<?n]pY0:YXs!pe5c=;R,qagq7T(/%&EI7E#]roPe)5(l&W?rMpk;'r`GtCiaA]H,[\<<_=ZTnY4JF4/cj4=ia9muU1t'2L:nDN`kfe#e:/aj'WLWZuh3)/tg[SGR\YS=m%jTCMu,!SQjUbj"h@2;,=Y0Z7JCfQHeC6md;VL(9gR*;`t<2CflhP.lj;KHu?b7F#8?nfJ1Op:PIQX@\.J8:9Z6V\Yp(KCi:RtI_/%4(o8Mja[`$ScOLY^FJARE.NutKH@`dJkj\ra7^Jc.13g4"$:[+9ota(Y!#b=Is4kK/,6MlG^#T$%]ol@&V0-NhKIH]Fi/]%[DIH9%-4DF.-4aK^,.Cs-T^/'sE0lfC+eo(::-MW!MD-5mK\:U1D*Tc]L>)f(W/&/8QGH4WDZaAa\r&1Z>bD)HGr[uqj0]m@6XVW%8*.54%.<pU^*e)gt\Co0'(:i`DCR^RU!S]IY&HP:i!]g0P/-s.ZH!LHY.:elnETgfQ->tJq:o?)k#T;d`ZS4bX\kfg1_%#B/6V0!f$'eO&%5_eDn0G1\M.]*>##GJ`4;YM`FY>GOn6!!%9-E]q\<ZK96fYk!1%nbl)D*Bof*hq370`"i56.:4i\qSfh&C!Soq$BoS0Kb^4^`;V4%65dr,P0$?p4LFPGq]c-=fc5ZJYCaFVS6Q`l=?(7X7?[u[ZZm(:qDuIf[4sXX<tV7H&,=f^5Y7l@p-k0rNP[Cr=D46bZk8/g'KS,@%#3D$cRWkcd(I2G1WrP%g+?37&d'"N#PoGO2L*[.`&?l;Rlh*S'N+VhZD5)--BL]T0;a(Q\J07H5)qoI(:5>P6q^MK5$3^^\+sEk>%Z5`aobifJEkCH%9=P!X9gn?,R-g4:=+jhZ'Bn0)IVl.5"q,X8Pd)\>cZ(<NWji#u65"$c:%>$:H:":so<k?Y?ne2bJ>ln"Jr2rA8%.t./\OC6EIe<3(Y(C^W%;F>3',Dn4;#,5_kTm@.NVGllM+AUWe<R2iOh-MN4*O<%o\E8qc/j+?hI.JY8d-mq)'pQiY&^;2eI]Gd'%TLES"EcX@o,g\3"<AT1,qBa\K#/_+W7UZ=[j$g_-GD!U7J8g<SnLIpkk)GB-k6U\I($2)<8HPH$4ao]1[lln(DcN)IGhn%rbDGA?%hL5p5?[mTT6)D'(n9h9680H^?[R_*oDI!\O*=RLNHact<kIT\Z9X6U.5ZRA3nW[K[$uS072&60@]VYh=q'iSuRap/lj`fu#c7<Nt%Zkf6K2$sA?(Jc::pWIl4iuK!eVL,'a".*+<gsVPg(?R7$N4hQ$TG?5MK@F6&)n\nRk>.cI>,W+Zn&-<)=3(Y*@t]/jre@si7Giqb%#A94hhgDkOfko?10A3o'mB(-roDPE6X[#ap'O+QX]RqtD\>WCGE,2nO4a@!?[Cb,Zen=Tb_uAnD>OPO[ffOFVCrI4*W5#ugH/!:L%&(CO-psNMR+1u/";kFq>A':0R^UhifhI=e_Dpu\b]?P!$rd/oNPKTLs?><j%Q$T4VcFe6KJ(:iiAeQLtqd<d:0C;r@gM5?GS_)H-%!5balijmk4BdrY'!Rjo7%0~>%AI9_PrivateDataEnd