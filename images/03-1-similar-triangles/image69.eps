%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: image69.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Nicole Clark
%%CreationDate: 1/10/11
%%BoundingBox: 0 0 174 120
%%HiResBoundingBox: 0 0 173.9971 119.2480
%%CropBox: 0 0 173.9971 119.2480
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 88 8%%BeginData: 4490 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDACFFA8A87DFD7DFF7D277D52FD7CFF527D7D27A8FD7BFF7D277D%27FD7CFF527DFF277DFD7BFFA8275252FDFCFFFD81FFA8A8FD7DFFA8277D%FD7CFFA852FF52A8FD7AFFA852FFFFFF52FD79FF7D52FD04FFA87DFD77FF%7D52FD06FF7DA8FD75FF7D52FD07FFA852FD74FF7D7DFD09FF7D7DFD72FF%7D52FD0BFF52A8FD70FF7D52FD0DFF52FD6FFF7D7DFD0EFF7D7DFD6DFF7D%7DFD10FF7DA8FD6BFF7D7DFD11FFA852FD6AFF7D7DFD13FF7DA8FD68FF52%7DFD15FF52FD67FF7D7DFD16FFA852FD65FF7D7DFD18FF7D7DFD5AFF7DA8%52A8FD05FF527DFD1AFF52A8FD05FFA8FFA87DA8FD4FFFA8F87DFD04FFA8%527DFD1BFF7D7DFD04FF7DF8A85252A8FD4FFF7DF8A8FD04FF7DA8FD1DFF%52A8FFFFFF7D52A8277DA8FD4EFFA8527D7DFFFFFF527DFD1FFF52FFFF52%27527DA8A827A8FD52FFA852A8FD20FFA852FFA87D277D52A827FD52FFA8%527DFD22FF7D7DFFFFA8A87D27A8FD52FF52A8FD23FFA87DFD57FFA852A8%FD25FF7D7DFD55FFA852A8FD27FF52A8FD53FFA852A8FD28FFA852FD52FF%A852A8FD2AFFA87DFD50FFA852A8FD2CFF52A8FD4EFFA852A8FD2DFFA87D%FD4DFFA852A8FD2FFF527DFD34FFA8A87DFD14FF7D277DFD2DFF7DA8FFFF%52FD34FF275252A8FD12FF7D52A8A87D7DA8FD23FFA87D527D527D525252%FFFFA852FD33FF27A8A8FD12FFA852FD04FFA87DFD23FF7D277D7D7D2752%A8A8FFFFFF7D7DFD1BFFA8FD15FFA8275252A8FD10FF7D52FD06FF7DA8FD%22FF522752FFFF52A8FD05FFA852A8FD17FF27FF27A8FD15FFA827FD12FF%7D52FD08FF7DFD22FFA8FF7D7DA852FD07FFA87DFD17FF7D527DFD17FF52%52527DFD0EFF7D52FD08FFA8A8FD22FF527D527D52A8FD08FF52A8FD16FF%52F8A8FD28FF7D7DFD09FFA87DFD23FF527DFFA8A8FD09FF52FD16FF527D%FD28FF7D7DFD0AFF7DFD32FFA87DFD14FF7D52FD28FF7D277DA87DA87DA8%7DA87DA8527D7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D527DFF%FD13A8FFFD16A8FD12FF7D527D527D527D527D527D527D7D7D527D527D52%7D527D527D527D527D527D527D527D527D527D527D527D527D527D527D52%7D527D527D527D527D527D527D527D52277DA8FD1C7D52FD0A7D5227FD54%FF7D7DFD1CFFA8A8FD09FFA852FD56FF52A8FD1BFFA87DFD08FFA827FD10%FFA8A8FD24FFA87DA8FF7DA8FD1CFF52FD1BFFA8A8FD07FFA852FD11FF52%F8FD23FFA852527D527D27A8FD1BFF7D7DFD1BFF7DFD06FFA827FD12FF52%7D7DFD22FFA8277D7DFF7D27FD18FF525252FFFF52A8FD1BFF7DFD04FFA8%52FD12FF52272727FD22FF7D27A827A8A827A8FD16FF277DFF527DFFA852%FD1CFFFD047D27FD13FF27A8FF27A8FD22FF27A827527D527DFD16FF52FD%06FF7DA8FD1DFFA827FD14FF7DFFFFA87DFD22FFA852A8A8527DFD17FF27%A8FF7D7DFFFFFF52FD1CFFA852FD59FFA8277D27A8FFFFFFA852FD1AFFA8%27FD5BFFA87DFD06FF7D7DFD18FFA827FD65FF7DFD17FFA852FD5FFFA852%A8A8527DFF7D7DFD15FFA827FD60FF527D52527D52A8FF52A8FD13FFA852%FD62FF275227FF7D7DFFFF52FD12FFA827FD05FF7DA8FF7D7DFD58FFA8FF%2727FF7D7DFFFFA87DFD10FFA852FD05FF527D527D527D7DFD56FFA8FD05%5227A8FFFFFF7DA8FD0EFFA827FD07FF7D27275252FD58FFA87DFFFF7DA8%FD04FFA87DFD0DFFA827FD08FFA852277D7D52FD62FF7D7DFD0BFFA827FD%08FF527D52277D527DFD63FF52FD0AFFA852FD09FFA87D7DFF7D7DFD65FF%52FD08FFA827FD75FF7D7DFD06FFA852FD77FF52A8FD04FFA827FD78FFA8%7DFFFFFFA852FD7AFF7D7DFFA827FD7CFF527D52FD7DFFA827FDFCFFFDFC%FFFD05FFA87D52A8FD7CFF7D277D27A8FD7BFF527DFF7D52FD7BFF7D7DFF%7D7DFD7BFF52527D277DFD7BFFA8527D7DFDFCFFFDA9FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2011-01-10T11:12:48-05:00</xap:CreateDate>
         <xap:ModifyDate>2011-01-10T11:12:48-05:00</xap:ModifyDate>
         <xap:MetadataDate>2011-01-10T11:12:48-05:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>176</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAsAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq8fv/wA6/Mtjb6zrD6Nps2g6Nq91pMsK6i6anKLW5Ntzhtmt/Tdm+0sYkqemKvYMVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVfPmp&#xA;flD5su180afH5N0Rr/V9W1G/0zzrPeLHeWq3Vy0sEirDbPcc4gQVAl64q9+tIZYbWGGWUzyxxqkk&#xA;7ABnZQAXIG1WO+KquKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2Kqd1dW1pbS3V1KkFtAjSTTSMFREUVZmY7AAbknFWGaX+YGo3WvWbXenfUvKmtVt9A&#xA;1GXks81ygLgzRtT0o7mOptwfiPA8qc1GKs3xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVRvb2zsLOa9vZktrS2Rpbi4lYIiIgqzMx2AAxVhltp+oed&#xA;72HU9Xje18oQkSaZocqlJL51IZLq+RtxGCA0UB9mk3+EKso8xaDY69o1zpV7yENwo4yxnjJFIhDx&#xA;TRt+zJG6h1PYjFUu8l67fX9pcabq4VPMOjSC11VVHFJDx5RXUQ/31cR/GvgeSdVOKsixV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVD6jqNhpthPf386Wtla&#xA;oZbi4lIVERRUkk4qxCw03VPON9Fq+vQNaeWrd1m0bQZQVkndDyS7v0PSh+KKA/Z2Z/joEVZvirsV&#xA;Yj51srvTbu3856XC817pcZi1W0iHJ7vTC3KWNV/algNZou5PJB9s4qyixvbS/soL2zlW4tLqNZre&#xA;eM1R45FDKynuCDXFVbFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FULquq6dpOnXGpalcJa2NqhknnkNFVR+snoANydhirE9L03VvNl/DrfmO1ay0a1kE2h+X5RSQs&#xA;prHeX67j1f2ooekfVqvTgqzbFXYq7FXYqwvRKeU/Mp8tytx0LWXlufLjH7MNxvLc2Few6zQj+Xmo&#xA;2QYqzTFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqhNYvbix0m8vba1e+&#xA;ntYZJorKIhZJmjUsI0J25NSgxVjfkL8yNO88Ce70S0mOiwxQkapKOCSXMqB5LeNCOTGAELI3QN8I&#xA;rQ4qyPWNY03RtNn1LUp1trK2XlLK1T1NAABUszEgKoFSdhvirGNH0vVPNF9beYfMlq9lY2zibQfL&#xA;s32omH2by9Xobin2I+kXu+6qszxV2KuxV2KuxVKvNHl+HX9Gm095Wtp6rNZXsdPUt7mJg8M8df2k&#xA;cA+42OxxVDeTfMNxrGmyR6hGtvrumymz1m0QnjHcoAeaV39KZGWWM/ysO9cVb87+dtA8l+XbnX9d&#xA;mMVjb0XigDSyOxoscSVHJj4eFSdgcVQV/wDmNpFp5kn8vRWGpahf2nofXGsbR7iKD6yC0fqyLstV&#xA;HLftirKsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSrzVo17rWg3WlWepS6RJeA&#xA;RSX9uoM6RFh6oiLbI7pVVf8AZrUbjFWPeX9C8vflb5c1QNqDQ+V47hrqxtJQzG1EwUNbxNVnl9Sa&#xA;rItOXJqb4qraNpGp+YdRt/MvmW3a1htz6ug+X5aE2tRQXV2ASrXbA7LuIhsPiq2KswxV2KuxV2Ku&#xA;xV2KuxVh3nCGbQNUi87WKFoYIxbeZbaMEtNp4YstwAOslmzM/vGXHXjirB/zy8nedvMVnqOr6Utn&#xA;q+i2+i3EWlaaDPJcC4uY2WW5gjhR1mmeIiOL4tgWp9quKpP5x0vWYNa1e6tNL1u1/MrULrT5NL1D&#xA;TZb6XRZnWKCKR6oIrdIUjRkmW5HKgqDQ7KvoHFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FUv1/zBpOgaZLqeqziC0iKrWjO7u54pHGigu7uxoqqCSemKpDomianrOpw+ZvM0JgkgJbQ&#xA;9DYhlslYU9aalVe7dTuekY+Ff2mZVl2KuxV2KuxV2KuxV2KuxVplVlKsAysKEHcEHFWG+VmPljW2&#xA;8mTArpcyvdeVpTuogU1msKn9q2LVjH++iB+wcVZnirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdiqXeYPMOlaBpr6hqc3pQhljjRQXlllfZIYY1q0kjnZUUVOKpHofl/UdU1KLzN5phC3s&#xA;dTo2jEh49ORv22Iqr3bj7cg2QfAm3JnVZbirsVdirsVdirsVdirsVdirsVSTzf5cOu6R6EE31TVL&#xA;WRbvSL8Cpt7yKvpyU7qalJF/aRmXviq7yl5jGvaQLmSH6pqFvI1rqtiTVre7hoJYie43DI37SFW6&#xA;HFU5xV2KuxV2KuxV2KuxV2KuxV2KuxV2KqU93a2/H6xNHDyrx9RgtadaVPvircFxbzoXglSVAaFk&#xA;YMK9aVGKqmKuxV2Kpb5g8w6ZoOmtf6g7BOSxwQRqXmnmc0jhgjHxPI7bKo/VirFLHyDea5qK+ZvN&#xA;txcx6tyLaVpltcskOlxOvHhG0XEPOy/3sv8AsV+EbqpxDcatoWqWtlf3TajpGoSGG1vZgq3FvOQW&#xA;SKYoFWRJKEI/EMGoDWtcVZLirsVdirsVdirsVdirsVYR+bXn258maDYXdm1ml5qOoQ6fDJqHqfVk&#xA;EivI8knpH1KKkR+zU17YqxXUvzG/Mi28jSecLW/8p32lQozPNbNfyiWTmEjghC7mV3ITi2/I0xVk&#xA;Hlny/wDmNca7p/mLzFexWskkay32l2k9yYYw1qYvqQt2LQELMwnM/wBvkOA+DFUb5nB8r68vnGGo&#xA;0q6Edp5piFSqxL8NvfgDvbluEp/30an+7GKs0BBAINQdwRirsVdirsVdirsVY3Z/mH5WvYdFktbh&#xA;5T5guJ7XTIhE/qO9oXFwWSlUWIxNyZtht44qyTFXYq7FXYq7FXjf52aNPrH5heQ7KHRLDzA5ttbf&#xA;9HarIYrYhVs/jLCOb4l7fDirOvy40CTQ9BktZdA03y5JJcPK1hpEhlt2qiKJSxig+NglD8PQDFWV&#xA;Yq7FUr8xeYtO0DTvrt7zdndYbS0hXnPcTv8A3cEEf7bv2HbqaAE4qlHl/wAr31xqqeafNAWTXuDJ&#xA;YWKNzt9Mhk6xQ9nmYf3s3VvsrRNsVZXirHvOUqPFpWnJ8V5e6nZPBGOvCzuY7uZ/ksUDb+JA74qy&#xA;HFXYq7FXYq7FXYq7FXYqx7zjpnma7hsLny5PaR6hp90Lg21/GGt7iP03RojKI5ZYG+IMskYqKUII&#xA;NMVYVpv5VeYymlfpS4sSZPM8vmnzDbWxlEAk9Flt4LVWT41WZY3YvxqQW67Yq9WxVZPDDPDJBMiy&#xA;wyqUljcAqysKMpB6gjFWI+TZptC1KbyRfSF0tI/rHly5cnlNpwIX0ST9qSzYiNvFCjHcnFWY4q7F&#xA;XYq7FVDUL620+wub+6ZltbSJ552VHkYRxKXYhIwzsaDooJPbFXlv5K+TpUv9Y84XizLbXt5fx+VL&#xA;S5jaJ7bS7m9ku3f0nAdGuZZOXxDlwVMVes4q7FXYq7FXYqkfmbyP5T8zvavr2mxX72PqC0aTkDGJ&#xA;uPqcSpX7XprX5Yqr+XfKvl7y3ay2uiWSWNvM/qyxoWIL0C1+It2AxVNcVdirCvMP5X2+teaF8xnz&#xA;DrFhfRRehbRWk1sIYEIo/orNbzFGk/bINT8tsVW/8qz1D/qefMv/AEkWX/ZJirv+VZ6h/wBTz5l/&#xA;6SLL/skxVD/8qkc341A+c/MRvRF6AuDPZFxEW5FAfqmwLbnxxVEf8qz1D/qefMv/AEkWX/ZJirv+&#xA;VZ6h/wBTz5l/6SLL/skxV3/Ks9Q/6nnzL/0kWX/ZJirv+VZ6h/1PPmX/AKSLL/skxV3/ACrPUP8A&#xA;qefMv/SRZf8AZJirv+VZ6h/1PPmX/pIsv+yTFXf8qz1D/qefMv8A0kWX/ZJirv8AlWeof9Tz5l/6&#xA;SLL/ALJMVd/yrPUP+p58y/8ASRZf9kmKu/5VnqH/AFPPmX/pIsv+yTFXf8qz1D/qefMv/SRZf9km&#xA;Ku/5VnqH/U8+Zf8ApIsv+yTFUq8w/lBq11bJeWHnLW5dc00tc6NJeS2jRJccCvF/TtkfhIpKPQ9D&#xA;0PTFUf5X0ufzBosGpQ+adcgkblFd2ckliZLe5iYpNbyUtftxyAqfHqNjiqa/4K1D/qbdb/4Oy/7J&#xA;cVd/grUP+pt1v/g7L/slxV3+CtQ/6m3W/wDg7L/slxV3+CtQ/wCpt1v/AIOy/wCyXFXf4K1D/qbd&#xA;b/4Oy/7JcVd/grUP+pt1v/g7L/slxVKLvytrDeadP05fN2tLbi1uLyYiS0DM8bxRRr8NsAV/fMSG&#xA;B3piqb/4K1D/AKm3W/8Ag7L/ALJcVWT+ULqCGSefzhrMUMSl5ZXksVVVUVZmY2tAAOpxVj/ka38y&#xA;61r66/Brupv5Ntgw06K+9D1NTdlKG4KpBCUthyrED8Tmj7LSqr0vFXYq7FXgGvfnGLP85TKPMMUe&#xA;gaZqFv5bu/L5lVWlM8bm4vzGTX/R7l4o6gdFfFXv+KuxV2KuxV2KuxV2KuxVgf53eZtV8u/l/c3e&#xA;lPNDf3NzaWMVxbIJJo1urhIpGiVvh9T02YJy25UxVh+h/wCJNRstc0t9Z8y2L6FcW93qOgyi2uNZ&#xA;e3mt3MUFtqEUzIyXEi8+WzKVZKgb4qzL8lte1XWvINtcavcvc6pb3F3aXYnFLmEwXDokF18EYM8c&#xA;fFXIWhO+/Uqs6xV2KuxV2KuxV53efnAyrqOoaX5Y1PVvLWkTS2+oa5bfV1XlbnjO1vbySJPOkTAq&#xA;zKvUHjWmKozUJ4vLfmGHzPbMP8NeYjDDrRFQsNy4CWl/Q9FkBWCb/nmx2VsVZxirsVdirsVdirsV&#xA;SPzFZagl3Za3pkX1i808SRzWgIUz2s/EyxoTRfUDRo6cjTam3KuKqaef/KHEfWdTisJv27W+P1Wd&#xA;D35RTcG+HuaU98VY7FFcfmRcJcXCPB+X0Dh7W1cFH1h0NVllU0K2SkVRD/e/ab4KAqvQVVVUKoCq&#xA;ooANgAMVbxV2KuxViNv+WHluL8v7ryNI1xc6XfR3KXd1MyNdSSXcjSyTs4RU9X1H5KeFBQbbYqyf&#xA;T7Q2dhbWhnluTbRJEbmchpZOChechUKpdqVagG/bFVfFXYq7FXYq7FXYq7FUr8z+WtK8y6LPo+qo&#xA;72k5R+UTtFKkkTrJFJHIhDK6OgZSMVYkPyX0L6xJqTaxqz+ZHuEuV8yGeH68npQvbpEtIRb+kI5X&#xA;HAw71qanFWU+VfK2meWdJ/RunmWRXmlurm6uH9W4nuLhzJLNNJQcndm6/R0xVOMVdirsVdirsVeP&#xA;aJL+ZXkrQL7yZo/lSbVL2C4vH8va2JrZdOeG7ne5SS7MkscyPEZ+LIEJfjsd64q9TbT/AK/on6P1&#xA;tIbs3Nt6GpRopEEpdOMwVWLMEYk0BNad8VSDyTf3tjcXPk/V5mm1HSEWTT7tzVrzTWPGCYk7tLFT&#xA;0pv8oBv2xirLcVdirsVdirsVWTzwwQyTzyLFDEpeWVyFVVUVZmY7AAdTirAIorj8yLhLi4R4Py+g&#xA;cPa2rgo+sOhqssqmhWyUiqIf737TfBQFV6CqqqhVAVVFABsABireKuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KpZ5luNfg0W4k8v2sV5rB4raQ3D+nCGdwpeU1B4opLELuaUGKv&#xA;JtC/OTzbrt5H5c0eXSNQ1S61OWysfM0MVwNLktrayF3cSi3MrStJGzLHRZeLMa1oDirILG68w+a/&#xA;Lo1pILaLz55Q1G8sytuxFrcS2zmOe3UyFnWG8h4kBzVGKsalMVZ55f12w17RrXVrBiba6TkquOLo&#xA;wPF45F/ZeNwVdexBGKphirsVdiqyeeGCGSeeRYoYlLyyuQqqqirMzHYADqcVYBFFcfmRcJcXCPB+&#xA;X0Dh7W1cFH1h0NVllU0K2SkVRD/e/ab4KAqs3n1PSrOe3s7i7gtp7k8LS3kkSN5CNuMaEgt8hirv&#xA;0xpP6S/Rf123/SfD1PqPqp6/D+b0q86e9MVReKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KpV5o0/WtQ0S4ttE1L9E6oSj2t6Y1mVWjcPwkjb7SSBeDU3odt8Vebr+Ufm8eZpfP&#xA;q6lpsPnVrmOZLWO3m/RhgS2ktXgc8/WLyLLzM1KggDiQMVZz5B8qXXlzRriG/uUvNW1K9udT1S5h&#xA;QxRNc3cnNhFGSzKiLxRasTtiqXzf86j5uFyKJ5b8zzqlz/La6s/wxyU6LHeABG/4tC95DirNMVdi&#xA;qyeeGCGSeeRYoYlLyyuQqqqirMzHYADqcVYBFFcfmRcJcXCPB+X0Dh7W1cFH1h0NVllU0K2SkVRD&#xA;/e/ab4KAqvQVVVUKoCqooANgAMVeHfn3YeW7nTfM15p76ePMVha2cuvPemUXqWMTNLbppksnKOGW&#xA;RuQVo1IL9RyxViflWWYatB5j1W20u7mufPMtm1k8MsetxXEtyyQzNdLMnH0UKj6uY/T9IVOKvp7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqg9Z0fT9Z0q60rUYvWs&#xA;ryNop460PFu4I3Vh1BG4O+KpH5J1fUGW68u63L6mv6GUjmuDt9btXB+rXoH/ABaqlZPCRXHSmKsl&#xA;nnhghknnkWKGJS8srkKqqoqzMx2AA6nFWARRXH5kXCXFwjwfl9A4e1tXBR9YdDVZZVNCtkpFUQ/3&#xA;v2m+CgKr0FVVVCqAqqKADYADFW8VSvUvKvljVL+31DUtIsr2/tP95bu4t4pZoqV+xI6ll69jirZ8&#xA;seWzra66dKtDraKY01P0I/rIUihAm48+hp1xVM8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVYr520q/RrXzRosJm1zRA5NslA17ZPQ3NnU/tMFDxV6SKvYtiqS2w&#xA;n/MySK7njkt/y+iYPbWkqtHLq8imoknRqMtmrD4YzvKd2+GgKr0NVVVCqAqqKADYADFW8VdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVQeqazo+k263O&#xA;q31vp9u7iNJrqVIULkFgoaQqOVFJp7Yqu07VdL1O3+s6beQXtvWnrW0iSpXw5IWGKorFXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq84/Oi30+5l8&#xA;iQajFFNZSeabYTxXCq0TL9RvNnV6qR88VS/ytb+W7X88tQg8opbRaW/l9W16LTggtVvVu1W05rF+&#xA;7ExgMvvxxV6virsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVS/W/L2ga9apZ65plpqtpHIJkt72CO4jWQAqHCSqyhgrEV9zirejeX9B0O1Npoum2ul&#xA;2rMXNvZQR28ZY9W4RKq1xVH4q7FXYq7FXYq7FXYq7FXYq//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:B3CA81D83C1EE011A1FA945D255D64F0</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:B4CA81D83C1EE011A1FA945D255D64F0</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>92.000000</stDim:w>
            <stDim:h>36.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -119.248 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 119.248 li
173.997 119.248 li
173.997 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.749991 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
139.747 66.416 mo
139.115 67.3672 138.748 68.5117 138.748 69.749 cv
138.748 73.082 141.414 75.749 144.748 75.749 cv
145.195 75.749 145.631 75.7012 146.049 75.6094 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0.703842 cmyk
@
24.1606 66.0625 mo
25.4424 64.9658 26.25 63.333 26.25 61.499 cv
26.25 58.1655 23.583 55.499 20.25 55.499 cv
19.4082 55.499 18.6094 55.6689 17.8853 55.9766 cv
@
7.5 66.749 mo
155.997 66.749 li
0 0 0 0.944778 cmyk
@
62.249 13.4995 mo
7.5 66.749 li
@
62.249 13.4995 mo
96.748 66.749 li
@
155.997 66.749 mo
119.998 102.749 li
@
96.748 66.749 mo
119.998 102.749 li
@
7.5 66.749 mo
96.748 66.749 li
@
gsave
73.499 53.999 mo
91.498 53.999 li
91.498 67.499 li
73.499 67.499 li
73.499 53.999 li
73.499 53.999 li
cp
eclp
73.8677 61.3564 mo
74.6982 61.2861 li
74.7598 61.6904 74.9023 61.9941 75.1265 62.1982 cv
75.3506 62.4023 75.6211 62.5039 75.9375 62.5039 cv
76.3184 62.5039 76.6406 62.3594 76.9043 62.0723 cv
77.168 61.7852 77.2998 61.4043 77.2998 60.9302 cv
77.2998 60.479 77.1729 60.123 76.9194 59.8623 cv
76.666 59.6016 76.3345 59.4712 75.9243 59.4712 cv
75.6694 59.4712 75.4395 59.5293 75.2344 59.645 cv
75.0293 59.7607 74.8682 59.9106 74.751 60.0952 cv
74.0083 59.9985 li
74.6323 56.6895 li
77.8359 56.6895 li
77.8359 57.4453 li
75.2651 57.4453 li
74.918 59.1768 li
75.3047 58.9072 75.7104 58.7725 76.1353 58.7725 cv
76.6978 58.7725 77.1724 58.9673 77.5591 59.3569 cv
77.9458 59.7466 78.1392 60.2476 78.1392 60.8599 cv
78.1392 61.4434 77.9692 61.9473 77.6294 62.3711 cv
77.2163 62.8926 76.6523 63.1543 75.9375 63.1543 cv
75.3516 63.1543 74.873 62.9902 74.5024 62.6621 cv
74.1318 62.334 73.9204 61.8984 73.8677 61.3564 cv
cp
0 0 0 1 cmyk
f
78.4219 57.4453 mo
78.4219 56.6851 li
82.5923 56.6851 li
82.5923 57.3003 li
82.1821 57.7368 81.7754 58.3169 81.3726 59.0405 cv
80.9697 59.7642 80.6587 60.5083 80.439 61.2734 cv
80.2808 61.8125 80.1797 62.4023 80.1357 63.0439 cv
79.3228 63.0439 li
79.3315 62.5371 79.4312 61.9248 79.6216 61.207 cv
79.812 60.4893 80.085 59.7974 80.4409 59.1309 cv
80.7969 58.4644 81.1758 57.9023 81.5771 57.4453 cv
78.4219 57.4453 li
cp
f
grestore
85.1563 56.2998 mo
85.1563 56.0615 85.0732 55.8604 84.9063 55.6958 cv
84.7393 55.5317 84.5371 55.4492 84.2969 55.4492 cv
84.0586 55.4492 83.8564 55.5317 83.6909 55.6958 cv
83.5254 55.8604 83.4429 56.0615 83.4429 56.2998 cv
83.4429 56.5405 83.5254 56.7446 83.6909 56.9121 cv
83.8564 57.0796 84.0586 57.1631 84.2969 57.1631 cv
84.5342 57.1631 84.7363 57.0781 84.9043 56.9077 cv
85.0723 56.7373 85.1563 56.5347 85.1563 56.2998 cv
cp
84.3018 55.0361 mo
84.6514 55.0361 84.9502 55.1606 85.1973 55.4097 cv
85.4453 55.6582 85.5693 55.9595 85.5693 56.313 cv
85.5693 56.6572 85.4463 56.9541 85.2002 57.2031 cv
84.9531 57.4517 84.6543 57.5762 84.3018 57.5762 cv
83.9473 57.5762 83.646 57.4531 83.3994 57.2075 cv
83.1528 56.9614 83.0298 56.6636 83.0298 56.313 cv
83.0298 55.9595 83.1543 55.6582 83.4038 55.4097 cv
83.6533 55.1606 83.9531 55.0361 84.3018 55.0361 cv
cp
0 0 0 1 cmyk
f
gsave
142.498 83.999 mo
160.497 83.999 li
160.497 97.499 li
142.498 97.499 li
142.498 83.999 li
142.498 83.999 li
cp
eclp
142.876 91.3438 mo
143.667 91.2383 li
143.758 91.6865 143.912 92.0088 144.131 92.207 cv
144.349 92.4043 144.614 92.5039 144.928 92.5039 cv
145.3 92.5039 145.614 92.375 145.871 92.1172 cv
146.127 91.8594 146.255 91.54 146.255 91.1592 cv
146.255 90.7959 146.137 90.4961 145.899 90.2598 cv
145.662 90.0244 145.36 89.9063 144.994 89.9063 cv
144.845 89.9063 144.658 89.9355 144.436 89.9941 cv
144.523 89.2998 li
144.576 89.3057 144.619 89.3086 144.651 89.3086 cv
144.988 89.3086 145.291 89.2207 145.561 89.0449 cv
145.83 88.8691 145.965 88.5986 145.965 88.2324 cv
145.965 87.9424 145.867 87.7021 145.671 87.5107 cv
145.475 87.3213 145.221 87.2256 144.91 87.2256 cv
144.603 87.2256 144.347 87.3223 144.142 87.5156 cv
143.937 87.709 143.805 87.999 143.746 88.3857 cv
142.955 88.2451 li
143.052 87.7148 143.271 87.3037 143.614 87.0127 cv
143.957 86.7207 144.383 86.5752 144.893 86.5752 cv
145.244 86.5752 145.568 86.6504 145.864 86.8018 cv
146.16 86.9531 146.387 87.1582 146.543 87.4189 cv
146.7 87.6797 146.778 87.9561 146.778 88.25 cv
146.778 88.5283 146.703 88.7813 146.554 89.0098 cv
146.404 89.2383 146.184 89.4199 145.891 89.5547 cv
146.271 89.6426 146.567 89.8252 146.778 90.1016 cv
146.989 90.3789 147.095 90.7256 147.095 91.1416 cv
147.095 91.7041 146.89 92.1807 146.479 92.5713 cv
146.069 92.9629 145.551 93.1582 144.924 93.1582 cv
144.358 93.1582 143.889 92.9902 143.516 92.6533 cv
143.142 92.3164 142.929 91.8799 142.876 91.3438 cv
cp
f
148.247 90.957 mo
148.247 91.2295 148.305 91.4902 148.421 91.7393 cv
148.536 91.9883 148.698 92.1777 148.906 92.3076 cv
149.114 92.4385 149.332 92.5039 149.561 92.5039 cv
149.895 92.5039 150.182 92.3691 150.422 92.0996 cv
150.662 91.8301 150.782 91.4639 150.782 91.001 cv
150.782 90.5557 150.664 90.2041 150.427 89.9482 cv
150.189 89.6914 149.891 89.5635 149.53 89.5635 cv
149.173 89.5635 148.869 89.6914 148.62 89.9482 cv
148.371 90.2041 148.247 90.541 148.247 90.957 cv
cp
151.477 88.1797 mo
150.69 88.2412 li
150.62 87.9307 150.521 87.7041 150.392 87.5635 cv
150.178 87.3389 149.914 87.2256 149.601 87.2256 cv
149.349 87.2256 149.127 87.2959 148.937 87.4365 cv
148.688 87.6182 148.491 87.8838 148.348 88.2324 cv
148.204 88.5811 148.13 89.0771 148.124 89.7217 cv
148.314 89.4316 148.547 89.2168 148.822 89.0762 cv
149.098 88.9355 149.387 88.8652 149.688 88.8652 cv
150.216 88.8652 150.665 89.0586 151.035 89.4473 cv
151.406 89.835 151.591 90.3369 151.591 90.9521 cv
151.591 91.3564 151.504 91.7324 151.33 92.0791 cv
151.155 92.4268 150.916 92.6924 150.611 92.877 cv
150.307 93.0615 149.961 93.1533 149.574 93.1533 cv
148.915 93.1533 148.377 92.9111 147.961 92.4268 cv
147.545 91.9414 147.337 91.1426 147.337 90.0293 cv
147.337 88.7842 147.567 87.8789 148.027 87.3135 cv
148.429 86.8213 148.969 86.5752 149.648 86.5752 cv
150.155 86.5752 150.571 86.7168 150.895 87.002 cv
151.219 87.2861 151.412 87.6787 151.477 88.1797 cv
cp
f
grestore
gsave
95.998 80.999 mo
113.998 80.999 li
113.998 94.499 li
95.998 94.499 li
95.998 80.999 li
95.998 80.999 li
cp
eclp
96.3721 88.3359 mo
97.1631 88.2305 li
97.2539 88.6787 97.4082 89.001 97.627 89.1992 cv
97.8447 89.3965 98.1104 89.4961 98.4238 89.4961 cv
98.7959 89.4961 99.1104 89.3672 99.3672 89.1094 cv
99.623 88.8516 99.751 88.5322 99.751 88.1514 cv
99.751 87.7881 99.6328 87.4883 99.3955 87.2529 cv
99.1582 87.0166 98.8564 86.8984 98.4902 86.8984 cv
98.3408 86.8984 98.1543 86.9277 97.9316 86.9863 cv
98.0195 86.292 li
98.0723 86.2979 98.1152 86.3008 98.1475 86.3008 cv
98.4844 86.3008 98.7871 86.2129 99.0566 86.0371 cv
99.3262 85.8613 99.4609 85.5898 99.4609 85.2246 cv
99.4609 84.9336 99.3633 84.6934 99.167 84.5039 cv
98.9707 84.3125 98.7168 84.2178 98.4063 84.2178 cv
98.0986 84.2178 97.8428 84.3145 97.6377 84.5078 cv
97.4326 84.7012 97.3008 84.9912 97.2422 85.3779 cv
96.4512 85.2373 li
96.5479 84.707 96.7676 84.2969 97.1104 84.0049 cv
97.4531 83.7129 97.8789 83.5674 98.3887 83.5674 cv
98.7402 83.5674 99.0645 83.6426 99.3604 83.7939 cv
99.6563 83.9453 99.8828 84.1504 100.039 84.4111 cv
100.196 84.6719 100.274 84.9492 100.274 85.2422 cv
100.274 85.5195 100.199 85.7734 100.05 86.002 cv
99.9004 86.2305 99.6797 86.4121 99.3867 86.5469 cv
99.7676 86.6348 100.063 86.8174 100.274 87.0938 cv
100.485 87.3711 100.591 87.7178 100.591 88.1338 cv
100.591 88.6963 100.386 89.1729 99.9756 89.5635 cv
99.5654 89.9551 99.0469 90.1504 98.4199 90.1504 cv
97.8545 90.1504 97.3848 89.9824 97.0117 89.6455 cv
96.6377 89.3086 96.4248 88.8721 96.3721 88.3359 cv
cp
f
101.682 86.8594 mo
101.682 87.917 101.806 88.6201 102.053 88.9707 cv
102.301 89.3203 102.605 89.4961 102.969 89.4961 cv
103.332 89.4961 103.638 89.3203 103.886 88.9688 cv
104.133 88.6172 104.257 87.9131 104.257 86.8594 cv
104.257 85.7988 104.133 85.0938 103.886 84.7451 cv
103.638 84.3965 103.329 84.2227 102.96 84.2227 cv
102.597 84.2227 102.307 84.376 102.09 84.6836 cv
101.817 85.0762 101.682 85.8008 101.682 86.8594 cv
cp
100.868 86.8594 mo
100.868 86.0977 100.947 85.4844 101.104 85.0195 cv
101.261 84.5557 101.493 84.1973 101.803 83.9453 cv
102.111 83.6934 102.5 83.5674 102.969 83.5674 cv
103.314 83.5674 103.618 83.6367 103.879 83.7764 cv
104.14 83.916 104.354 84.1162 104.524 84.3789 cv
104.694 84.6406 104.828 84.96 104.925 85.3359 cv
105.021 85.7129 105.069 86.2207 105.069 86.8594 cv
105.069 87.6143 104.992 88.2246 104.837 88.6895 cv
104.682 89.1533 104.449 89.5127 104.141 89.7656 cv
103.831 90.0195 103.44 90.1455 102.969 90.1455 cv
102.348 90.1455 101.86 89.9238 101.506 89.4785 cv
101.081 88.9424 100.868 88.0693 100.868 86.8594 cv
cp
f
grestore
gsave
83.249 33.749 mo
101.248 33.749 li
101.248 47.249 li
83.249 47.249 li
83.249 33.749 li
83.249 33.749 li
cp
eclp
86.1611 40.5264 mo
86.1611 37.6216 li
84.1445 40.5264 li
86.1611 40.5264 li
cp
86.1611 42.7939 mo
86.1611 41.2515 li
83.3662 41.2515 li
83.3662 40.5264 li
86.3057 36.3516 li
86.9521 36.3516 li
86.9521 40.5264 li
87.8223 40.5264 li
87.8223 41.2515 li
86.9521 41.2515 li
86.9521 42.7939 li
86.1611 42.7939 li
cp
f
88.126 41.1064 mo
88.957 41.0361 li
89.0186 41.4404 89.1611 41.7446 89.3857 41.9482 cv
89.6094 42.1519 89.8799 42.2534 90.1963 42.2534 cv
90.5771 42.2534 90.8994 42.1099 91.1631 41.8228 cv
91.4268 41.5356 91.5586 41.1548 91.5586 40.6802 cv
91.5586 40.229 91.4316 39.873 91.1787 39.6123 cv
90.9248 39.3516 90.5928 39.2212 90.1826 39.2212 cv
89.9277 39.2212 89.6982 39.2793 89.4932 39.395 cv
89.2881 39.5107 89.127 39.6606 89.0098 39.8452 cv
88.2666 39.7485 li
88.8906 36.4395 li
92.0947 36.4395 li
92.0947 37.1953 li
89.5234 37.1953 li
89.1768 38.9268 li
89.5635 38.6572 89.9688 38.5225 90.3936 38.5225 cv
90.9561 38.5225 91.4307 38.7173 91.8174 39.1069 cv
92.2041 39.4966 92.3975 39.9976 92.3975 40.6099 cv
92.3975 41.1929 92.2275 41.6968 91.8877 42.1216 cv
91.4746 42.6431 90.9111 42.9038 90.1963 42.9038 cv
89.6104 42.9038 89.1318 42.7397 88.7617 42.4116 cv
88.3906 42.0835 88.1787 41.6484 88.126 41.1064 cv
cp
f
grestore
gsave
124.498 53.999 mo
137.248 53.999 li
137.248 67.499 li
124.498 67.499 li
124.498 53.999 li
124.498 53.999 li
cp
eclp
124.494 64.7676 mo
124.542 64.0205 li
124.706 64.0674 124.866 64.0908 125.021 64.0908 cv
125.183 64.0908 125.313 64.0547 125.412 63.9805 cv
125.541 63.8848 125.682 63.7031 125.834 63.4355 cv
126.089 62.9785 li
125.312 58.2988 li
126.094 58.2988 li
126.445 60.6587 li
126.516 61.125 126.575 61.5898 126.625 62.0566 cv
128.713 58.2988 li
129.543 58.2988 li
126.568 63.5859 li
126.281 64.1016 126.026 64.4424 125.804 64.6094 cv
125.581 64.7764 125.324 64.8594 125.034 64.8594 cv
124.85 64.8594 124.67 64.8291 124.494 64.7676 cv
cp
f
grestore
gsave
25.5 31.499 mo
38.2495 31.499 li
38.2495 44.999 li
25.5 44.999 li
25.5 31.499 li
25.5 31.499 li
cp
eclp
25.4888 40.4658 mo
27.519 38.0972 li
26.3545 35.7988 li
27.2334 35.7988 li
27.6289 36.6294 li
27.7754 36.9399 27.9072 37.2373 28.0244 37.5215 cv
29.3691 35.7988 li
30.3403 35.7988 li
28.3804 38.1587 li
29.5581 40.4658 li
28.6792 40.4658 li
28.2134 39.5166 li
28.1138 39.3145 28.001 39.064 27.875 38.7651 cv
26.4863 40.4658 li
25.4888 40.4658 li
cp
f
grestore
gsave
52.499 68.999 mo
70.499 68.999 li
70.499 82.499 li
52.499 82.499 li
52.499 68.999 li
52.499 68.999 li
cp
eclp
53.7461 75.957 mo
53.7461 76.2285 53.8037 76.4902 53.9194 76.7383 cv
54.0352 76.9883 54.1973 77.1777 54.4053 77.3086 cv
54.6133 77.4385 54.8315 77.5039 55.0601 77.5039 cv
55.394 77.5039 55.6812 77.3691 55.9214 77.0996 cv
56.1616 76.8301 56.2817 76.4629 56.2817 76 cv
56.2817 75.5547 56.1631 75.2051 55.9258 74.9482 cv
55.6885 74.6914 55.3896 74.5635 55.0293 74.5635 cv
54.6719 74.5635 54.3687 74.6914 54.1196 74.9482 cv
53.8706 75.2051 53.7461 75.541 53.7461 75.957 cv
cp
56.9761 73.1797 mo
56.1895 73.2402 li
56.1191 72.9297 56.0195 72.7051 55.8906 72.5645 cv
55.6768 72.3379 55.4131 72.2256 55.0996 72.2256 cv
54.8477 72.2256 54.6265 72.2959 54.436 72.4365 cv
54.187 72.6182 53.9907 72.8828 53.8472 73.2324 cv
53.7036 73.5801 53.6289 74.0771 53.623 74.7217 cv
53.8135 74.4316 54.0464 74.2168 54.3218 74.0762 cv
54.5972 73.9355 54.8857 73.8652 55.1875 73.8652 cv
55.7148 73.8652 56.1636 74.0586 56.5342 74.4473 cv
56.9048 74.8359 57.0903 75.3369 57.0903 75.9521 cv
57.0903 76.3564 57.0029 76.7324 56.8286 77.0801 cv
56.6543 77.4268 56.415 77.6924 56.1104 77.877 cv
55.8057 78.0615 55.46 78.1543 55.0732 78.1543 cv
54.4141 78.1543 53.8765 77.9121 53.4604 77.4268 cv
53.0444 76.9414 52.8364 76.1426 52.8364 75.0293 cv
52.8364 73.7842 53.0664 72.8789 53.5264 72.3135 cv
53.9277 71.8213 54.4683 71.5752 55.1479 71.5752 cv
55.6548 71.5752 56.0698 71.7168 56.3936 72.002 cv
56.7173 72.2852 56.9116 72.6777 56.9761 73.1797 cv
cp
f
57.3774 76.3438 mo
58.1685 76.2383 li
58.2593 76.6855 58.4136 77.0098 58.6318 77.207 cv
58.8501 77.4043 59.1162 77.5039 59.4297 77.5039 cv
59.8018 77.5039 60.1157 77.375 60.3721 77.1172 cv
60.6284 76.8594 60.7568 76.5391 60.7568 76.1582 cv
60.7568 75.7949 60.6382 75.4961 60.4009 75.2598 cv
60.1636 75.0244 59.8618 74.9063 59.4956 74.9063 cv
59.3462 74.9063 59.1602 74.9355 58.9375 74.9941 cv
59.0254 74.2998 li
59.0781 74.3057 59.1206 74.3086 59.1528 74.3086 cv
59.4897 74.3086 59.793 74.2207 60.0625 74.0449 cv
60.332 73.8691 60.4668 73.5977 60.4668 73.2324 cv
60.4668 72.9414 60.3687 72.7012 60.1724 72.5117 cv
59.9761 72.3203 59.7227 72.2256 59.4121 72.2256 cv
59.1045 72.2256 58.8481 72.3223 58.6431 72.5156 cv
58.438 72.709 58.3062 72.999 58.2476 73.3857 cv
57.4565 73.2451 li
57.5532 72.7148 57.7729 72.3047 58.1157 72.0127 cv
58.4585 71.7207 58.8848 71.5752 59.3945 71.5752 cv
59.7461 71.5752 60.0698 71.6504 60.3657 71.8018 cv
60.6616 71.9531 60.8877 72.1582 61.0444 72.4189 cv
61.2012 72.6797 61.2798 72.957 61.2798 73.25 cv
61.2798 73.5273 61.2051 73.7813 61.0557 74.0098 cv
60.9063 74.2383 60.6851 74.4199 60.3921 74.5547 cv
60.7729 74.6426 61.0688 74.8252 61.2798 75.1016 cv
61.4907 75.3789 61.5962 75.7246 61.5962 76.1406 cv
61.5962 76.7031 61.3911 77.1807 60.981 77.5723 cv
60.5708 77.9629 60.0522 78.1582 59.4253 78.1582 cv
58.8599 78.1582 58.3901 77.9902 58.0166 77.6523 cv
57.6431 77.3164 57.4302 76.8789 57.3774 76.3438 cv
cp
f
grestore
gsave
159.747 51.749 mo
173.997 51.749 li
173.997 65.249 li
159.747 65.249 li
159.747 51.749 li
159.747 51.749 li
cp
eclp
160.456 60.7861 mo
160.456 54.3438 li
165.114 54.3438 li
165.114 55.104 li
161.309 55.104 li
161.309 57.0771 li
164.872 57.0771 li
164.872 57.833 li
161.309 57.833 li
161.309 60.0259 li
165.264 60.0259 li
165.264 60.7861 li
160.456 60.7861 li
cp
f
grestore
gsave
116.998 105.748 mo
131.998 105.748 li
131.998 119.248 li
116.998 119.248 li
116.998 105.748 li
116.998 105.748 li
cp
eclp
118.541 114.034 mo
119.916 114.034 li
120.341 114.034 120.675 113.994 120.916 113.915 cv
121.158 113.836 121.351 113.725 121.494 113.581 cv
121.696 113.379 121.854 113.107 121.967 112.766 cv
122.079 112.425 122.136 112.011 122.136 111.524 cv
122.136 110.851 122.025 110.333 121.804 109.971 cv
121.583 109.609 121.313 109.367 120.997 109.244 cv
120.769 109.156 120.401 109.112 119.895 109.112 cv
118.541 109.112 li
118.541 114.034 li
cp
117.688 114.794 mo
117.688 108.352 li
119.907 108.352 li
120.408 108.352 120.791 108.383 121.055 108.444 cv
121.424 108.529 121.738 108.683 121.999 108.905 cv
122.339 109.192 122.594 109.56 122.762 110.006 cv
122.931 110.453 123.015 110.964 123.015 111.538 cv
123.015 112.027 122.957 112.461 122.843 112.839 cv
122.729 113.217 122.582 113.529 122.403 113.776 cv
122.225 114.024 122.029 114.219 121.817 114.361 cv
121.604 114.503 121.349 114.611 121.048 114.685 cv
120.748 114.758 120.402 114.794 120.013 114.794 cv
117.688 114.794 li
cp
f
grestore
gsave
92.248 71.249 mo
107.248 71.249 li
107.248 84.749 li
92.248 84.749 li
92.248 71.249 li
92.248 71.249 li
cp
eclp
97.5352 78.0352 mo
98.3877 78.25 li
98.209 78.9512 97.8877 79.4844 97.4229 79.8525 cv
96.959 80.2207 96.3906 80.4043 95.7197 80.4043 cv
95.0254 80.4043 94.4609 80.2627 94.0264 79.9805 cv
93.5908 79.6973 93.2598 79.2871 93.0332 78.752 cv
92.8057 78.2148 92.6924 77.6396 92.6924 77.0244 cv
92.6924 76.3535 92.8203 75.7686 93.0771 75.2695 cv
93.333 74.7695 93.6982 74.3906 94.1709 74.1309 cv
94.6445 73.8711 95.165 73.7422 95.7334 73.7422 cv
96.3779 73.7422 96.9199 73.9063 97.3594 74.2344 cv
97.7988 74.5625 98.1045 75.0234 98.2773 75.6182 cv
97.4385 75.8164 li
97.2891 75.3477 97.0723 75.0059 96.7881 74.792 cv
96.5039 74.5781 96.1465 74.4707 95.7158 74.4707 cv
95.2207 74.4707 94.8066 74.5898 94.4746 74.8271 cv
94.1416 75.0645 93.9082 75.3828 93.7734 75.7832 cv
93.6387 76.1836 93.5713 76.5957 93.5713 77.0195 cv
93.5713 77.5684 93.6514 78.0469 93.8105 78.4551 cv
93.9707 78.8633 94.2188 79.1689 94.5557 79.3711 cv
94.8926 79.5732 95.2568 79.6738 95.6494 79.6738 cv
96.127 79.6738 96.5313 79.5371 96.8623 79.2617 cv
97.1934 78.9863 97.418 78.5771 97.5352 78.0352 cv
cp
f
grestore
gsave
59.999 0 mo
74.249 0 li
74.249 13.4995 li
59.999 13.4995 li
59.999 0 li
59.999 0 li
cp
eclp
61.5098 8.28369 mo
63.1138 8.28369 li
63.3892 8.28369 63.5825 8.27344 63.6938 8.25293 cv
63.8901 8.21777 64.0542 8.15918 64.186 8.07715 cv
64.3179 7.99512 64.4263 7.87598 64.5112 7.71924 cv
64.5962 7.5625 64.6387 7.38135 64.6387 7.17627 cv
64.6387 6.93604 64.5771 6.72754 64.4541 6.55029 cv
64.3311 6.37305 64.1602 6.24854 63.9419 6.17676 cv
63.7236 6.10498 63.4097 6.06885 62.9995 6.06885 cv
61.5098 6.06885 li
61.5098 8.28369 li
cp
61.5098 5.30859 mo
62.9028 5.30859 li
63.2808 5.30859 63.5518 5.28369 63.7158 5.23389 cv
63.9326 5.16943 64.0957 5.0625 64.2056 4.91309 cv
64.3154 4.76367 64.3706 4.57617 64.3706 4.35059 cv
64.3706 4.13672 64.3193 3.94873 64.2168 3.78613 cv
64.1143 3.62354 63.9678 3.51221 63.7773 3.45215 cv
63.5869 3.39209 63.2603 3.36182 62.7974 3.36182 cv
61.5098 3.36182 li
61.5098 5.30859 li
cp
60.6572 9.04395 mo
60.6572 2.60156 li
63.0742 2.60156 li
63.5664 2.60156 63.9609 2.66699 64.2583 2.79736 cv
64.5557 2.92773 64.7886 3.12842 64.957 3.39941 cv
65.1255 3.67041 65.21 3.95361 65.21 4.24951 cv
65.21 4.5249 65.1353 4.78418 64.9858 5.02734 cv
64.8364 5.27051 64.6108 5.4668 64.3091 5.61621 cv
64.6987 5.73047 64.998 5.92529 65.2075 6.20068 cv
65.417 6.47607 65.522 6.80127 65.522 7.17627 cv
65.522 7.47803 65.458 7.75879 65.3306 8.01807 cv
65.2031 8.27734 65.0459 8.47705 64.8584 8.61768 cv
64.6709 8.7583 64.4355 8.86475 64.1528 8.93652 cv
63.8701 9.0083 63.5239 9.04395 63.1138 9.04395 cv
60.6572 9.04395 li
cp
f
grestore
gsave
0 68.999 mo
13.5 68.999 li
13.5 82.499 li
0 82.499 li
0 68.999 li
0 68.999 li
cp
eclp
1.84375 75.3984 mo
4.02783 75.3984 li
3.35547 73.6143 li
3.15039 73.0723 2.99805 72.627 2.89844 72.2783 cv
2.81641 72.6914 2.70068 73.1016 2.55127 73.5088 cv
1.84375 75.3984 li
cp
-0.0151367 78.0439 mo
2.45898 71.6016 li
3.37744 71.6016 li
6.01416 78.0439 li
5.04297 78.0439 li
4.2915 76.0928 li
1.59766 76.0928 li
0.890137 78.0439 li
-0.0151367 78.0439 li
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (Nicole Clark) ()%%Title: (image69.eps)%%CreationDate: 1/10/11 11:12 AM%AI9_DataStream%Gb!U'H!_c?c7o0F!PSXg\-lTU[uMtrq`\nmUP$];,6@pQk?Ra'cY%_W8QB\N2pHB7F5?</D\u$sRS$IL.d>+;2B-#rQYQJAZgmL\%XJW!eQDp=@eMP=g1<hL/\_M)q][DfmQa[A<b1_-]Z'_VseTh)iW73o,Xi>FYh(CU#NE1BT]3-XK^LqR+HcBQp>-!l+XcIKMlf8e2%1%fPXX'0j1rq^l>[$J#/V?9qI`7gRFnnVecMr+iR=+@B$]i7aPS!B>R&,s'J&$/;!ISo?OpgABFN/sl]FF2pfb>MB_>IpT.r.!2$%FcG>r`NX4Y`DN"4ZL#fkH0)Hfm^1--C8:cLQFd$$q.S@%SI2&V@qm%ri>DL-^b8QR:QnC#MOAT$-**HXc8*jGWITc'b$W]A^Qu/q%jl^BldqHMD]MGTSKWpG:kG%f;*!N4=l<2Z1#)pUoY?IcF=g*#D<"Y0$<BP$/<,+C>;7fdX"$..obIgV#n@dV'X`X=n2el\Rh5.3T%LduhY%a0?'>&DZUo6A]beA!rFE4i3mZn/O7rfLbQa/EJd*/Nu$9%Gac:CMR`_gr#b\np!XCNR^#mA*a1Xk&iWW3"%1<qXF98P@=^%oRR+jgV//tr'r!mPO3HAFYR?#>/__i*C\'l>u1d`h`/$ob>l?BC1mA5gO(E=I,4*mj\D4B+fCLiDWTd/c+c>*?jcq/C%,i*nEDq%%=Y*1DVSW;$##Bf(i00au8l2!lR3n.R:&&:g:s(VgP\HFUZ;&Aj16)HJ*<$1X3t@Kq*%2!Ji"J]tMbpEUKUTk(4=M&>9W8.j9-r&?%g8,EE09rIGNL7^Yj.ROY.FaU.2(b#E:FHBfJkmcuF-8>UB.tS*KJG5+pk3oc9Mf#^'7@YMQk=^498"[-).j#D0Q6_.TJ.bWPH[XW%6ReB=HpX6!$".e%@,uuN_BNCp5,fmRS46:aVm0+f0QO]nZ3:,W;D:?1KU-9TC"Dp8<Xet_;D:>G_LrZ($hK!Hp]\"!onQ<]3C)L9%9#:G`P?*gEK^_V46][B7@-!K"jI4Kk#jY<En0[Zl1T/X<aD"o/0=<@_Mb;&T:^1MZ.2-:u[;"4a']oXm:l=HUk!qD)]'p#;@!7s.%Uhn.7KK8=KW*@]SU_QI<0QNm%U'8XTE_Ql/1ciK7oh0O^OinK%F/-!-.G6ej:A*j3rLo>eB+d)NRM0S;KbFA.qXq@hl==pu><U8p%Gk,O?W*@]`7t4@iUERbDhC;/LHg:YVP*gpV*]E(]j`k@Oe1T9^9Yis_5=n9jrhq;0nc#FN\k^#Rs63<+B,CdArhhuH7DHP9l&T]1%DqgS+gZ$Q!#!MMUVa$Z?o\988ra^%R>6OKqVa&qjo\988r[@1VP39&mn4Dq<^Z@-FT?g<`Mn2d>g>Mb]YW$B6X0fkGQ)lRfZF11,%s5Hf_e_1)GL<Y3db,:YtC3e,u-%OD7%9qr*(Xt(R3c3Q/>,Sgf.Fb6+)`B@i>JR-Uni-K_hAteh^*u**_]C?G\U^.<*:"M\8P?Fr%Aa'2I3f5/s=fS\!VVAH:f&!-mJYY]iD>DFEbWtRD(/nbik,*OOR-`M]E+,2>cA%WRD+!r)\`HMoY2R66q9@Qb<a`n>/]A9'hdROF%%KPPh,F77HT03$@S.YIf2V)k<X<<6i2Y9\FkTpOt:Z38I,&2]&9-qFiXWuEMVQjX#@dUBA>/_-!)e];q6Tq@O:S8JN<u&::0RBHV%-mq[0OfPK!GtHGbf9U)APB:89Z@/B'e]"Osq"hC/4[\g,D7LDd;Mtq?E8+E@V2MVgM$J]O;-E*eht"ThltEuNF%hp*75Y[\JjZL_%E>5R0.e+$lBa*S!Tk4'*ImJ8#R=M(9>fd`el>`)haUo)f6Z"A+em$Q3ei,]4a57s4\GXG")qP3b&I!D9.V`*?+rZ`u-B6=4:uhU[%pC4qJ@cWgp3O>Z.q&Mp7,P-.][R@I"ECi:OW,+IXAdY'_Oq'VMiSfXS*OQ)ITREaFE25@ph?JsH;r,jdE^WlaGY%gdH.+_3-LXNp%IpVOArm?+$j@mH+kHj\W>4b&Sli![q)t[M+g/?M+U0,_NJoY2IJ^+FQ(B*PCGh@+>G>kXG;$0^c!jr2CkcXQBEj$llGLLE\h-E;"%,EKD57oT`n"ANh23=#F=rDZP`p?8!UO/RZ+5Ol#!5AiQc4I7Y!(AsF1')Etn(F(ZRrp8&cNZ@3eXbe*QN0$..D,ErH?BWTb^HGn9%>OJS+5:O.uilZM?BZ]oi><GJ0E*RKdb`UPNd<JQJD:#q8h7_>qrAu?cKQ^5X:UF;go6*VKCUpak<2=>LV1Z_!k$cM68KOpu2[?l+%e;e!/)(tV&S)bBEgg<^q"M+E?qmsgX7)(!/@D+g_&FPg#[nho_?KtjOcimr_(qD$_'mIn:Z.fl`Ta%7&nnV0iip1I)Z-iQ0)NdKF%=#ShO#YF8h(KQ,9e`/^6h2N.Nn$1Z]QpuqoCg(aK-_dEdY%4N+**LAg-/Gn\er/=/Ur8$,,^V\V<`0(/,!!+X3L!,IDgQf5>U/NL%6Wf2UmJ74cB]r[*nH!O7[e/FH[MlQn.m7sgj-,BnkGq0l./a$ggu,$0F`7h%Nq%u)GZt"(O*4]dYNB0iG9\oMn^;Z^A5CC>\*R_/%;L`E,Ad+-BAuPui*`i<@&1h1k2J3]Xqq_BmheVrHktgEO_^c+Fp[-t@g8X^^ki*KX?*3I*l`9uMrSD5;h!kOi\\f+hKL5Ka7N\O1%Tmfle9R$4V$A<c[BQa;o^$sJ?4n+7,jOT7N>-7YT.Q?7bcVY]N4El.HB74l&Wg-d'Y<MrMs/.!_^H\;.[;,TVUIH?d[+sqGT50^M%^Y>=%8+5$;._cq)%j0L:\m>?:;JS+;K6/9uqFgOnghJ/n%EnCU>(>KNK)Fu/Z164pA!QE">IdnQiHF'M=RmX>);!%(E\!&e[n.,q%S:8"2$]63]\W%Mg>VQ"Chr8+N9Q]J)*(+iIY#X2D_Ekm*Y<)[(0(C+8)n`5gEVZAm?-!^4WZOrqFn&GQSn(`h\BrpI9fXF/./8k<%q2]t'jUVUp/$!<DZ?JNuljJU*S7B+!QV;tm]:?tYq"jO\,K?&"m=4j!S:C2#%-=*E4SI)BT)-bST(^JOT)R%WT(1,JT)$\RT(UDN%hEQA=0`J>h`Z9i#^M9=3aTHYF&`>=&ik1=LDknF3M]"Be2I%!foU;Aod:p-liT:0$rU_Q;BZ'?c3:348a`PLiS3CR\2r/JpmeY>V%%XE-p-0UdE()TFKA-tID*?1ICrre]J'EZ920#f@c?c[tO/BH_=1>l7,)6ctUrCt%FNXh*h09sV6bLr;5J(3c]nKPHs>1KOS:5.Hc%$W(r?eLLU6Bjq54qas#d<GO7i8tF,'ftnfNN;F;Q3e)e$!)I7)lKuX,b,t@mkHt]SHMo^'oWN<&99oa+4/Q8Ro-kCf,A@C3r@c,"%Q]m[KLoE8'h^^?o0I'4Cr-.>s<5j)EQ==a%3%c\OA"5sUq>![EB_dG%"A?[$Wqf`>:UNe5_XG%8s-jjRl*&U<%RpE@'FiN<rb?Wq%+9,V<p7J+tV03_U+P?9FMkq`?s#=BTZ2B6/o)AqID?'Ue5Bo-d0=*sV<dju)/rQ-ok7slb6KaVS/Ujl&WkNT3d]BZ$ptlh&N&c/`%[sLj7X\sRq9-Z4IP5jWXa\7C0oD1PnPlCZ#cULi54n%%7dq_#E:*j'BgXG-0A@'ZSR)W("_c;<+b3oi%#GdbfGFa6!p5a7_U@Hc[%Y$a04Isq@[]@;=W#To=,q1Yk:_iDVPEZ>`G_Z,^P\pT2J,1o=?-"f-Z0>^Ob,aEkDg[?<&D`8W+:oSK;.L=Ldh"/sqjp@gkaE+--%ElYPlQehH%1pZ<+G,Ncgr_Fiiil7RRD3gZV<jl<4po:$o.Cb%-U>5#r29N%fln]n!$/F;V<F2\4+'C6[#eYJMp$+>'N'u7:*b/@)%M1\Y@=cnHVq`J^qg6GFa1FeeO/uE0/]*4gBeL'`)[,c^L>Er:H=hAGrJJsNO:9@^'AD<YUj1UV]E2W8FJT@V9med/U>DUA>^FIR#%7P"@8Y*J>!4U0es=gn=0A/g"u>#"L471=r_-1tfL*1u=f-2Ri8+rL'*XW*.n+'=]$9)Hk=<EqH>66nJh?>hs@o,21Jl%g16)QKso%Ym[.'3R.fIC._kN-XWDkD^p#TVI=.-I-Za;<-"Mo/(SF"lg8;P1\:4qI'D-;:8<u&HT(]RW^n;[F)kU]4cB0*m5Y:cB.U7uVii%6%F)&m9^Jm;VVeW?fq:f148U"I1F',T[I[+7jg!`Dh0&896a)e$K;L.LB45%JjUD%n=+,cTLio*;Pr^@g%"A4+:35ca`Pt31gmF.!S%2FN[(,<[@uEE2N%mD>L8;kC/mE)9ZZLPn#M.QNL%<e@(Q(MgceRnoR#he*TaD,pAhgD(Qr?iK&B_stTmisF^%Z7r+-\o=tJL*n(K%eN-=77_:-_&L21AEY__"V/4,V71cIf+]Qed6IdhXMbEtR\0@o]l'H\sJO$%B@?i"i#f9u2b/4i8+O$e4:94:j"]C+J,i(ePHD?"H%-m]A%E'+cEb=8dp+'2Dm!Em6a;t8]X&#,G+ou?M%][L]*o&OPDk6NL-6:XR5%PlXf$CC?eYEfi+b&7a7FK5u3ih"Gl7()e0l8ZM>%^Y^GU?m4<Y;N2,r5[\Ea%G"_Y%ph>3@',cCU\1'O*5!]kQVUV<0%GD'f.+).T&orD(c`@Het2o%-O_Kr>]2!`PaCY(bt]`GO[T!@%nXa[:H";sk>X,7$oI0=dC,Ft+r4Ch-^XN<X&m;+1od"1H7J50Uf=:=R,qr%Ts&9.s9GhY/?a%+_"mW:eH+3V+<q"u"<C3)lKAE<X%kn5)3Ep^=khlJ<!^l'`IRV][c%a-q`WIHku@9#:e%&i^d"6Th+c0%QW!ptZ?@tBuMILMH;oje8E]sKa[^?X%D"9OlAfB^kDMcN6M%<%jsBr8A;/1RIoqI.k/B`:kjdjh,-mB.g>_:@Di%J#UO7ils;aNSi8i8D=W>i>P7`.a?U2bXPLb>j&-FL(i3W]@q1IC3'>>>t6A;%4cg!#7!W^1daW!F!9S%he:VMMUi)]gc)hT&Apb8k_TPHZN;24#<Nm]Z<l3E[-!T49QE\2'=`Suagc6=gJ%$q"j.s@E<%LolI]9]T%YOuqO,)n.0$i;3>?Teen#WT(o\c#LpI$>9i%MY`pX_ulREr5"IQRh;@nBE3e'hZ'[r"Ha#-@&7#Zp4ZYJLDrARg[TP7dGPW[2MsN%m08&E0ffFZ@BJ>OX_W`5$2O\j[?WcmeYV:Ig74:R][]\SLG)f.g2Y_/Y8WO&%n/KGK=W,R"f$h_Q=,ssB0D-[Hm)Y+'G#-a4I'.<%,`[)V(sYi=`C$<&.j@lUD$AGE?D[U0_Mg)G;/X(VK;21=fFr)7bPF]!U3&r9`FsSBf'c'kM/cD-q>b6V:0qD44&n=-`CNp:<0C9a%\=aQR<Ur#,(]ljXUemu4OV1r[I%WXPRK3(OWe.&F#iiMPNpdk9%!$AOJ,Gi_qn.N?c<I[1A4%.,3DPmPbul]51DiFa/Q$1)(s2>O%V>tR""AIm9MrNTbD/<3;!^WmYX2Zf.IdQF"TG6OLk2t:P3Z<BEol"J9Reu$erItiK[C,Ioc)omKcMR%Jq+>qu[rT+G5#pcIcHWi'%=`&@oCp>[BT#lu:YJ,K*Rm$c0N%M\Bq4h<3o4.B!9,D(G7lOX^Moq0^'NT*aY^9l]3.%O3eb0Rsgt'*OG4KEKgU&imr*b'PppTsu%e?H)5ji)SHlonI-R9Zf#](355cog/l5B,>Wp?oEUI&ZX'^Y3S]s%p.QP]"7&<]4!Mg"_<^(VOLGBCj*]\T?WbTc#dpRS[<PF='#f%\dBId>HR#\GM^HYSl3ogBH#aKg30H:V*6`mVj*MsL-;/Rc*i'Nm;KXSqeLY'B5@o&NpF"DShIJ<*Sp^"rkj6Re9LB8X^J($Xe/,X%B@3:<=:`F"hEsK4dtc'*_b;]4Xk0OT4kRkFGPZ/mVU]:h<ck7;ls:c8QfbqU1HDYnp@Q5L@SE]>gIunhG!!96rUr]0.<A"ASW9%C%bY2p&3hJQqR]B?_I_?KFWB$)&^"Ctnlh$OL1\'MRl]f`7fBplCqXiWCr[&8opOC>_kk&tC3eUgV\Pmjk:,smiD$S\bQ;d?MFoN;i%SaBb6r11QB<1N-BlA[DoHMCNumF8)*N-Dp04\DShbH6Q!gf7%GV.[+uD/,3([PrYMELlN<N&C$@)pra*2EoT][\d5*S[Q7]Z/"]i%g>1)R:6h!K^$9a_HO6k?jMb,73P&/fp8:gb\U,AXe+$=_3VQji\qoW.P>cW?^5c^cC/.H(?Iqt^Ai`t+[@=(Xd-4dOHI#3)CY&@7%&b"4aAock@*a5&BU=7l9R8BgD`Sp\/Fh3#$?4+pKa1?;9[r"NUR`VtXG<aj5qo"nZh1e!SRVPo54'd>c/8iCJH8hm0/61EV.F;0&%_$>nm#;;?r:1U7=O))qDSK?\WmVbR;$Bec2.k4WL2g-Hu`t'Q3/mb/Vm)Vr*%Tt$be'"<!:(9;0j<E`4TNj@^opAM+B!38YIr.Ss%HG0#/(Y't$ajBG8j$r2m#/U&Fo(1r>CilSq-a/#;[_C!TG5AP/5Jp6)J*EQja6ENO9jFSBjmh^/>BHbjla*_*NHR&+.IRGPh>X`o%`ZWpj*P4L9%]RqJG\8DF1i'4slT6+JSaU$VPDSDSLTcb/cBU%]/$8;GJ'FN[MGE'"\^4)-V&UKpfVppF3jTdl1uE&_mS?*GMdE<o%(Ejn2o4.M.Ar1`ChX2#1pC2m=?(9MR#bcHYUNA7cSc7t,m0D!"HTAjR]<]b0iS>9\7H#OsZjs#5n4lV`iD*V-[9:oAdTJane(r3l%gse:L<*Qss4N(!g(Rj[.?/'V84,$Fp/d*7X;r]g-ZT[0Eg*N:o)c-.Mq4..1qWXm%Ab,6MiVe5do<7`;2eDH,^(^*[HBjcMV\;p'%q$N?%`c@Q4>OXIA_X'J:9rg+mi-?-lN:4J<j]3/i[,/)`IdS,JVs`j=FuhNcrF&.HhO>Ef5IoW7Mg=#Z51nV^BLb9M:k!"sL\(,W%=3PaWnT]KTCHCVB_=,i!lY80FWI=\sadlC:LqqZ:1?kt'@eWfBlEYfH]c-M7gWW[fg\#mVWJe%!c+3/^<cp3qp?oe-dJSG8rUacu%oOh`9RuMlCI*Qrs5OHMYq3^>(Im15_6&g0dn_%#lYLq5uDh"@IkN,.4)hG8dF*B6ZGLq<A]TVh>ibA3X>o@"R8oY]Kg`2YAj!U,U%g:roFDps40`Zq,<Y0UFWB#]k_U7Ses/!">2S@3l)1BYtph9XWr]p#eI%sZeSKN]=U+76>*dp%r1^O@cZbiQQurPGI<(urqDB'7aK%kK7,ue`Q5-VJG]Z;+RfM]9@_@H7?J@:5c8hAjr,"I`l2:mU2HB/SptbO"FU"E4b]2jnm]Sh<Yr*3sGMf34=)$aE=2GGDiK'Xu,#2%BJ.l@5Hj7eO^4UAk31&+)EVUYrVkr&4&MrZ4O%mUDg\%D4,'?_ClPLE/#S<BfU6RN\)>dC%E/;G#8oU!PNVE6IG`qa5'nC/l$2H$%0t(#WZtZ,MFD=Qi/#f['5C2,i3k]r4k]CI]M!oFuVfh<KWe#?Pldjp`pb]bRAZ%Vt+G,+>44Pu2rTHCK5PK<s1,UrJFio&6Y$E)q%h1cILeCKTH<56,+mrZ57WW]gefIbee0qE?#P1pIBELiD*3sBJK7p1_?.r$?7SUs%G)2I&PY>`k%Jofb;$EYd^i49,9O5IlB*.PYt%.X*XF$1WI<amkR[YnZ;'?]XY9T<s,/]@-9%r`Y,#H0p<Rq9;D+R&HX,.t[c0LPV([FZFp6jIG9*BL.$I.6dJ8qM2khe/-F/r,b!=%`T-Sr;2i,7^<$Vke6$S5]R16:NHk2eKt#3*%R)5p%d$)q0&c3Vj13oRF.7YO:e7?.4L)B,\t/G@E67>.gVT*7.ssDN.>s#H]"SP9%A7aZ>jmWA.+^eu>Oe'!<fU?/qdWU$Eo\k5]ns'0EJt;4C%f8VBM'#\Y1oSc_$It!0"oKKjP.q3*nOS?Mk-ipt`o1!;UuTM+h^4DO%h\nR9N1+*#kFWoHP]+")<mY&8D=-Wc;6TXs3"kibp(5SQpC-k2QfjNoQ%&[T0'[g:I3C,7Z)`+Ycf@uc]8%s!p[mWC>0?F"b/Ka?%Z5Tf,3PF/`k2Yr;n0iQqbWiM!nX`<=<_2l<0%@e5BD]EqoQT6=4t(_4\XoklYg'V+[WgLRZtKU1*)$[8/<VNmmnZ!$j$DA4!$?E6%Ve[+:[_[PZL_AJ4>WE`b2/RC0i39Da"a;[fp&.9s<)4):`=557PTMQl=nub_0WWkUS5lp5]j5:U[tu.>MNKUIpKRHDKQ5[!5j(c$%1d;`)ec![u\o[n.BQ=!mK-BCOd`dc^?2DbkRKXcZcR1PMbho71/@m:UFTETNlBBp-o3HY>n1t7*-$())Ek16HMHS,Vm03=tCW5Sd%AFZIT7kH*%9#1[b%j;,(M&el$jmaQ29,iSo`r&GB>Y)t0T.qQh5Ln"#c@5C2(H,nM['9%_"O<02hsG#h8U0XG<hcZi.scA(+$6#G%`GA5]FN+;4^?c!!Wc)+ajSE-=GPeFjm4"Luq;@mbP*#q>/+agE1S1gPHK.Sjddd=n-K9ce/pKVJ$HB)f6HD?>9df6(JJIOJd\U<c%QFg.2P*1T7lt*c@SNO&K/o>+3m#Il]"jY&kYrJ3@J!-C(2ZepA-1-d2$VIe?0d]"eK$`#lS(koTiOTDuZJE9=m#;bYr%O_fC(JGF%;eVrff^!FVHC`0#.G3%Z_J\!=++c"MGL`<mRg4?Yb&j*,]onqoS;/%lM>*(%oO]2cNR08hYd8EIOk,L'1RHY#-PYS8-,hVcR<YEV%OJW^PP[761bs9.WjZkfi`V+<pdRNAfe841][<_ABpLf]=Of%I(%`FJ,>/EYtF2)L;AujBf#;Ju54Z_QXksKj:0F0VT`aadgan7Ni%!<n!H@m64UZSs'/^umZ,YIu#>^U9oEUL]U%;BgOij66oMr##N0hXBc/J%"7eBS_O%jK6ba5l43[Y;=HNs0JX$B&g?LkVL\7"h-O,%=Zk:%&QTMeb8::`9u"dE[F,@9363h_s-:Idmd4<6%l8I#LEt!._"Hd1jO(p2mp-tID/oq&"hflS'JA'e:Oe^qgqT>32_gNI]`F9\%H5#$$g6Mt_Dg^n%Q1k)t-5Y^+83<ODY7s139FieI2X,VSBb;#:(@:.feW14dc<nJo'BcP*;R0)9#!<>\<>n2fQ(TUT&6>W[aNrpF%.+;W7QHgf]`1>DuBKYft;S=pG!:H9\_/3!Vg1#JIKM,r&i0T)c*]O.j0:e*];`_*%e/PNl?08L.'?VS!qE\fD)b9rc%sTb$rGF=-%,WcAih-40D/dp=:qV-d1?'b,fi)Vcu1EVS5i3U#*8ERNpXp\,_(W&P3:Or%b0f8'r;phuO.VPoFL0obVP5VN0Qnka:/ts=iru.&$%ERb]14Pq#`mrj;;A07T:cGZuYTfEZg\I\T(I58@*G5C"gI.i"WA&/hq^,FBSq&o+H(\P"($*[9t0]4s3BYt_?nH*3[47n@oj,6h[%DSE#:V,.'6jJ)!^=/*r.8@6S>-!HgoK_*1h,[1(.Hs3(IK9'[srm41'PpoLjTJ:S69rZ3.KT#A/H2fWlU(+p8Qi0Ra.,P3:1V?,f%*6m.e[dt>_FLJ>O3gU!qT1l>!lQi]Bb=\i>*B6*=eko].;@I-*)o/LqTqJQqJIa2=Y&:CO%I*LTnpEHmKWOKjmn_0u`qg:QaSW5O%p9rY(oL#"6IntRZRG?-r$A9DCViretgBfBNI>s!-7CG!o#R%RKW<ma?]_?4iSo\@@o#T8_CogF9?d`8j+FG!Ah=,_-rB<KBpRer3%%VP<_L"0Z8F6-Nmh2jR]`dEa$$Nl[uDes*Z99HDSATIQOm(.\5<oblV4cFh3BLV9A6g\@7;>P]?/"'YgG#I^^aa9_G0]hgLFdUu=%Zkl&"pk#skMI*l'?Npj-K%]$Lm=jD'kmsBV_D#GA!C!ZA=E?<L9'"-*Ns-@.4Z(:qR]_ms]WkEER6oBa9c:XW$Al&HLp;7Ym7NPK%N4"IZ;Y#+]kp^6Kn;k!7Y@FAUmr5l-OJ8/--ohHXKf5fU`3sb,].M"uP@HPKVfmZS()+4oDsuS<A*N#MR=_uZ-,+ZrSno@B%='Jp%VEVn%Mf2nt3k^*a3iRtG-cXU0PN,CBJh%.l*!j;RCb/&p.-:mD_7,pY+@9)T6m9OBP2*n\biS96_?]-N$ksBsd@^Hp/2QIQf%@jo%T*r`!3uhJ3(E]D-kVB]rjNo2ccuin.%@BMLS3]ZrlgQoVaVf1lfn01`cm<>O"g\@;c_4"WTZcCcP=(\,5o7ZZ*&r^+3J/rJ)bgfJ%EX!ORGDmZ"0"Ds65E-e@/ieR0mtD]-LFtT>:?Z3$F6J2Vamg6\bp[Ej0a9g*'57?NY9Cl1H;CGB]`PZESn:m]9DPs/+X:buVg:aa%VYB_'4Iu0Z9-/T&G<-`dC"=)l]!H4a,L,@K-A0R@E2!K]p_"KL(j^Y0_=l0E90^1=07HKPo[%#AmifY_55&rJ,n-b7AIcAJI4!48%P;TfW5.1s>p@O\:eOM"nnU=^saM[^bcK6Nu1btJt^SrNZmV^NKcXaLm,\2Cb6+O`=lS4^IDUHK_@4S<iZJ.X<+@0_`&X.1:lShOb%RN^%BS'=4qI\2T'6a4)F\hbEjYpkBCnqbN1PVT:%IZkc2i%o[8JThrS/SHRkagA5c;j#+e2MJEFD-r/]bP(11@FnY#a5METS)e-.%.Y29;'<?==5-[=%$OgM[@e7D'3m$YT5C%XuY:`?dBD8\F)e&)o\al7knYp6'S[JE`+XO)8;''sGW;%3SGNi#-T/5.N#/6-\^3]@^%"t'2fj6N*H'2K$f*+%%F7=@"Wjdge;B;Y=M=E%=Z&nCZ!XHpRS(4R%HpEYG\)\cdJa04%Y$?YR7[R9oDJ-NsXDU/GT_<S:SbCk8R%YdB4%^_8]4R?-5CIIuIccIue9,:8Vof^!SF-5_(amtae!Do\c1B`c_e,-;Wqp$/Z$$r6`"EW`I@pW5t=bnH`/eslD\UEfbo0gt`?%aRHlETbfbQ1md%Z=.Zp?4%Z>?W^#66q4Je>f./A;156E_I:T3N]cX^PQ`25fV8NMI#cSK0&J_\T"6j<C8@c*F$WeF.`D^Cr/\<@-%fhH+*$n<j#_P]@Z&s*uSWCW[`AmF\a6M\]acIS=P-=KGKJ%Jf\L0Zj$9X![P'M39N6OLT?@u]lb6QR+^dV8EZl-afef%@h6n53rt%.6KBR).*o\iF@?SO%f&G!Hp.[r6uoQ11#&mqD>SY4YdW&K$NPP!Q+iDlH2X</3g<[O%bM)*tZmOdQV5_%`aQsMNZFW8Z[Da-(6KX%NV/;N:STI"%n;\F\9>uW,6lR5)WZT6(l_H!V\U"-)r-S)UnOp7p)bOrg0^9RWBqDIVN6Et(ZM_(Hf`fN(X!X5TmDeY?8"=BcJ.@l%1PL/\LgY7/r(F'fPaj@*O7tak*=?$6YaOR./DB;C4l>]gML7C@L[!b5+$(K]OS=h/T+;_Y"[2-u\=k*G;s2'kLeo*h4rh`+TfK>Y%5$[.f6"ApW#L/#37mkDY^X;2]7D*gY)B3Z[>`,unN$'4f[k@ZA^(KPG7G)'(a#`-M)>&G3PV6'0-D8jCOeGhba6T%*@NrFY,R3<-%bMgq95mX<GK^@Ae;Ijb3'4,?"A3BTB)HS#uG)"8HVcLCrk3*ZWh@f32d309cG8@i`aG(9sH'#n/S;7hd6ML2GkY/1BA42u11;bX7%ZE^HTcA@ZnZ#$puIlfnVBh03+p`9GThDRmp2IL>KM%.p:YLq,3D!5ek1Z=Ga\tO<,cdSZHVA1%^%?1Nu1"5H*B`=m?hUVrgS.GG"%!7k)6:,8br)6)5_a@O#E*+;;dDesM5WV<#0a@Kn&`[ET?bMu)#afVA^8EK4I,r^8J@]A36dW77-k#9#4WTdalm5Klsj8+j'&mh$\%DibRD;.jTTTo0AHApQ!r3kptOKo;4+,>EjoIB7'L:N2I!Ur(*Qb@ji5L@SQG:5/#[XrK850(]XJa4>_c'e[q80_/2Q3<*)Qqi(!9%Bgb8NrQ,A&:Vd$frn[o&f#MYup-LW-30WdjjED-3E$.MX_&&4ETu0"#K.e,1mr0G;NF'gF;B=^AKJ#NU?^Hi!hb/jfk0T2f;M<@X%)R2F2&'u3M)Abuj;Y@p819KGX^TFU[V5oOI6>,n/]CiE!\FP(6SRli\c,0JQejO*L@V]i[iql@.f=]5?m@<a1e&Bb[IHa1k?6.oI%SIjVj5(E-'7'bS;RQhSr&pEai;'rnL>hu"Jh,f.AYgoT0h/-E&gJ)M8);NHV&i/hC>4%\PbmCmZqe'0>>E93)VAA&<>cSn".9rnO%)OH@>)pGMo-+f]dWislZ$5d),m<0CCG(U/XCN158qJ8KQh0>ohO6omq*IKr.knNRGbN[&O^Z(F4*g;cC-I)<\GKqOaGb'$6a-Sle%*gPbH4\n?3n\J4AVd,7!DdSf^X#`g*/<Jc-D0B9-.tpsa[%\0_8,NuPWVi2hg.9WNr)0;rm;8DAcF8+%&bW6$l%feVQkXW!1ZUHq%_/cn$Zb\GlXV:e2ku)k/6>tBkk0gHo=,D.?>f@5RfHZtE3R5OM?:T1&>gtoWOmc6el6a&*]l7714W?@"ZB<6X4l.D)N9a-L7'9$b%hhWnIMk+5!]l,?0FaFUtk?S1hOe*b]1@Qp(_=*FXcS(8an&pb!G>38^>q\uls4MLHqI06DVMh_^4>5KgZK\*(l([&G1JB]4PYWub%?\Ze%Moqk8,4i(#A*hi=qgl*<6>-\g<f\Yu/uknBD[>ShRkDj^:U_SCP>)j9:?1(Z8!H^aPtMoS)&Y^u?'Ls-pg1I-ACF!Cg-+bE%<7u@"n$s?F2I097>qgGD'\RS*Rl7GK8@.QTL(o*CnaP4R;<sRjoqe7WaJOl!^W:)eTsEpoS*G9sn,V-`n[dg1Zg%>'fYH0^h+b_t%e4-!'2^l]BbGL3'YVIHLVMf0hF/qg"9c)>FB&qWe;5Y^G1%7PCdm`BHKrrtcZg"44a+>Z`UWB<jb,#L70>hGO73Nmp>Ll?Nku)&4%N?F]C.[MdH5/,tb^pTT4()h^sqo)lgW#-rs`5Y,gO1:Z(?/edtBgLIlW:-dF)H*;Q1!k>kM:tBZ4S?A?2F+&jQGRq,HRTYeF<n*@%nIcOFZ_!oseNK^-U*/"REdc>6e;u)i@kU87I9Ja%"]?U;QioNOdW07KP:L;Y7@ZMjlj("QLbS,tc^\niMneJYO.<WAC[QfC\Orc_%pOCFn]S+s6EB]odR_+5HY&oMBWSRrQ*1nc7\f5ZVqd1=Q_^;jg\E5E'7rc<Dl[E;+M?t*TV9)^e-=([?F5QhN"-3$]Bks(,'2`i=%lTJ=oK9>7uX=^!>8q-.JU;Wt<1c'5+:\,]//-`"J2g.#=Ofl`I"hj0l5fE8T+H`g>lu+4NL1,H@8(t%$5`@^d+L6W%f3ao.e(h0]%19s!6kk$*CUPjR[<8;a0UoWS^\54=g%<XD:BW-hd7RLIWN/$U0fR3OXQMGi;50aXd'S<I*^(*8hl`Zkq[_.-UK^B2kJ_3RcG/n/$%pQ"UW`d0#`-JZBX:98SF;=*>5Q`682>rqpg!MQc-V_8K4?K[*`e5VRh^:c$4Q%(9)+]P>KmkmCf!,ZR2*'qhXiCfVc=Q6S?e<bT_%mKki6NU-j:fIKIXZ$FlU9k<ICpY5/9/fO#Gq7&OGX?'5FIS92rVq'EpJ,,ThpK2ROU3P$fL$qV"o-0b;K-Vg"oQe:]]%:1g,/a%c%cchW<CcKoRG@#`0oGr,XZ!l5nGD"dWh9QOS$/.AqEArd!a0#.Lh3?NDI8\se2j1hL\3'-TSlOjP]t<iudTeW^pC2=0mX&7'p0mX.%i@aM%booVh,`,eN>U/*O9qPNl*e3O=$_'_[=BchrMKB`30L>l0O!@2s^&O&6DX[<_=4C![hQ3Z"7.>@hOB;mma?ZY6>HE$1naD2'%LXu7W#oT5PFPU#IHNZhtK;YHYAeu]En7H@KQLE\>p_V*Ve:86)9TQ<;XVKX1HDWE>AV?m9gO8B#CUi71*K9+?b*u@Jl82(+O0+N2%5.Fl)M4SFFR+scW]*0"kkZ,9'mRo:1N7<7/1o=60@55M6;@K7c@_TlhP#=$INE$BAm\8SYf?KeofJbZU^9aEfclSYgf#'%2HX]>Z%$fB>kTE?(#MKDT'U;M)lDtH.s8A&/Gq!/ung:67@b'NJ-d;BWT0GV`V:<ISL\5t,D*Z(UJPA+Wo@]QoVEg3<mIEf@JjL0N%DSL,g%fP[g0m$ci+MjsP*@WA_n!+DB69tBfTC;Jj8mo&?j[``:M/h.qqPCqr']7c+1cB_6(U_Ln*RpUV.M+b]AhWAk9`Ys;o*),"Bci%X?%QX1$(SLUK)RqGThAo_u(Rm0Osh!)#<C[MrY?`1^kYuZ3c^?tMtKJ0pcDr(tj@rhUhB4=fg>$o$HA.fs((aAb0nqZ\Z\PO2Nk]XYt%9^e-"s$"q_%lTsTfD,>.[aV4nb1fQoVj42Ujh5U+n_$VfJsG``]:G<amG5S>L#GeQYZ'G>4FsR_#(YT!''<*Dl:71FN\)VfX_$Da%LT+J,B2>LsfHq-R#c1HTDX"4QFn\h/T6NM6[n@'tS>Wj>Kl/W7C8?h29A5m([Y!ZLC'kJCHqMh"g*';t7)GVn$AF=0C]ZUTU<opP%Xk:FhTFWr7-g>_6*.jJcl(W'-\_HC&Zmm4"/H"YP_6_R97;.Q<fMqLm#SH6mYru=iKP^?#;NN^[pa%fGdmn,G5<1/-0]#U\-bgqF%Bs#j/\mo6&i[WjL3kW14nD0EKS]R-l>Wlo$4haVZ_;]h%7e5-?D-6`KAKs?SO5Q7X:[NUUs4G6_#i==Wf0&?>]$L+S&*R.+a,Y%u%i[(sn".1uRXJaSMNQ"D%V=BV#Jju?]7Q>1l4FWY[kHkla8c9QmNL[j+SC/9[MN+%!dtBR0f*.7Y'`YJ>.$kr`/Ep=UHo"/5J7,;L%>8P0Q8?=-:ZBMLQp6S<^GC&/7Oue`l+oIo6Dfts&Z0J0u"h_*\8DX(pdjp^9pDg!U`r/9iMGkE;'eh'),?$Tin%"<O"WV:U!dPR1%.p%WR,DN7HB\so3YsO=f"g_tX)XD\EDa,*)H,!/O8ZJQ(Qo7Qql*64jV$hK_LE=2=Op.42#;@.F4[=U$$I_qf<?nZ'SnZ6EEWBP@%#L<G[Y?tNETJ&WSJ1SLs*0.1CYlV026_k?1@<T]-`i[TA2sM!p#0d2X/4i/<?rr@g/38Nr;9rl"&!-r35GXsU,]m?aj6<"48:0Y!%;SKk_A/k;A^>Nj2s/AZeU:^i.^QbqrNGPB"P`KYAl-\E<p/4(:8aPmM]E'YHMt4`Er_gJKqiOBl.::g+.u1X!0Aoi\5oo7b0nVNt%9U-M9F0"1Hh@0Y_qMcbaCLlmg)X^qHi7,W#9`mf<7c*HtlkPE!Yo;h4^CXD"DY4t@h,*'WrK=i\Z'KX,p\Mk1OLWgombL_<hWpMc%P)$d'00(f+kIDMr?G@2B>U-c1O#"9*gpukP1??,ta]%N>^N-Q*rK;*l)s@KfLjT)`-PRSpgAej8Ois!e<q?@[oh1<)Mg6+\&3FUT%O(+<6Hs5E(p\H1SFEkqaJp[HZDtWGf%90V,qB_WB0i?;Ghs2'n2<EZZ2tVNG,KP.+J$34"/%GF#\CWD05fFPe4k./oabd>9)6!_o%lPFuB,&d,^h9I_D]medGE;j)?A=V)`kpbUu^LUc=$12#NhWku':?/>cA0h\7Y?u=cFYG%_n9b*8q-..6qK9L7C;>2pOqB*\A/k5K%^I2D?"A0`S]me)$_gU=\2oJo_K(ndETD&nFX'bn[*7=NW,p*`>8)*`]Y@"R^:H@m]hs6VVX5@TrdX&lFA9+HUf.Zs43?1IAke2Ge%\,$PR+($*U)G0\n%K/%&pK#%kgrJ$qQ;6uDL@0EeqRMJ:,[lG>f<6^X,&jTTRkZb\]m_SZ7Gd;g86/poC/-=>om*`JP+$IlamK%h%h!6nV][u$7qPDA^*VNf(\!<2%UCVOO?[je3&bl,2Sdb)El5-rPfmg$OGKs.8XaURp3U?!;^DJsXe:=]-CqtDrOoq8dHqFLtlPGm/%Vt\&1qOFI[R<2[ooY#_Pfp.3HlPC+;?+9Y>'0YQof.WO91+Ad,^$bPd<XdfJ`$+UB92:<9G3%WMoh3$L01$a"k[)"L-&?Z1;;CK(%<ehR\?GGDjL2Z`Xbc^?n?GGRGTgol2l?iJm2[?$*_,4dXCO8%j'8B3X6?g@<ke0mJV"7ocIGa5A`Dau_G"rO[&#Lq5jI!Z#*^%-(%$F'KQLYq3IK%[gK"OdKa$C'q%G)%;u+<t]=k&0m.Cp>[BPh-D98Qk8]h.iqVNNp%GelcE9[kspe*uQ#P3T#;?.l=u_e%6@LR9R:m%r%UCDf9mZ6.%M0oD]d3"ac#JAXk\:%ic)L"em-G[b_sBb8*g-8n9+^.fC@T]jhc"tmrq""/m.`'pVkli[<B)Z3;U44gmO^YHn<Rh%rjaocS:$jP0E5q8s&e`sEYgO\Xd1k*2VtAh$9;\gD0biqiUbU41Oh6fqDn@k#eZe1Dm`ba9;c9@5Bi.-eBO32r:72.Y*>0Y<Mf?d%\tn[d1ldilPN0,QX1GalqKcA:DGMo*5Jb:Y7&K)2kP"h2I=)8m159L]b4_+nfP81h:B4If<$DL/=;T17?#=eoIZu`#9.Lr3ce]Cu%FH>APk3%"HZ>*(JGe9L,H?*f7DB=jE+!8]sc';o;od`6e2jM!8S[=`!S%7"+Sc.e[(OI[D1Nd6R]?-aoRI7O#Xi%,&S1NeqmIAW]%i`N8XP>a4^E1Z['jeNXPVkTf3IcY;Fh^YQ<_V_rh:!MF@r-2>MVDF`])QLN"^%lr]?KfUMbrbc#@<5Z/?0AGerUo'7hiB^>c!SN_%Nj5ljE[K+>MEgh_G&aDEk3`()Yr/,QXR9?>^pfa-XbGP3BkDR-O)7*4IEU]/eT-5WimbH0h`i-XE:^fB546-9.#%6T,4+i`&.u/Q%[J>QfdWjBp0$!S9XH`)cdqB.="[ep$T,_A,%K:E_*e30RS'F5Y?le!ijt0ULn=)?3mG"hmj6YTQo(ukoFaa()XMr5.i#h07;ZGiB%R.ENjk+:?5&39*(FNIkE7sY,ef9P7]"3("BEH:MB4uf.QRBiC$nZiOla245a(#O;X5J)slII6AXQP=rb`0OdN/!."-_04'j'n314%p<uCSD>S.@MEEa6]VXY)dC6kaEakGfqdIe@<9W!d69Afe^,DQGn"/H5dHpIc4,.@);Re='(QL-)2?*7F!^9Usbp=/Xht+,iATlL&%eCm?/Hbl+u=C5+3-N,4374&=?ZnT+o=!@BbMhS,'1:\Q3<.$:'_F4:Ur8htB>eSXJ2lrW)1W3"o5;'r23C1EhGO!1<j064:E..].%,;435lfDDIrHc:a0Qh/T"Z4&2U2G,>`uZJ2hg.I@`4+HsMVgB>DggG)+LA-'ZfT61SIbEM?`r`f1Zr7pQRcS!*grVG`Q.\,rf)F)%[_H-^2qO/c\%^"_-]r3e\i!Pci;Ns!,[<%Li\\13g7Lg+d_rdLFS3bDGTdSj1;eUu\)D%0If&DB(JoB1ig:05K9pB54dc/F2+JWn%*l$(,D6R_<`EI50(O+J_-Ll`Wk>s5ZcH<-ZNC;ptbGDgAQO&o_pOYZc%sYl*VV_`r]sHQ>JmIV_^sdWamgf.@+4M>Rj(]1&c4%1Z%0@tli>MUeX`m_aB8V'n-C:F!(IH-#sN6P'oA7oTl(?YrV4Qa/Y)4g:lZCT/VS$2;H8a%]W9'ma$"n3rZ,JrkhX*L4$pAT>6SQP&:%Xo1\'a->!@hZf"Cn`%PJYBJcR_H2;YDe`\2hnVR$45d`d%D4[27YVF[hlP*_\!jd!,A_aTF_sXI$S.2s^KSV@Qg^$4SC`9h))hnO%]+Uer2l@U4'@iKNMKWaA7A1^U^0b3rVO$Zf?c9&M&@\IY,)iSN=*]DrCd6oB]H"baD=u!4h]=j#HP%@HRgRZsZbWudcFEV/#hT0u%iPB@b?[g_"cs%hU[sgJAQEN_Z!NCEFGOIKqC=@CDmn45&m'nZTA"L7gVRQ#kUo&gS9KNpI[bpoBg?#SHFhl`T&S%<:#HiZaq_LJ9%k7VnN:ha=p3,Ncp\1Fho,8=t%0AO$Okd1#4,^eF=\4?n=q-r2J_VAEiHh-U>p7\/Sj5iS$+MSbY!Ki=o\Od;<o4u=kL-GqVmmeP_%%6Kh.n:1[n%#CKG5T>A;eZ=sY5mQZk91]ABN/t>a`YsPJ6:,JZp<H%BbgYYKI1..?cM4W2q_n-uMNBU(`$T(p1m-Dj*D,:<8-WqJ%:CN*XJ=2I\9e6]7NPtm!%b*m1m52$Jc7e!J'S`05&gAdp*g1u.MY0c1U%cDUbRV_MD?FrW%3WYg2_hsu=]gJo,40+r/B3\NGsBP1%ngRU,><eUF&IjuV:-tl/$c<V-Js+o>i;LS@=:/"SD0ZMh-S<RLO1j9-3sW_iahjQL%UPiM)LDFE>L"H)Z0qu;'3eoQ`"_4_2_C"(%nj>$)+b"S41mZdI1(:c=N>2X/)Sn/,a^Yl=QGb9<TH*DYYisi(#AbU/E[L7rC1.s>LB`uoG@\'<\QuM$YPj'bmI)us>s=o14Y2$Y%&%d51Y+5J%]6nSj%i5/^/t[Yiks+>$_7?'freFcCfZX#:3gUAj[-p+jHM;CN?n9&%mU#:VG41*S4.4lR`4Zh)m^R2b;%G7N=c\ju%3E0$sB?2C'ID:?g2CD)SU+(t=QJt,I_=+)D.##r?*_fUJXR8hnf(8/S>XAHXEH`2M*.j+<-i^\nj982YO8Tc_;ac!-PT.DFht@E-%RnfR7Yc8((o-bK`alVo<J**MM*j)PM*?Rg:N;.o.QblX)[:W\\g.s>&/C*FZ/+[f&#=M_1E;:'KJKO#sV6IB-XeG5FLPkD.@=E[Y%r%uNF_KfY:S_kuT0[HZFpckesh6riT_`tJ]o<2>oFjd;(<pSFmb]9SbZ,bL.rM<A+<@ZlVs6a\\T"dH=ohKZZ>M-G6md8]I<opm^%;T[p6-&c3f.aEn",B9NS`LZZQ_f]@V>JH`"pYC\tQ1ELEj`]/jPDC"9XL>_Bk<S3ugt;PiqmWi`iucS!_HW9iqXlp72ZL1,0t)%C%ZSf1i*2uIdYpU^KVQJP6&+ei%\&D^NL39UI0CqJ"+fIQ).o.)lc/\cq"/ihIms_moQPr*\X6nL:%g?=`M+8u(G26e[LJI3`(/8K1%BBb?#A`<%&c.Kn`__rV7p!).5@X/sU[gsS(@uD;[.A-:__q8e5[Q:j!5J&#,J'L,`;<Pg_;X(:;BXbU,oal)?QR>#cM34];D?X6^%hE9eXYpcE'l]W#6[d,t6GA$EIKFi#$$K^[q&h&F[J5rh3X,hd?*[l1jmoK'@3;pS+<IMmI!9Id(Ak>0gRe*e=D`:s-kIl,$eEOBY%<V`SXpHA<Iorp%j*%KftOR!Jr_Vat1qRfVr4o"p2.4ojZjTrN[4M5`;&-?P.6iiA9]Jf#%FSO0T'a9l.>OFJFJ^`U@'Nl![I_*#P%._TfP:98J^R)_P+K:=e!H*0EP3o_;8nFMC'jnr$&e,%<ak%Eei["g0RHRZ73dHU$i?M&h+^Kc&OrEXe,9.-2dHc#K=,VC[=XANKd%!#tATq"D?3eQsR]G`.oGO"2kbQAQWJ;p2q5Dq73qj82=E)S&Gq]UO9+PY<%Do1dau@aSHOqW2)AVo&[^_9-#Fb("B_3=<S+GlQAH%I4L@cU%/=7^Hb"F]GbSWLUIT=qA)MLpinn<d_b>>[?YRCP_/:bl%/S7[cbMD#,L!;aK\\%rS=`4fsU8\Cd6V)/t(sBT,_g:`5BXf%qrE:>,e@mAmumkAP,)9*m?:-)cQ6q>G/Y`LZNhe$nWsZ&R,!-EgbXYjLbj`Rs-^a1I1ST,)!fDQh$-VA%A4)TDC;XVDLBBo.C<:9%(6:QkX8>`1S/BFd:2\/XSu4maTSoK$CP%ghG*mJ!-^YEfA2(G!e^[;P"?C<!JZL&D9%_[lK\a'DeW]jBVgUlu/gls8dL3As0(q$g%<QS)js"9'k8gj1QUCeoeh=:P4Ge9*:@U/nO68tRHRf]NNVr1r8!nMHjnDHe;T##@[ciM&q58$;$l@-43&ddmXI,LRO^Ea0YJqjCE%c+EF].[rB+ng2iV86B)BY=g.bjao+7^V;2E/rt-sYB9V%q?bWeg<s]U48?qYk5.@=JUE==fRoBd"u<`l-N6tVqJ)b*!PAamd"$4^%Uht^dn`o7mA:F"i5)L>5+f7QQe(kId\2(;q]QBn*Bg`*g%5X!eV*aN_@]H1[nCf;.*(Y[D3;k`k%!R>VBK!C%4Fft=_Wf8R2hkdZ%?A?d[RRjt-CuK>^+iP:;p#AM]aVK6*7etfDf78$GA%'.'#E)-q40n*t)I/b'99mpc*,_KR<-k8oC!0_Nggeu%H[KIMe!$*["?;0$%I3lF52(M:br\1N\:-[V3jY(g;4sr(CqjtSSD29g(,p<IZ'S`?eSQC6eUTo@cB;`;)7V):./DS23jEb75C$[I<'M2d:7PX7uLFhg0%I"tu+;*7#&L?&',-M&geDb!R[`:Ke438BP<SekK!6ZN%1=U_WParM@PS.%<NDVhZ^X;H'OcER+g$SK0'I?6AV;;JXC^nL&I_q]^A%Oi8j,41?ClbdID&ASC/&jYo)M[Yh;sI)0G,k@L_GaDfVQRlcF+/*:E^;Sb49r?hSm+*r$i#%mfES;up85FD1031PKl*C0C\!Os8S%\9//X#L/uebRlW#^gD6N5N18*S8j0bO+Ta#>Sssu*63?3'7_qT19NWu!DOXlZ9!3]cJdrS^[7rNH,/d70MFJY/kLs36LF"WM3Ab&%`*#Br4fn#Og<N*mcY&Ts/6m_rD$$7hE;`L+\9o'7+I_a_[&C<Hlc\Ka"Y8hakBsV%J">=RIK"Z)Fg*fJ&RgD0K1X4Z[tJRtZb*&P%Y&cMV*nn\`[s3)+ijjDqcKSkNkN<BQFlVIsZF^"pjV6!a^,(grnZlZVOa$\q8b2_\qp->7/GI*HH;PYIS/"=P>Se[=?h:^uIY,CY%c(n_;)RCP)87U6iIWs6]$lN7&JGBqW7*loR4K8dH5H2lSP.7Y>U_c/G"7o>$#CG(WA`:0$@fa9<1ZV`uH96FK4_JLqh-.I\7n.R1%Bb;d!Gn!Z_DVUEsH0mY*^!KCbgp_8?HO;%sS;Ga#R@fE*=0UTQ+jV[aP\iXtgu3d7(Dho7aj7j"%t]dH%eRV!-_:"cAo51e$D7-F%Yt&?NGPf%?hp2)203E;_Xo3`M1RrdM\D_G>ro-.WaQ.@]E`)(K25,Qj\64*ZedorR='?K-V8!B;$_N`KAZD;$%>4[7!.+F)RDH13%2Ock2B6'&eNE0\mqV8&.lK-USfd-XS*$&ARD.T'><;)H@?-^abd3t'g1k.=ik8TJ0KT?us]>=O'r%%BXs#\OTH.=X;@:sd>MAQYL%qKGERmdi)]Z:a!%*QMUAIq>%24j)X[<3e1(^j/Du9V"DU(_#-?)n)@:+<Y0K$:$[kC4&2bVX]6rJ?6D$gKFSfk#I%FT/1q`RWfTL%2"NcWYm1GjEKDCQ.;hRIaYUuar5CY:e.bE'*#i(f=C0tB'23H]P?5K>BWCL]RE9s;4<2U$?m;VEjE4bY3Rm$\1gS@H(urjC7*V3u%jTk!p6c$T`+=hAG]"nd=2TH:LSYdf;MF.e',6:V8fCQR_X+=/PhGbJc5ao\(VWMaM&</-=VW/Zk=2Rj7PqSo0C22Uu\H"*e:&&fN%7kPJUCH-7H)LUtc.Gh"s-oC=!mJ):%b2bnaMKX1I7JY^Y#DsFgY@tFsfTHh&MX(,'e+=WAoa1Zmb5^jAJSt/I&T>Oko<r@9ZrEp*%R5e?iadWb_*M=1sSEqCb/H\MZTq$q_/A`BeDLujB31QT8$8C#K[FXoW_C67V&_>)iC>r(-iI)oo<#HpJc8gnm88B7TCU:[nFg5=G%`^_Ra`,>p&'O;rNU[h`q[`U%%$s[@)&3U8tNgu'e(fh2[j;![U=kSEG.\hU>;B5hl1_nk%F)ZYASnYK?5"*jFT]Yb6dnG;k&S@u_%JM:`%7P/!LA#:]EoLeD;,AQP1,-],p?BipKPSBAtNWT?_)ZPPMAXg'.AmV`fdpc/lc%KR:HNp.;fV5[G0LN!-(L.5gphD2_"^K]K%iP\)DQQ*M):d.d@HLme#6d2FQCeiKcW2Abo#n4dM`T/VJkQFga:*bWjVP/s40St"oZ@aHCd6qh?;oOV5L;Ts.:B!qi\>(!P7%E@X%fehQHUCs:P6g]I[>nOJ-.&SW61oVS;PVC(<I@I5]8D<,ElV\ZX"T^Eu&gUs*KQrMXh6;KI,%*$e1"0JB=5=Ju.LIP6"<!(H]&jr^%,?LFMZk+.=/W'd'-&hHo947l;&fK#`hjM#J&2H4l?"O"hrs1rB89BX<f]&Fa&QC]Rn!%'l8gq#G5rpKn6bn8@[k'nJW+g%+@%*o!%Q?,#q'4)*_^EpG,5\`&6<c*aq:Nr0p0[<ukm]!'4/+]</L^I`-1%>FVW'O4J)*j&p+l>#MjPmIC<G`iM:d?lbV&ZCc/Aa@M8g<4N%7PHG<9edj;`M,qn$*l@S,5P>V+Vn$G28rgBh!0Ho9S^a3=<&'/1IErl_AT\9hJLPR1`7od/BcA>c]P8T88E^C5n3')@qK@cZT$K@%M$%#hMK)&k[Ug0V#nd@#Opg?MK[kH(d#JNd\TOZT^:Fo\\'/ulSiOtR@PFJb&@F?KP8rp`W%g7Y?hFq]EWN$6TEoTu]+E3;5\tI$%a&OW_.PHfK$c>4gP$3[=UTVUFL?V7R6rsd]$tZGUaiYZdWt_;6Y+#Kikd\<HR&VPaXT>TdF%-R9PO#'?15V4B"XiQ7AnQP@G%"LB%o=8am8oj@K:"c3(&4gk5A3nhI+Y.WYeeWnfCm.K^m74rWq[LI(XBhJ04kQDK6mIKO]^69I@>or<"dTATJsZfr@;)o3B!L\<iLLi!%`ti(V,7J]O>:c7QBn?o+N&Lo[.&Iub_UW)")O;]d>rUk[(n)bjAJg;,%2HG$Ko+N@_9j)Jaec.KlG46%4t9=;Dn]JVTa+)%K@9/j%AeT^R]L?ZJWe:6A[0SI(L?\]OERAXHOgSnfm`sd\%IP4)l1jH/_Sj(r0IT76/^;dUMbGn%;">UQ%:&$o/@h7K-LS-i<Ra%.KOJ?H%d5&qrS@;b^_+C'L0,Dcd>BD4!K@ZTQL(=>;PL5]8JX1jZ#`!/BCWI^D@CV;:X,\-\.[b15Cbi6eKT%iU"sDJj:$SVrAhomckpjLh%L2*jr':,9;=hTu+qRO".eKBrj0ejU$<f-aa4igSW)+JAK"id&"&5;PEfXg'CPu,2/.QX>f9I&Wfm7KZnKT8WcE1!I0g4L!+KH.^5%>IZV3QtE&s_Mqm@6-07NG0p/P0S(r_7u]6"P4.q@J=3u70HIN2Jq;#fC)^P=+r%$9:d?U2eE=EQ-<J#l'#o%H&(>q\dACEK)XWg.%PnB95=DS*XVBQ6*(nU88F.!2.Ms(7ONf!HMLN.`@&&TsI11b;/jT:ao5p5!j<.aZ-?aOKM7!kHoD*`OhW`pnKJZp`\&d)2MMdVjI%MeP7H;11,QD,W`)5>Y8,9hVp.$$'W=1M,IL2WkXr1up&&0o\o9!),io+?i&A*@0r`i_@?5iPH-5-";B2>c9RG<Ue7BU)0$^#R$>"%_T)X;ZQ'K*FaU\K/Jq1$`XNGl8_"!@fad;<&gmEN-VAMSic:eCMb%jCV4k%P;S_pjN+`iM@J<9;aC0IO'tCJ^Dr`T>Nn^cUPEd^g%Y)T;.)ATV1>Ei*/bmD5eB5UukVH]u;@saZ[XidI&aP_E6TNk!,LTQbb"r]F3D8mk__$jOV;@"ZPL3f$t+_##uRRI;aqCsS<?Hgjb%i4-<,%^rdDmF[GLU2PV#\6A+[63*uQO$4Bs?\YZLLN;cci5`8H+c(!t#X%Af>2^T1<M@Qc+,pso%TQo;Vo:R@Ftcq,>UZm85>2E3%K?1n[ad:YgKlAEo%:BCt^BfQV-)af6Op7cp&/B/:C.gjq'&S@d0>HmdJP-%"'i5<0#50suJ=U#5"MtuS:dA"n:Gtod@>:elX@qb5%\B="j3AC._eRk*n`IUV(UiTt=Z[g]d0N1imOFZ:d\Ms@XMG9"]`5\SJ,RL*DkSir#$)hGL"2Q>+"KsLkWW^dm)PUTAC:()TB/&)6%P+YGR/l5Oa-4!WU1)6(bPq,BEAH9SD\L(pn2:8h6Wg[a#lu.9+BU`G^@P7gW#\a:.">L,$R>nYJKF*U<bcl^Gq&5]BhpH-siEN$g%L^hZ18&_eW$rh80s%J%PE\6&^N+SgO*Ir-\mE!E_.f9GQ;`(12W2:kKRb7,FFf2aWR:-Au1+^9Qf+'(.CC4)(K4%@e@mVCCg/Eg!%<N5WmQ'o#<!LoJm_76"4I5%p0%`olt+R`+k>)H%4YIa+XnHhKjkYaK/m2'3Hj\k/AH4U9!O(-5b&o,go;2[aDEY9+=NK6E6KK(o-%dj8s=YW^l:`9,>-@bSX=$g:!FqiJ9s)(rY:P+8^--=Ei*f>)QO_+'H(Q1Do2SUn;4dJa2['e5FE&C[p^K#TUeJA^UC"Go[j+:lO.%C^[@5=:@V*CP.9bc<YGS8o[q\cqI;@@8(&s\@>8LD1j3$k3u>mV%%M=B#A/BmkdmEWn4h_`VC6gh*mN/P,$ZQA[TnO%-^jpi`?h"%/r!>]q&i@$PdL41`O%MUU'G`Z7okp@n-&!EjEOrQf5`1EY+g+[oO3AtFC71N)chcHFoR2uR0"%VVJ&/\`#1SVI3gcA63UQBgg.kU%2m=/-NRCT<H8eCBh7]o5NWTBDM6f38pmE\Z+(^*%&)4?OLQi$#>jmkX3st,Ng^OX<Uq.%IE-*Q3kG?[C@A30e#>QqJk%0qjH.Y,V%2)HI%"CH-c*L;gOjq,U5Kna1i_G!m.T;c?NBUPl*DDGp>#r><+a;O'TYdR#Z&h'aVC5_+H%b$*E@1qO,D=D3GeWT1,#BGnP[<=09%m1@?n]j=YQ5d"EI-Mk^<BTFOlL41.1g)iR'U,!CZ+DCN5eE8V"mKsMjkha<>4&Y<4R$b4W.sAEJ1SiHZXp;nHUG60]-qpsXD1rQX%J]iU$-ifFF!eGU#KSs5oc8iY?!iB1V%jm`5P:9IoMgJlLi&@17@[LUi%QKm\1,Ka5=u[bXCk4L8FttcO^oRp[d+9mb9.6aOVCiZ(%4E1A=?'eBJapI:T;BkZti^S]"PJ$-6E&sWoXWE-29ot%5KLniuW;?<^!]@$eCsap>g!`u]IEU?75;ZBi(8p%0VC@D$c+aOOWiH1a%VQ,N9o9Ke3TGDLs+[HRnEb(Y1"H4$a)Phtr&MPpo#ad$#0_/X;jL+*465;#jVdnBi_/QnPIUi^TQt/T*8_$m?-f#>B_L05.TtYe*%MWlmL8U`@T;W,_gQu,Jqg16\Q>e"Ms\%rKZ`AnZg1.Nr-k<MK_dC^Z&P2F[m;oft+C3re5`r-l]F9HnieWbKG,Xn>d/I.:t,a#Wo%/kVK>S]?9(`jUP:ONOgqBU1u<('cBC'>4Fn%G1p(h6q&&"qL2j0f:t1h)5BM&+'oT'jU5]W+lm`"W6.8ASht#G>3ufo$'WrBN6f>%]"`idWX9Z!+^JNL?IEl[;Lt&?`]8f7I[HAq#&,8f8PUJ<0"6:A#oK[5ZqWms62Q8+4BE<fK.9#[I+=a'e.1V"0_ntm!AsY%'U/5L%589k!&1.l4^k-1^$<4PbT\q;NG70327qRpY8"<=hNXD[UW1O)./*I=@:&="744`O=-bBE37>NNGDZk@.P1ju-qeTukq+?5HaVGkQ%ndo4N5BB7le98nl:W&lCclmecW,6WaWo02-/;='3;&Ppe`-d:aC>6OY`-_XGd/'DF<N!DH"9pQ273Q[O-9N*)oL]<q\5ooDJD*E#%e;ltSVF?sWNQ*ha0If>J>A1aJ[&H$DPHrOJFRZjREce9o@VgZ^\?/?1ck/SHN[kh&84NIL0:.?KQ'V-V<tZ!4?0AMIG/"AFNN:k8%V?E/52A:0ar2DlkjZR@9Q&VMWca)MHaP$Hihh0X.`RZ<6)T&N+/CNQ0MAr2hW5;C>PG6;0fFe<0_RLU1]aR4jo2+FJjD8PLGQhqK%T8Noi$RLSGG;IJg?rb?)>8>Yf)Q*-fgZYm6_0g@c6%K@X49tC["TDFq/^Ush=qCf1G'Bq#JorNO.E`nrJnb*)!bI*2[1][5E"jF]%klTbN,BcDVdHQf&ChANPbFruTDZMTLc;CoF9:`pX;&'](`GI8BRqQsV<qF4&k#rpGh'eYoDDs,;A\u4t%J7u5T2^W-+;A9+D%ZZ_%<s!QX==E&o/M75<W<E`&?"4AT,6ZMI8?5jk^BIUsbMo2/1&+q.L5NOl,%l;e*>s4M7%YW=n@;_3e-Z`e89MCX/[C'tGFqj5&+F(s%1fW4l?"e<s!C/ce`pn[[_\PZM"*\pcqc60+feQiH)H]?FgJ!s]Pe;"=$ns/F>8U8S5fLZIO\(8QKjegcKS]h)dbu7Ukb-h$RDO]t%O]`Ia6P/pAXp9LB-9?/bp`8I4C`W1)+,ju.9^%$.W+Cg'F>Ub:6TP9,aU*\EbnbkU]E[b_!&_k,Kt0IA)8[p4/HM6HXdVG@^_n0(%qFg+jTnG*7G6=3Il64f<fE>VKCmu"JO5+EZ<&mD[@A8t+T;H''pDhO(7MGo'241%E9fQa8?dK17:eR<j`'MAIR\1fbrX;0);M\he%..ffk7;Wp81/LCU)[sOW2JWll1a$$6-8?$.:k=e6Cl1Y8Y!Itg,>jBV*21'`F7d6-l76Pe_^HMJ+IJn%+W-/)EGJ2qV_*Tn7K`u@%N9fPVhJA\4<s.PYGGu<Q700D+\@]RnR$85@K,R..;\1;O$k5IO8R4a>dCS<T*UjZ2R3@NY>In'`9rp%YV9tt@&jfF':18Va;Bp):%&UP"SaqV^OmNa,:&n2:NX8-1]NBW_u^MXb0=19-7DU6_@Ak9u?%c@/oWC*B+S<bTnKSs\?35]k-TU;IP6b9eqOPrV^"nuTG<IQ5&%ONX?9jM@",'9OS`N#[DqGB.7V.QMT=D*o+)FP\-2D#]MfJM%570ttF(:VKXt%7]Ld'V)-0G/h7a#aVqb3B@jc*R4#,;TK^Y")9ku%c3.)d&iq/XJQ`%a)'ZXg\9A@9JKPXXX_U=>"up*l-esb8cBptiMkb)P.Ek<o:i;)&KK>TsSmh,g.C'-dd[pOb$D&;[QmVcaJ54P"%@F\@PP_9TtJr,R'=@t.FHR;'EgX]_p_b:a2@=VMEDssR**fP[cHpNZ-oqP-Vn@<uObSRYMer>:WlZU0D0aadgfHbhRMP.gS%8LQ[%+dpKTC32L'('`HZTF%W-*MKF3U%Aj]dDLP4LW9-_67M+6TSeRD)'%ceQ:eaoHH%e_<)Cq^"dj2\8FTl:k?9!Al+rsAFQ!cS#R.+B%8PF()'59fAI+N#FabmCZ>#Do*.arLMeS;[KEg'kurTGoQd4/U0!O7K&Z7W?'nXYe/Uk.9:;tG-1Mo:++W*#^4Qn2gh^g`^NQJqUh%[/c:C2qh9]m=tBcL*>g&a9I3Q6I]&lj*uT:K-1ZCr/X2GV'%0*gt8iP!DIaK3K-TK#@MG.#D_Of3<>d"l4j<<'/"t.,o/)\Tg$7+%a"_urW,2QrU\3f8j=ld<:&p%3rrCM*;-=t?"-D31/tN!B(>)QCJ2(Z8"QOp/@b0Q2+/""]-:-&"L+qU"`#kTM'20X44T3;I)7m"f%+Z=<sMN2/nB&`G)@%)u39%Y8WrWCYhjFHId*t^fY0o+/E5+mj3G_:YUKNh.4ONEYnK$\%q3<$s\O\gaMiqOUf/%QQ01D./O$:b]=%AT[nnKZWh8*u#Isci4TSi#ZAgiqsnP[T.A86]e,(aM((O1PaES5JVC3@+jQ;TBMDBgpT?F8)baXMIhY9Ij?h6+<j%eQ;P=J9]0-N%fQecO"YEYpN%qLAdnSN#4TEIb3k=WGoW*`6BVp=-q7dFE$"Dolh[``+q*2<$&kiu%s4F(r@Ij=<Yt#D"[P#l*EAf-J95tf>l6E.P%_1dP6ehh'B]on>[Tb']Vrr=;**r6YDGpHjR?<c>S-7a-H=VTBTTKPWi\6^rO0oG<b+sJ2k!A/7e1./,IW=Qc`Ph8<eUJ&1-mTPL@%(ANW>KI@'F9@+EEs!*gD6bm4H-W2PF,R'W1Eh4ULOH0!R\0deY9:3Mmk31cU-KT/22gG=_bHEZu:7hJ!]9-mN&a00B;J[\XNDX:O%R'"Ge/qER]amT;9Q7JOIeI\6&>lliJ>=^5)WQ09\(`[K:T'53n.E>-!,ebhl"A48>1J-rE/]*a>CshVhH&OWiGE`,k^pF&Y.X;N8%:OoZ+b7^$^j0Xqm9Um!IOU0IVmE0C$KL2:p_YA:"V%F[Q,Kuqd.HoV#63b_sjg%gX2DQ=0e_mG045gKGJ37qrO:7@1^lAsP0i/fS%i`HBR,6G7Rb-rEH7oFL2AdQMX6`7:7QjbtH5p6tF0gsWjL@/h]&M@LBl&&.PQEf.'8?mLi,$#X1A'1@#,-Z(@Na_cl@bR8gWo9*b%g(i_/>Qp8O"u$Xi%4)b38$JC#X,Tp`%mXOK^fYGi;cQKtUHMA=kpd;mg=0u[$CA+FH./_u9Nr[($"TEZe]-^u<4TV5SEm%$G$J<M%[4og).XY&emM4*A.Ff+nW()_ErZ]^d/[PjhG=AJX*;2@0<=LEK0L)jKrMgRi6ICd#8`9jf/R"I5HsJ471/s`B3a3)W;)q@EFX;a1%QqOoAc6OXB&LiJ!C6]L4%GqU^'@eO0)kU%W&IcN";5Qnp!<Njqg,L()`0N#B[;dsFGWUQQ&D[V1I(Ch*]TS"fj.fFf=rKbGY9Hpb%)2BKF/P]gg7U@?,.I*A1.2;q]8k#g>-Mo;eQ$Xcjdh"M(8@$T0+B=)0#@UkI[7!$o?rDKYA]KNKkZ`dV_[o8T)j!%6C?&906gt\A%C?)*1<PW.D2G+Oc1ebh+?pAb]"T+1TgVIk[DQ#HYFeNu:1iS*cN[a%MMFWLe)!XhU>MFdnMZmLW_k`N-P$oA8DTX.F*.Wd?#cXk\%4k+ua2HL>u;L#1:&6M-4#ne?Y$,2Q@Go<SM;FY'MQmoHT4F7d,03AOV].MQA>uS[PKQ>\XJL,Xk?n`d1dZPXYb&$aeC47"Q71,Dd%2[\]JgC6g=ao`MoQm0d[AKogUKi3Z38\Q]F&b20,:nSsmjfq5s@5O'$``+uEYosKYjpssL+]bSCJI!Adl3^UZ!t"@`Pm#(Zefo*q%lm:"pq&U,=pm'--(qnr7f).e`;-[2(><NV_Y9!^<l(M+RU8Tm:<6tlX][JreKa%=/Jl"g(/4q>-/9EHD#gI@l.o=:k_@/eB]Bc=&%:Xgul1'A)n1ph@H#X#ot-_5i4&VOd==IDD)cu.Io\/d_qcoAR<TkPOB.!/,Wj5KANR!'fkj,#ue7<YcX3M3!bWC+`@7csPTE5KTX%r7VC0BK/-CJ/2!GlO^1WGu)!t"5@pWNq5ZjQ:g@@A]=]YS?Ss'Lk#mg1g>'/fSL*9*Rlm/.<`9KeT`+)&/\!=]*I.Q7/kgk_G*oE%F@P5o#SY;s3hmfT=tVQ^!QIO[+KR)2`BYt8L.U@pX.#*"&>nAoQj\8$,W5$M(,1K?3m>_,k)=\!$8[)q6#Im*;aM(.MK,Wd'dgN9%0E;Zp/n%Z%75B-SE:WX!'0n=,^&[DZCDdn?M0M$G*Q?4<9IP?3ODJT>,r'b*BU,qj4tASa"dV^KKLTj,KSe:i!"mU=U(>8c%@1)F%Q;Dg%Kqlg[7i`N1Di.O."uWKS$o-.(H:nbKd7I-?-;Trq#5]TcTX4_01dk@j/@e?j!<GER/_:t:?!SGViF7WtGmSg-XK)?PU)#gc%MY\MITI@cr_g@In_:pYrYaQZ2_&NaCer>:Wl?:'C`dFiV)?umZ@*U*j_.e!lNDRf[!Q1/V^d7b4-49#O`Cr3aN`2K@^,;)uLID1b%`G@nFJ0i*4ktD[s,/mXf7j2$7!qo;b,D'%1P0@ouJ9d%k`mMSY!'-htO%:=R0j@+16Ac:Bj)LGYmh4V64DmKQU.IkFbXV]c^[&eD%.!_#o0KXn$.oXj50Lo$T%gp$@3]7^%-_t6e(s3+ie(ZLj`mkcIi0l"K\/N&k_3Sd[?m[@F;X_u3'#NE?D.)F^/fh2@;H1L!.FQBK%$?V(&1u/BMX2U>g-WlOo=-Ph_PhulMS;&7?@FK0_4Y91hi4:7&XJM`up:;[S79.MDQp>;oN(MT:;%f'NA\*H[#Ro\HBIHiE,1uGY%<[\P'p=Ya4\>m'f&a<UU+A1WpiI&q8mViat%Fcc];2-%Nk%5Z],rp-cMV(7.0V2kX78h\lRN<[&S[hnC0M'G"X6:t[bop$p34Z=O%iJLVY)I8F)mXA\o0N/O@8;BNe+\&!u@($l@)Lu:)$FNF(ikY!e#)>Ri"iK+=%`?4>;-QN4>EhI8ZOn'US8U)"&n)!4Fr]YY8;Oe_%ad.ag+\W55O@]`Y#W$TnpVFe*d2qX)#\O5r),n8T7KnBF"Ut&V5sa<$&lZ^o#big>F'0c[U*O*,1K\82ZW0U#_#QJQ#cmc0(c*SW%\Z>q$YAQ9Mjl%)i9aHeF@0\_^(%srP0[h2A(QO%]bVoqt%J9/%:kV\h+i6&mBH_C/?^h:uRu/\c8<O/W9"?>Mj/`O;&Y<RnbF@Ea%IT0";bZ^qR[M?G\&Y]+M^?#ZgJ09)'jb%L^2i,9J0\o&+,.*'mj2*JM3kKo;D.%-=Zq#7?%%0jN!6Vk&TTUX#6qKb@P6Q8U$Q^0Q%(k=2$M"ligMkI(!CZ?1hYlU/.M*WY:N!gdQNpt^_E7S\7OGblL$DR2(+Qh<W!!FYPPfaX>_A?qq-`9>%$POY-K+bsNE'H<7Z7pp&%<-VF8JZn`4QpIX*J/HK57iTF5LKTX^;Zl=S3k9"dX"8p]-WZenS#G>g@o"'"l:d;;6a^d"]LT75'5-><p)HZZY4@R4(e%mS*N("O%C.+"@n=YBOktP>6PX^4BB0\5&=.^Xpp&Ti7EYLEcp+VB#;$9$4JtU'jd>1.(_^#l5-tIlnZp]^(2,iE?iu3`(<Qu#k:bp2I0%;d*%-Ya&sncMQp0ZflQaTO:SnjRES]Dr/BkjS^WgCbfTgTnf2EC0qti?"Z/>932Z6--EXlj/t8'i>TLp5!e5_2()XHOd3>JCYoG%9Csh%#9%1EfYjNl!>VZW%;=8s'k:5Q8`TRY3I'M^j45"AGY!sW,.R`\AoKU^\;O$f7B?^t[fS(ZWc'UDLR:h6FMTk_S'qWIanI%q)&(e_%PUC#g\deb@]/2nP4MXX&>@EmL!.7V!J!&P`&?HB1#Z4$C3nc#"e\c68GMJS&J3cc,k_5$[:dQ$ndY<de3tT`6MF1sJ%Me"Q!U>Jm%]&JO^3#WH@i&HbUK*B@^6>M_,h:nC8,6nVe2Vbcq;LG*FP(V-g]b\$<Y7q9W21rZmD7kr\Aa>B+Vo6TU>'Nk7NdJ=S6AbcR<;fW&%_H(d/f)S/%=>:)7X9EntJE;kO$_\o\!AFX6"F[m6e07EK8Q&QUaJ>(fNp-fAa\=*H<)1CdKIMILh#b_-72Q[T"FukYj=p^>B`LFH%4<=9sifG.Q9El/d,?bgkr=fiO6BQWq1CR4b_/&EDo'.9C$::J.1s]C.fm+[8k!=B$Bf51bY=A#*R"R)e?PP`A(E<CuAd]EG<jhpq%S_;fRG^fYg3,`o]:mBfObo"*]/6b*;P\]b<Bd^Oed;60Ng!.N<rM@d=lZ=$e<*%H_8F>Hs-+<Sop%>F3>1OZikP1uc97Lk:7E[.t%&J1KO>P>;l]An7O[@I9U-G=8C]DdEN`*Q]mjDq0[f?3hg\QZ&@19^*9?^5H<?AE5rRf#bN[8gpb)QcW?rRU`[5^4#H4I=ed.:rK3;[*mZ~>%AI9_PrivateDataEnd